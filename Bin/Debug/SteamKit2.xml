<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SteamKit2</name>
    </assembly>
    <members>
        <member name="T:SteamKit2.ClientMsgProtobuf">
            <summary>
            Represents a protobuf backed client message. Only contains the header information.
            </summary>
        </member>
        <member name="P:SteamKit2.ClientMsgProtobuf.IsProto">
            <summary>
            Gets a value indicating whether this client message is protobuf backed.
            Client messages of this type are always protobuf backed.
            </summary>
            <value>
            	<c>true</c> if this instance is protobuf backed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.ClientMsgProtobuf.MsgType">
            <summary>
            Gets the network message type of this client message.
            </summary>
            <value>
            The network message type.
            </value>
        </member>
        <member name="P:SteamKit2.ClientMsgProtobuf.SessionID">
            <summary>
            Gets or sets the session id for this client message.
            </summary>
            <value>
            The session id.
            </value>
        </member>
        <member name="P:SteamKit2.ClientMsgProtobuf.SteamID">
            <summary>
            Gets or sets the <see cref="P:SteamKit2.ClientMsgProtobuf.SteamID"/> for this client message.
            </summary>
            <value>
            The <see cref="P:SteamKit2.ClientMsgProtobuf.SteamID"/>.
            </value>
        </member>
        <member name="P:SteamKit2.ClientMsgProtobuf.TargetJobID">
            <summary>
            Gets or sets the target job id for this client message.
            </summary>
            <value>
            The target job id.
            </value>
        </member>
        <member name="P:SteamKit2.ClientMsgProtobuf.SourceJobID">
            <summary>
            Gets or sets the source job id for this client message.
            </summary>
            <value>
            The source job id.
            </value>
        </member>
        <member name="P:SteamKit2.ClientMsgProtobuf.ProtoHeader">
            <summary>
            Shorthand accessor for the protobuf header.
            </summary>
        </member>
        <member name="M:SteamKit2.ClientMsgProtobuf.#ctor(SteamKit2.IPacketMsg)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.ClientMsgProtobuf"/> class.
            This is a recieve constructor.
            </summary>
            <param name="msg">The packet message to build this client message from.</param>
        </member>
        <member name="M:SteamKit2.ClientMsgProtobuf.Serialize">
            <summary>
            Serializes this client message instance to a byte array.
            </summary>
            <exception cref="T:System.NotSupportedException">This class is for reading Protobuf messages only. If you want to create a protobuf message, use <see cref="T:SteamKit2.ClientMsgProtobuf`1"/>.</exception>
        </member>
        <member name="M:SteamKit2.ClientMsgProtobuf.Deserialize(System.Byte[])">
            <summary>
            Initializes this client message by deserializing the specified data.
            </summary>
            <param name="data">The data representing a client message.</param>
        </member>
        <member name="T:SteamKit2.ClientMsgProtobuf`1">
            <summary>
            Represents a protobuf backed client message.
            </summary>
            <typeparam name="BodyType">The body type of this message.</typeparam>
        </member>
        <member name="P:SteamKit2.ClientMsgProtobuf`1.Body">
            <summary>
            Gets the body structure of this message.
            </summary>
        </member>
        <member name="M:SteamKit2.ClientMsgProtobuf`1.#ctor(SteamKit2.EMsg,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.ClientMsgProtobuf`1"/> class.
            This is a client send constructor.
            </summary>
            <param name="eMsg">The network message type this client message represents.</param>
            <param name="payloadReserve">The number of bytes to initialize the payload capacity to.</param>
        </member>
        <member name="M:SteamKit2.ClientMsgProtobuf`1.#ctor(SteamKit2.EMsg,SteamKit2.MsgBase{SteamKit2.Internal.MsgHdrProtoBuf},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.ClientMsgProtobuf`1"/> class.
            This a reply constructor.
            </summary>
            <param name="eMsg">The network message type this client message represents.</param>
            <param name="msg">The message that this instance is a reply for.</param>
            <param name="payloadReserve">The number of bytes to initialize the payload capacity to.</param>
        </member>
        <member name="M:SteamKit2.ClientMsgProtobuf`1.#ctor(SteamKit2.IPacketMsg)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.ClientMsgProtobuf`1"/> class.
            This is a recieve constructor.
            </summary>
            <param name="msg">The packet message to build this client message from.</param>
        </member>
        <member name="M:SteamKit2.ClientMsgProtobuf`1.Serialize">
            <summary>
            Serializes this client message instance to a byte array.
            </summary>
            <returns>
            Data representing a client message.
            </returns>
        </member>
        <member name="M:SteamKit2.ClientMsgProtobuf`1.Deserialize(System.Byte[])">
            <summary>
            Initializes this client message by deserializing the specified data.
            </summary>
            <param name="data">The data representing a client message.</param>
        </member>
        <member name="T:SteamKit2.ClientMsg`1">
            <summary>
            Represents a struct backed client message.
            </summary>
            <typeparam name="BodyType">The body type of this message.</typeparam>
        </member>
        <member name="P:SteamKit2.ClientMsg`1.IsProto">
            <summary>
            Gets a value indicating whether this client message is protobuf backed.
            </summary>
            <value>
            	<c>true</c> if this instance is protobuf backed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.ClientMsg`1.MsgType">
            <summary>
            Gets the network message type of this client message.
            </summary>
            <value>
            The network message type.
            </value>
        </member>
        <member name="P:SteamKit2.ClientMsg`1.SessionID">
            <summary>
            Gets or sets the session id for this client message.
            </summary>
            <value>
            The session id.
            </value>
        </member>
        <member name="P:SteamKit2.ClientMsg`1.SteamID">
            <summary>
            Gets or sets the <see cref="P:SteamKit2.ClientMsg`1.SteamID"/> for this client message.
            </summary>
            <value>
            The <see cref="P:SteamKit2.ClientMsg`1.SteamID"/>.
            </value>
        </member>
        <member name="P:SteamKit2.ClientMsg`1.TargetJobID">
            <summary>
            Gets or sets the target job id for this client message.
            </summary>
            <value>
            The target job id.
            </value>
        </member>
        <member name="P:SteamKit2.ClientMsg`1.SourceJobID">
            <summary>
            Gets or sets the source job id for this client message.
            </summary>
            <value>
            The source job id.
            </value>
        </member>
        <member name="P:SteamKit2.ClientMsg`1.Body">
            <summary>
            Gets the body structure of this message.
            </summary>
        </member>
        <member name="M:SteamKit2.ClientMsg`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.ClientMsg`1"/> class.
            This is a client send constructor.
            </summary>
            <param name="payloadReserve">The number of bytes to initialize the payload capacity to.</param>
        </member>
        <member name="M:SteamKit2.ClientMsg`1.#ctor(SteamKit2.MsgBase{SteamKit2.Internal.ExtendedClientMsgHdr},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.ClientMsg`1"/> class.
            This a reply constructor.
            </summary>
            <param name="msg">The message that this instance is a reply for.</param>
            <param name="payloadReserve">The number of bytes to initialize the payload capacity to.</param>
        </member>
        <member name="M:SteamKit2.ClientMsg`1.#ctor(SteamKit2.IPacketMsg)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.ClientMsg`1"/> class.
            This is a recieve constructor.
            </summary>
            <param name="msg">The packet message to build this client message from.</param>
        </member>
        <member name="M:SteamKit2.ClientMsg`1.Serialize">
            <summary>
            Serializes this client message instance to a byte array.
            </summary>
            <returns>
            Data representing a client message.
            </returns>
        </member>
        <member name="M:SteamKit2.ClientMsg`1.Deserialize(System.Byte[])">
            <summary>
            Initializes this client message by deserializing the specified data.
            </summary>
            <param name="data">The data representing a client message.</param>
        </member>
        <member name="T:SteamKit2.Msg`1">
            <summary>
            Represents a struct backed message without session or client info.
            </summary>
            <typeparam name="BodyType">The body type of this message.</typeparam>
        </member>
        <member name="P:SteamKit2.Msg`1.IsProto">
            <summary>
            Gets a value indicating whether this client message is protobuf backed.
            </summary>
            <value>
            	<c>true</c> if this instance is protobuf backed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.Msg`1.MsgType">
            <summary>
            Gets the network message type of this client message.
            </summary>
            <value>
            The network message type.
            </value>
        </member>
        <member name="P:SteamKit2.Msg`1.SessionID">
            <summary>
            Gets or sets the session id for this client message.
            This type of client message does not support session ids
            </summary>
            <value>
            The session id.
            </value>
        </member>
        <member name="P:SteamKit2.Msg`1.SteamID">
            <summary>
            Gets or sets the <see cref="P:SteamKit2.Msg`1.SteamID"/> for this client message.
            This type of client message goes not support <see cref="P:SteamKit2.Msg`1.SteamID">SteamIDs</see>.
            </summary>
            <value>
            The <see cref="P:SteamKit2.Msg`1.SteamID"/>.
            </value>
        </member>
        <member name="P:SteamKit2.Msg`1.TargetJobID">
            <summary>
            Gets or sets the target job id for this client message.
            </summary>
            <value>
            The target job id.
            </value>
        </member>
        <member name="P:SteamKit2.Msg`1.SourceJobID">
            <summary>
            Gets or sets the source job id for this client message.
            </summary>
            <value>
            The source job id.
            </value>
        </member>
        <member name="P:SteamKit2.Msg`1.Body">
            <summary>
            Gets the structure body of the message.
            </summary>
        </member>
        <member name="M:SteamKit2.Msg`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.Msg`1"/> class.
            This is a client send constructor.
            </summary>
            <param name="payloadReserve">The number of bytes to initialize the payload capacity to.</param>
        </member>
        <member name="M:SteamKit2.Msg`1.#ctor(SteamKit2.MsgBase{SteamKit2.Internal.MsgHdr},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.Msg`1"/> class.
            This a reply constructor.
            </summary>
            <param name="msg">The message that this instance is a reply for.</param>
            <param name="payloadReserve">The number of bytes to initialize the payload capacity to.</param>
        </member>
        <member name="M:SteamKit2.Msg`1.#ctor(SteamKit2.IPacketMsg)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.Msg`1"/> class.
            This is a recieve constructor.
            </summary>
            <param name="msg">The packet message to build this client message from.</param>
        </member>
        <member name="M:SteamKit2.Msg`1.Serialize">
            <summary>
            Serializes this client message instance to a byte array.
            </summary>
            <returns>
            Data representing a client message.
            </returns>
        </member>
        <member name="M:SteamKit2.Msg`1.Deserialize(System.Byte[])">
            <summary>
            Initializes this client message by deserializing the specified data.
            </summary>
            <param name="data">The data representing a client message.</param>
        </member>
        <member name="T:SteamKit2.GC.IClientGCMsg">
            <summary>
            Represents a unified interface into client messages.
            </summary>
        </member>
        <member name="P:SteamKit2.GC.IClientGCMsg.IsProto">
            <summary>
            Gets a value indicating whether this client message is protobuf backed.
            </summary>
            <value>
              <c>true</c> if this instance is protobuf backed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.GC.IClientGCMsg.MsgType">
            <summary>
            Gets the network message type of this client message.
            </summary>
            <value>
            The message type.
            </value>
        </member>
        <member name="P:SteamKit2.GC.IClientGCMsg.TargetJobID">
            <summary>
            Gets or sets the target job id for this client message.
            </summary>
            <value>
            The target job id.
            </value>
        </member>
        <member name="P:SteamKit2.GC.IClientGCMsg.SourceJobID">
            <summary>
            Gets or sets the source job id for this client message.
            </summary>
            <value>
            The source job id.
            </value>
        </member>
        <member name="M:SteamKit2.GC.IClientGCMsg.Serialize">
            <summary>
            Serializes this client message instance to a byte array.
            </summary>
            <returns>Data representing a client message.</returns>
        </member>
        <member name="M:SteamKit2.GC.IClientGCMsg.Deserialize(System.Byte[])">
            <summary>
            Initializes this client message by deserializing the specified data.
            </summary>
            <param name="data">The data representing a client message.</param>
        </member>
        <member name="T:SteamKit2.GC.GCMsgBase`1">
            <summary>
            This is the abstract base class for all available game coordinator messages.
            It's used to maintain packet payloads and provide a header for all gc messages.
            </summary>
            <typeparam name="HdrType">The header type for this gc message.</typeparam>
        </member>
        <member name="P:SteamKit2.GC.GCMsgBase`1.IsProto">
            <summary>
            Gets a value indicating whether this gc message is protobuf backed.
            </summary>
            <value>
            	<c>true</c> if this instance is protobuf backed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.GC.GCMsgBase`1.MsgType">
            <summary>
            Gets the network message type of this gc message.
            </summary>
            <value>
            The network message type.
            </value>
        </member>
        <member name="P:SteamKit2.GC.GCMsgBase`1.TargetJobID">
            <summary>
            Gets or sets the target job id for this gc message.
            </summary>
            <value>
            The target job id.
            </value>
        </member>
        <member name="P:SteamKit2.GC.GCMsgBase`1.SourceJobID">
            <summary>
            Gets or sets the source job id for this gc message.
            </summary>
            <value>
            The source job id.
            </value>
        </member>
        <member name="P:SteamKit2.GC.GCMsgBase`1.Header">
            <summary>
            Gets the header for this message type. 
            </summary>
        </member>
        <member name="M:SteamKit2.GC.GCMsgBase`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.GC.GCMsgBase`1"/> class.
            </summary>
            <param name="payloadReserve">The number of bytes to initialize the payload capacity to.</param>
        </member>
        <member name="M:SteamKit2.GC.GCMsgBase`1.Serialize">
            <summary>
            Serializes this gc message instance to a byte array.
            </summary>
            <returns>
            Data representing a gc message.
            </returns>
        </member>
        <member name="M:SteamKit2.GC.GCMsgBase`1.Deserialize(System.Byte[])">
            <summary>
            Initializes this gc message by deserializing the specified data.
            </summary>
            <param name="data">The data representing a gc message.</param>
        </member>
        <member name="T:SteamKit2.GC.ClientGCMsgProtobuf`1">
            <summary>
            Represents a protobuf backed game coordinator message.
            </summary>
            <typeparam name="BodyType">The body type of this message.</typeparam>
        </member>
        <member name="P:SteamKit2.GC.ClientGCMsgProtobuf`1.IsProto">
            <summary>
            Gets a value indicating whether this gc message is protobuf backed.
            Client messages of this type are always protobuf backed.
            </summary>
            <value>
            	<c>true</c> if this instance is protobuf backed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.GC.ClientGCMsgProtobuf`1.MsgType">
            <summary>
            Gets the network message type of this gc message.
            </summary>
            <value>
            The network message type.
            </value>
        </member>
        <member name="P:SteamKit2.GC.ClientGCMsgProtobuf`1.TargetJobID">
            <summary>
            Gets or sets the target job id for this gc message.
            </summary>
            <value>
            The target job id.
            </value>
        </member>
        <member name="P:SteamKit2.GC.ClientGCMsgProtobuf`1.SourceJobID">
            <summary>
            Gets or sets the source job id for this gc message.
            </summary>
            <value>
            The source job id.
            </value>
        </member>
        <member name="P:SteamKit2.GC.ClientGCMsgProtobuf`1.ProtoHeader">
            <summary>
            Shorthand accessor for the protobuf header.
            </summary>
        </member>
        <member name="P:SteamKit2.GC.ClientGCMsgProtobuf`1.Body">
            <summary>
            Gets the body structure of this message.
            </summary>
        </member>
        <member name="M:SteamKit2.GC.ClientGCMsgProtobuf`1.#ctor(System.UInt32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.GC.ClientGCMsgProtobuf`1"/> class.
            This is a client send constructor.
            </summary>
            <param name="eMsg">The network message type this gc message represents.</param>
            <param name="payloadReserve">The number of bytes to initialize the payload capacity to.</param>
        </member>
        <member name="M:SteamKit2.GC.ClientGCMsgProtobuf`1.#ctor(System.UInt32,SteamKit2.GC.GCMsgBase{SteamKit2.Internal.MsgGCHdrProtoBuf},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.GC.ClientGCMsgProtobuf`1"/> class.
            This a reply constructor.
            </summary>
            <param name="eMsg">The network message type this gc message represents.</param>
            <param name="msg">The message that this instance is a reply for.</param>
            <param name="payloadReserve">The number of bytes to initialize the payload capacity to.</param>
        </member>
        <member name="M:SteamKit2.GC.ClientGCMsgProtobuf`1.#ctor(SteamKit2.GC.IPacketGCMsg)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.GC.ClientGCMsgProtobuf`1"/> class.
            This is a recieve constructor.
            </summary>
            <param name="msg">The packet message to build this gc message from.</param>
        </member>
        <member name="M:SteamKit2.GC.ClientGCMsgProtobuf`1.Serialize">
            <summary>
            Serializes this gc message instance to a byte array.
            </summary>
            <returns>
            Data representing a gc message.
            </returns>
        </member>
        <member name="M:SteamKit2.GC.ClientGCMsgProtobuf`1.Deserialize(System.Byte[])">
            <summary>
            Initializes this gc message by deserializing the specified data.
            </summary>
            <param name="data">The data representing a gc message.</param>
        </member>
        <member name="T:SteamKit2.GC.ClientGCMsg`1">
            <summary>
            Represents a struct backed game coordinator message.
            </summary>
            <typeparam name="BodyType">The body type of this message.</typeparam>
        </member>
        <member name="P:SteamKit2.GC.ClientGCMsg`1.IsProto">
            <summary>
            Gets a value indicating whether this gc message is protobuf backed.
            </summary>
            <value>
            	<c>true</c> if this instance is protobuf backed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.GC.ClientGCMsg`1.MsgType">
            <summary>
            Gets the network message type of this gc message.
            </summary>
            <value>
            The network message type.
            </value>
        </member>
        <member name="P:SteamKit2.GC.ClientGCMsg`1.TargetJobID">
            <summary>
            Gets or sets the target job id for this gc message.
            </summary>
            <value>
            The target job id.
            </value>
        </member>
        <member name="P:SteamKit2.GC.ClientGCMsg`1.SourceJobID">
            <summary>
            Gets or sets the source job id for this gc message.
            </summary>
            <value>
            The source job id.
            </value>
        </member>
        <member name="P:SteamKit2.GC.ClientGCMsg`1.Body">
            <summary>
            Gets the body structure of this message.
            </summary>
        </member>
        <member name="M:SteamKit2.GC.ClientGCMsg`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.GC.ClientGCMsg`1"/> class.
            This is a client send constructor.
            </summary>
            <param name="payloadReserve">The number of bytes to initialize the payload capacity to.</param>
        </member>
        <member name="M:SteamKit2.GC.ClientGCMsg`1.#ctor(SteamKit2.GC.GCMsgBase{SteamKit2.Internal.MsgGCHdr},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.GC.ClientGCMsg`1"/> class.
            This a reply constructor.
            </summary>
            <param name="msg">The message that this instance is a reply for.</param>
            <param name="payloadReserve">The number of bytes to initialize the payload capacity to.</param>
        </member>
        <member name="M:SteamKit2.GC.ClientGCMsg`1.#ctor(SteamKit2.GC.IPacketGCMsg)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.GC.ClientGCMsg`1"/> class.
            This is a recieve constructor.
            </summary>
            <param name="msg">The packet message to build this gc message from.</param>
        </member>
        <member name="M:SteamKit2.GC.ClientGCMsg`1.Serialize">
            <summary>
            Serializes this gc message instance to a byte array.
            </summary>
            <returns>
            Data representing a client message.
            </returns>
        </member>
        <member name="M:SteamKit2.GC.ClientGCMsg`1.Deserialize(System.Byte[])">
            <summary>
            Initializes this gc message by deserializing the specified data.
            </summary>
            <param name="data">The data representing a client message.</param>
        </member>
        <member name="T:SteamKit2.GC.IPacketGCMsg">
            <summary>
            Represents a simple unified interface into game coordinator messages recieved from the network.
            This is contrasted with <see cref="T:SteamKit2.GC.IClientGCMsg"/> in that this interface is packet body agnostic
            and only allows simple access into the header. This interface is also immutable, and the underlying
            data cannot be modified.
            </summary>
        </member>
        <member name="P:SteamKit2.GC.IPacketGCMsg.IsProto">
            <summary>
            Gets a value indicating whether this packet message is protobuf backed.
            </summary>
            <value>
              <c>true</c> if this instance is protobuf backed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.GC.IPacketGCMsg.MsgType">
            <summary>
            Gets the network message type of this packet message.
            </summary>
            <value>
            The message type.
            </value>
        </member>
        <member name="P:SteamKit2.GC.IPacketGCMsg.TargetJobID">
            <summary>
            Gets the target job id for this packet message.
            </summary>
            <value>
            The target job id.
            </value>
        </member>
        <member name="P:SteamKit2.GC.IPacketGCMsg.SourceJobID">
            <summary>
            Gets the source job id for this packet message.
            </summary>
            <value>
            The source job id.
            </value>
        </member>
        <member name="M:SteamKit2.GC.IPacketGCMsg.GetData">
            <summary>
            Gets the underlying data that represents this client message.
            </summary>
            <returns>The data.</returns>
        </member>
        <member name="T:SteamKit2.GC.PacketClientGCMsgProtobuf">
            <summary>
            Represents a protobuf backed packet message.
            </summary>
        </member>
        <member name="P:SteamKit2.GC.PacketClientGCMsgProtobuf.IsProto">
            <summary>
            Gets a value indicating whether this packet message is protobuf backed.
            This type of message is always protobuf backed.
            </summary>
            <value>
            	<c>true</c> if this instance is protobuf backed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.GC.PacketClientGCMsgProtobuf.MsgType">
            <summary>
            Gets the network message type of this packet message.
            </summary>
            <value>
            The message type.
            </value>
        </member>
        <member name="P:SteamKit2.GC.PacketClientGCMsgProtobuf.TargetJobID">
            <summary>
            Gets the target job id for this packet message.
            </summary>
            <value>
            The target job id.
            </value>
        </member>
        <member name="P:SteamKit2.GC.PacketClientGCMsgProtobuf.SourceJobID">
            <summary>
            Gets the source job id for this packet message.
            </summary>
            <value>
            The source job id.
            </value>
        </member>
        <member name="M:SteamKit2.GC.PacketClientGCMsgProtobuf.#ctor(System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.GC.PacketClientGCMsgProtobuf"/> class.
            </summary>
            <param name="eMsg">The network message type for this packet message.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:SteamKit2.GC.PacketClientGCMsgProtobuf.GetData">
            <summary>
            Gets the underlying data that represents this client message.
            </summary>
            <returns>The data.</returns>
        </member>
        <member name="T:SteamKit2.GC.PacketClientGCMsg">
            <summary>
            Represents a packet message with extended header information.
            </summary>
        </member>
        <member name="P:SteamKit2.GC.PacketClientGCMsg.IsProto">
            <summary>
            Gets a value indicating whether this packet message is protobuf backed.
            This type of message is never protobuf backed.
            </summary>
            <value>
            	<c>true</c> if this instance is protobuf backed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.GC.PacketClientGCMsg.MsgType">
            <summary>
            Gets the network message type of this packet message.
            </summary>
            <value>
            The message type.
            </value>
        </member>
        <member name="P:SteamKit2.GC.PacketClientGCMsg.TargetJobID">
            <summary>
            Gets the target job id for this packet message.
            </summary>
            <value>
            The target job id.
            </value>
        </member>
        <member name="P:SteamKit2.GC.PacketClientGCMsg.SourceJobID">
            <summary>
            Gets the source job id for this packet message.
            </summary>
            <value>
            The source job id.
            </value>
        </member>
        <member name="M:SteamKit2.GC.PacketClientGCMsg.#ctor(System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.GC.PacketClientGCMsg"/> class.
            </summary>
            <param name="eMsg">The network message type for this packet message.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:SteamKit2.GC.PacketClientGCMsg.GetData">
            <summary>
            Gets the underlying data that represents this packet message.
            </summary>
            <returns>The data.</returns>
        </member>
        <member name="T:SteamKit2.Internal.CallbackBase">
            <summary>
            This is the base class for the utility <see cref="T:SteamKit2.Callback`1" /> class.
            This is for internal use only, and shouldn't be used directly.
            </summary>
        </member>
        <member name="T:SteamKit2.Internal.CMClient">
            <summary>
            This base client handles the underlying connection to a CM server. This class should not be use directly, but through the <see cref="T:SteamKit2.SteamClient"/> class.
            </summary>
        </member>
        <member name="P:SteamKit2.Internal.CMClient.Servers">
            <summary>
            Bootstrap list of CM servers.
            </summary>
        </member>
        <member name="P:SteamKit2.Internal.CMClient.LocalIP">
            <summary>
            Returns the the local IP of this client.
            </summary>
            <returns>The local IP.</returns>
        </member>
        <member name="P:SteamKit2.Internal.CMClient.ConnectedUniverse">
            <summary>
            Gets the connected universe of this client.
            This value will be <see cref="F:SteamKit2.EUniverse.Invalid"/> if the client is not connected to Steam.
            </summary>
            <value>The universe.</value>
        </member>
        <member name="P:SteamKit2.Internal.CMClient.IsConnected">
            <summary>
            Gets a value indicating whether this instance is connected to the remote CM server.
            </summary>
            <value>
            	<c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.Internal.CMClient.SessionToken">
            <summary>
            Gets the session token assigned to this client from the AM.
            </summary>
        </member>
        <member name="P:SteamKit2.Internal.CMClient.CellID">
            <summary>
            Gets the Steam recommended Cell ID of this client. This value is assigned after a logon attempt has succeeded.
            This value will be <c>null</c> if the client is logged off of Steam.
            </summary>
        </member>
        <member name="P:SteamKit2.Internal.CMClient.SessionID">
            <summary>
            Gets the session ID of this client. This value is assigned after a logon attempt has succeeded.
            This value will be <c>null</c> if the client is logged off of Steam.
            </summary>
            <value>The session ID.</value>
        </member>
        <member name="P:SteamKit2.Internal.CMClient.SteamID">
            <summary>
            Gets the SteamID of this client. This value is assigned after a logon attempt has succeeded.
            This value will be <c>null</c> if the client is logged off of Steam.
            </summary>
            <value>The SteamID.</value>
        </member>
        <member name="P:SteamKit2.Internal.CMClient.ConnectionTimeout">
            <summary>
            Gets or sets the connection timeout used when connecting to the Steam server.
            The default value is 5 seconds.
            </summary>
            <value>
            The connection timeout.
            </value>
        </member>
        <member name="P:SteamKit2.Internal.CMClient.DebugNetworkListener">
            <summary>
            Gets or sets the network listening interface. Use this for debugging only.
            For your convenience, you can use <see cref="T:SteamKit2.NetHookNetworkListener"/> class.
            </summary>
        </member>
        <member name="M:SteamKit2.Internal.CMClient.#ctor(System.Net.Sockets.ProtocolType)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.Internal.CMClient"/> class with a specific connection type.
            </summary>
            <param name="type">The connection type to use.</param>
            <exception cref="T:System.NotSupportedException">
            The provided <see cref="T:System.Net.Sockets.ProtocolType"/> is not supported.
            Only Tcp and Udp are available.
            </exception>
        </member>
        <member name="M:SteamKit2.Internal.CMClient.Connect(System.Net.IPEndPoint)">
            <summary>
            Connects this client to a Steam3 server.
            This begins the process of connecting and encrypting the data channel between the client and the server.
            Results are returned asynchronously in a <see cref="T:SteamKit2.SteamClient.ConnectedCallback"/>.
            If the server that SteamKit attempts to connect to is down, a <see cref="T:SteamKit2.SteamClient.DisconnectedCallback"/>
            will be posted instead.
            SteamKit will not attempt to reconnect to Steam, you must handle this callback and call Connect again
            preferrably after a short delay.
            </summary>
            <param name="cmServer">
            The <see cref="T:System.Net.IPEndPoint"/> of the CM server to connect to.
            If <c>null</c>, SteamKit will randomly select a CM server from its internal list.
            </param>
        </member>
        <member name="M:SteamKit2.Internal.CMClient.Disconnect">
            <summary>
            Disconnects this client.
            </summary>
        </member>
        <member name="M:SteamKit2.Internal.CMClient.Send(SteamKit2.IClientMsg)">
            <summary>
            Sends the specified client message to the server.
            This method automatically assigns the correct SessionID and SteamID of the message.
            </summary>
            <param name="msg">The client message to send.</param>
        </member>
        <member name="M:SteamKit2.Internal.CMClient.GetServersOfType(SteamKit2.EServerType)">
            <summary>
            Returns the list of servers matching the given type
            </summary>
            <param name="type">Server type requested</param>
            <returns>List of server endpoints</returns>
        </member>
        <member name="M:SteamKit2.Internal.CMClient.OnClientMsgReceived(SteamKit2.IPacketMsg)">
            <summary>
            Called when a client message is received from the network.
            </summary>
            <param name="packetMsg">The packet message.</param>
        </member>
        <member name="M:SteamKit2.Internal.CMClient.OnClientDisconnected(System.Boolean)">
            <summary>
            Called when the client is physically disconnected from Steam3.
            </summary>
        </member>
        <member name="T:SteamKit2.IClientMsg">
            <summary>
            Represents a unified interface into client messages.
            </summary>
        </member>
        <member name="P:SteamKit2.IClientMsg.IsProto">
            <summary>
            Gets a value indicating whether this client message is protobuf backed.
            </summary>
            <value>
              <c>true</c> if this instance is protobuf backed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.IClientMsg.MsgType">
            <summary>
            Gets the network message type of this client message.
            </summary>
            <value>
            The message type.
            </value>
        </member>
        <member name="P:SteamKit2.IClientMsg.SessionID">
            <summary>
            Gets or sets the session id for this client message.
            </summary>
            <value>
            The session id.
            </value>
        </member>
        <member name="P:SteamKit2.IClientMsg.SteamID">
            <summary>
            Gets or sets the <see cref="P:SteamKit2.IClientMsg.SteamID"/> for this client message.
            </summary>
            <value>
            The <see cref="P:SteamKit2.IClientMsg.SteamID"/>.
            </value>
        </member>
        <member name="P:SteamKit2.IClientMsg.TargetJobID">
            <summary>
            Gets or sets the target job id for this client message.
            </summary>
            <value>
            The target job id.
            </value>
        </member>
        <member name="P:SteamKit2.IClientMsg.SourceJobID">
            <summary>
            Gets or sets the source job id for this client message.
            </summary>
            <value>
            The source job id.
            </value>
        </member>
        <member name="M:SteamKit2.IClientMsg.Serialize">
            <summary>
            Serializes this client message instance to a byte array.
            </summary>
            <returns>Data representing a client message.</returns>
        </member>
        <member name="M:SteamKit2.IClientMsg.Deserialize(System.Byte[])">
            <summary>
            Initializes this client message by deserializing the specified data.
            </summary>
            <param name="data">The data representing a client message.</param>
        </member>
        <member name="T:SteamKit2.MsgBase">
            <summary>
            This class provides a payload backing to client messages.
            </summary>
        </member>
        <member name="P:SteamKit2.MsgBase.Payload">
            <summary>
            Returns a <see cref="T:System.IO.MemoryStream"/> which is the backing stream for client message payload data.
            </summary>
        </member>
        <member name="M:SteamKit2.MsgBase.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.MsgBase"/> class.
            </summary>
            <param name="payloadReserve">The number of bytes to initialize the payload capacity to.</param>
        </member>
        <member name="M:SteamKit2.MsgBase.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks within the payload to the specified offset.
            </summary>
            <param name="offset">The offset in the payload to seek to.</param>
            <param name="loc">The origin to seek from.</param>
            <returns>The new position within the stream, calculated by combining the initial reference point and the offset.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.Write(System.Byte)">
            <summary>
            Writes a single unsigned byte to the message payload.
            </summary>
            <param name="data">The unsigned byte.</param>
        </member>
        <member name="M:SteamKit2.MsgBase.Write(System.SByte)">
            <summary>
            Writes a single signed byte to the message payload.
            </summary>
            <param name="data">The signed byte.</param>
        </member>
        <member name="M:SteamKit2.MsgBase.Write(System.Byte[])">
            <summary>
            Writes the specified byte array to the message payload.
            </summary>
            <param name="data">The byte array.</param>
        </member>
        <member name="M:SteamKit2.MsgBase.Write(System.Int16)">
            <summary>
            Writes a single 16bit short to the message payload.
            </summary>
            <param name="data">The short.</param>
        </member>
        <member name="M:SteamKit2.MsgBase.Write(System.UInt16)">
            <summary>
            Writes a single unsigned 16bit short to the message payload.
            </summary>
            <param name="data">The unsigned short.</param>
        </member>
        <member name="M:SteamKit2.MsgBase.Write(System.Int32)">
            <summary>
            Writes a single 32bit integer to the message payload.
            </summary>
            <param name="data">The integer.</param>
        </member>
        <member name="M:SteamKit2.MsgBase.Write(System.UInt32)">
            <summary>
            Writes a single unsigned 32bit integer to the message payload.
            </summary>
            <param name="data">The unsigned integer.</param>
        </member>
        <member name="M:SteamKit2.MsgBase.Write(System.Int64)">
            <summary>
            Writes a single 64bit long to the message payload.
            </summary>
            <param name="data">The long.</param>
        </member>
        <member name="M:SteamKit2.MsgBase.Write(System.UInt64)">
            <summary>
            Writes a single unsigned 64bit long to the message payload.
            </summary>
            <param name="data">The unsigned long.</param>
        </member>
        <member name="M:SteamKit2.MsgBase.Write(System.Single)">
            <summary>
            Writes a single 32bit float to the message payload.
            </summary>
            <param name="data">The float.</param>
        </member>
        <member name="M:SteamKit2.MsgBase.Write(System.Double)">
            <summary>
            Writes a single 64bit double to the message payload.
            </summary>
            <param name="data">The double.</param>
        </member>
        <member name="M:SteamKit2.MsgBase.Write(System.String)">
            <summary>
            Writes the specified string to the message payload using default encoding.
            This function does not write a terminating null character.
            </summary>
            <param name="data">The string to write.</param>
        </member>
        <member name="M:SteamKit2.MsgBase.Write(System.String,System.Text.Encoding)">
            <summary>
            Writes the specified string to the message payload using the specified encoding.
            This function does not write a terminating null character.
            </summary>
            <param name="data">The string to write.</param>
            <param name="encoding">The encoding to use.</param>
        </member>
        <member name="M:SteamKit2.MsgBase.WriteNullTermString(System.String)">
            <summary>
            Writes the secified string and a null terminator to the message payload using default encoding.
            </summary>
            <param name="data">The string to write.</param>
        </member>
        <member name="M:SteamKit2.MsgBase.WriteNullTermString(System.String,System.Text.Encoding)">
            <summary>
            Writes the specified string and a null terminator to the message payload using the specified encoding.
            </summary>
            <param name="data">The string to write.</param>
            <param name="encoding">The encoding to use.</param>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadInt8">
            <summary>
            Reads a single signed byte from the message payload.
            </summary>
            <returns>The signed byte.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadSByte">
            <summary>
            Reads a single signed byte from the message payload.
            </summary>
            <returns>The signed byte.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadUInt8">
            <summary>
            Reads a single unsigned byte from the message payload.
            </summary>
            <returns>The unsigned byte.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadByte">
            <summary>
            Reads a single unsigned byte from the message payload.
            </summary>
            <returns>The unsigned byte.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadBytes(System.Int32)">
            <summary>
            Reads a number of bytes from the message payload.
            </summary>
            <param name="numBytes">The number of bytes to read.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadInt16">
            <summary>
            Reads a single 16bit short from the message payload.
            </summary>
            <returns>The short.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadShort">
            <summary>
            Reads a single 16bit short from the message payload.
            </summary>
            <returns>The short.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadUInt16">
            <summary>
            Reads a single unsigned 16bit short from the message payload.
            </summary>
            <returns>The unsigned short.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadUShort">
            <summary>
            Reads a single unsigned 16bit short from the message payload.
            </summary>
            <returns>The unsigned short.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadInt32">
            <summary>
            Reads a single 32bit integer from the message payload.
            </summary>
            <returns>The integer.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadInt">
            <summary>
            Reads a single 32bit integer from the message payload.
            </summary>
            <returns>The integer.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadUInt32">
            <summary>
            Reads a single unsigned 32bit integer from the message payload.
            </summary>
            <returns>The unsigned integer.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadUInt">
            <summary>
            Reads a single unsigned 32bit integer from the message payload.
            </summary>
            <returns>The unsigned integer.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadInt64">
            <summary>
            Reads a single 64bit long from the message payload.
            </summary>
            <returns>The long.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadLong">
            <summary>
            Reads a single 64bit long from the message payload.
            </summary>
            <returns>The long.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadUInt64">
            <summary>
            Reads a single unsigned 64bit long from the message payload.
            </summary>
            <returns>The unsigned long.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadULong">
            <summary>
            Reads a single unsigned 64bit long from the message payload.
            </summary>
            <returns>The unsigned long.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadSingle">
            <summary>
            Reads a single 32bit float from the message payload.
            </summary>
            <returns>The float.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadFloat">
            <summary>
            Reads a single 32bit float from the message payload.
            </summary>
            <returns>The float.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadDouble">
            <summary>
            Reads a single 64bit double from the message payload.
            </summary>
            <returns>The double.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadNullTermString">
            <summary>
            Reads a null terminated string from the message payload with the default encoding.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadNullTermString(System.Text.Encoding)">
            <summary>
            Reads a null terminated string from the message payload with the specified encoding.
            </summary>
            <param name="encoding">The encoding to use.</param>
            /// <returns>The string.</returns>
        </member>
        <member name="T:SteamKit2.MsgBase`1">
            <summary>
            This is the abstract base class for all available client messages.
            It's used to maintain packet payloads and provide a header for all client messages.
            </summary>
            <typeparam name="HdrType">The header type for this client message.</typeparam>
        </member>
        <member name="P:SteamKit2.MsgBase`1.IsProto">
            <summary>
            Gets a value indicating whether this client message is protobuf backed.
            </summary>
            <value>
            	<c>true</c> if this instance is protobuf backed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.MsgBase`1.MsgType">
            <summary>
            Gets the network message type of this client message.
            </summary>
            <value>
            The network message type.
            </value>
        </member>
        <member name="P:SteamKit2.MsgBase`1.SessionID">
            <summary>
            Gets or sets the session id for this client message.
            </summary>
            <value>
            The session id.
            </value>
        </member>
        <member name="P:SteamKit2.MsgBase`1.SteamID">
            <summary>
            Gets or sets the <see cref="P:SteamKit2.MsgBase`1.SteamID"/> for this client message.
            </summary>
            <value>
            The <see cref="P:SteamKit2.MsgBase`1.SteamID"/>.
            </value>
        </member>
        <member name="P:SteamKit2.MsgBase`1.TargetJobID">
            <summary>
            Gets or sets the target job id for this client message.
            </summary>
            <value>
            The target job id.
            </value>
        </member>
        <member name="P:SteamKit2.MsgBase`1.SourceJobID">
            <summary>
            Gets or sets the source job id for this client message.
            </summary>
            <value>
            The source job id.
            </value>
        </member>
        <member name="P:SteamKit2.MsgBase`1.Header">
            <summary>
            Gets the header for this message type. 
            </summary>
        </member>
        <member name="M:SteamKit2.MsgBase`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.MsgBase`1"/> class.
            </summary>
            <param name="payloadReserve">The number of bytes to initialize the payload capacity to.</param>
        </member>
        <member name="M:SteamKit2.MsgBase`1.Serialize">
            <summary>
            Serializes this client message instance to a byte array.
            </summary>
            <returns>
            Data representing a client message.
            </returns>
        </member>
        <member name="M:SteamKit2.MsgBase`1.Deserialize(System.Byte[])">
            <summary>
            Initializes this client message by deserializing the specified data.
            </summary>
            <param name="data">The data representing a client message.</param>
        </member>
        <member name="T:SteamKit2.IPacketMsg">
            <summary>
            Represents a simple unified interface into client messages recieved from the network.
            This is contrasted with <see cref="T:SteamKit2.IClientMsg"/> in that this interface is packet body agnostic
            and only allows simple access into the header. This interface is also immutable, and the underlying
            data cannot be modified.
            </summary>
        </member>
        <member name="P:SteamKit2.IPacketMsg.IsProto">
            <summary>
            Gets a value indicating whether this packet message is protobuf backed.
            </summary>
            <value>
              <c>true</c> if this instance is protobuf backed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.IPacketMsg.MsgType">
            <summary>
            Gets the network message type of this packet message.
            </summary>
            <value>
            The message type.
            </value>
        </member>
        <member name="P:SteamKit2.IPacketMsg.TargetJobID">
            <summary>
            Gets the target job id for this packet message.
            </summary>
            <value>
            The target job id.
            </value>
        </member>
        <member name="P:SteamKit2.IPacketMsg.SourceJobID">
            <summary>
            Gets the source job id for this packet message.
            </summary>
            <value>
            The source job id.
            </value>
        </member>
        <member name="M:SteamKit2.IPacketMsg.GetData">
            <summary>
            Gets the underlying data that represents this client message.
            </summary>
            <returns>The data.</returns>
        </member>
        <member name="T:SteamKit2.PacketClientMsgProtobuf">
            <summary>
            Represents a protobuf backed packet message.
            </summary>
        </member>
        <member name="P:SteamKit2.PacketClientMsgProtobuf.IsProto">
            <summary>
            Gets a value indicating whether this packet message is protobuf backed.
            This type of message is always protobuf backed.
            </summary>
            <value>
            	<c>true</c> if this instance is protobuf backed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.PacketClientMsgProtobuf.MsgType">
            <summary>
            Gets the network message type of this packet message.
            </summary>
            <value>
            The message type.
            </value>
        </member>
        <member name="P:SteamKit2.PacketClientMsgProtobuf.TargetJobID">
            <summary>
            Gets the target job id for this packet message.
            </summary>
            <value>
            The target job id.
            </value>
        </member>
        <member name="P:SteamKit2.PacketClientMsgProtobuf.SourceJobID">
            <summary>
            Gets the source job id for this packet message.
            </summary>
            <value>
            The source job id.
            </value>
        </member>
        <member name="M:SteamKit2.PacketClientMsgProtobuf.#ctor(SteamKit2.EMsg,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.PacketClientMsgProtobuf"/> class.
            </summary>
            <param name="eMsg">The network message type for this packet message.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:SteamKit2.PacketClientMsgProtobuf.GetData">
            <summary>
            Gets the underlying data that represents this client message.
            </summary>
            <returns>The data.</returns>
        </member>
        <member name="T:SteamKit2.PacketClientMsg">
            <summary>
            Represents a packet message with extended header information.
            </summary>
        </member>
        <member name="P:SteamKit2.PacketClientMsg.IsProto">
            <summary>
            Gets a value indicating whether this packet message is protobuf backed.
            This type of message is never protobuf backed.
            </summary>
            <value>
            	<c>true</c> if this instance is protobuf backed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.PacketClientMsg.MsgType">
            <summary>
            Gets the network message type of this packet message.
            </summary>
            <value>
            The message type.
            </value>
        </member>
        <member name="P:SteamKit2.PacketClientMsg.TargetJobID">
            <summary>
            Gets the target job id for this packet message.
            </summary>
            <value>
            The target job id.
            </value>
        </member>
        <member name="P:SteamKit2.PacketClientMsg.SourceJobID">
            <summary>
            Gets the source job id for this packet message.
            </summary>
            <value>
            The source job id.
            </value>
        </member>
        <member name="M:SteamKit2.PacketClientMsg.#ctor(SteamKit2.EMsg,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.PacketClientMsg"/> class.
            </summary>
            <param name="eMsg">The network message type for this packet message.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:SteamKit2.PacketClientMsg.GetData">
            <summary>
            Gets the underlying data that represents this client message.
            </summary>
            <returns>The data.</returns>
        </member>
        <member name="T:SteamKit2.PacketMsg">
            <summary>
            Represents a packet message with basic header information.
            </summary>
        </member>
        <member name="P:SteamKit2.PacketMsg.IsProto">
            <summary>
            Gets a value indicating whether this packet message is protobuf backed.
            This type of message is never protobuf backed.
            </summary>
            <value>
            	<c>true</c> if this instance is protobuf backed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.PacketMsg.MsgType">
            <summary>
            Gets the network message type of this packet message.
            </summary>
            <value>
            The message type.
            </value>
        </member>
        <member name="P:SteamKit2.PacketMsg.TargetJobID">
            <summary>
            Gets the target job id for this packet message.
            </summary>
            <value>
            The target job id.
            </value>
        </member>
        <member name="P:SteamKit2.PacketMsg.SourceJobID">
            <summary>
            Gets the source job id for this packet message.
            </summary>
            <value>
            The source job id.
            </value>
        </member>
        <member name="M:SteamKit2.PacketMsg.#ctor(SteamKit2.EMsg,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.PacketMsg"/> class.
            </summary>
            <param name="eMsg">The network message type for this packet message.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:SteamKit2.PacketMsg.GetData">
            <summary>
            Gets the underlying data that represents this client message.
            </summary>
            <returns>The data.</returns>
        </member>
        <member name="T:SteamKit2.Discovery.FileStorageServerListProvider">
            <summary>
            A server list provider that uses a file to persist the server list using protobuf
            </summary>
        </member>
        <member name="M:SteamKit2.Discovery.FileStorageServerListProvider.#ctor(System.String)">
            <summary>
            Initialize a new instance of FileStorageServerListProvider
            </summary>
        </member>
        <member name="M:SteamKit2.Discovery.FileStorageServerListProvider.FetchServerListAsync">
            <summary>
            Read the stored list of servers from the file
            </summary>
            <returns>List of servers if persisted, otherwise an empty list</returns>
        </member>
        <member name="M:SteamKit2.Discovery.FileStorageServerListProvider.UpdateServerListAsync(System.Collections.Generic.IEnumerable{System.Net.IPEndPoint})">
            <summary>
            Writes the supplied list of servers to persistent storage
            </summary>
            <param name="endpoints">List of server endpoints</param>
            <returns>Awaitable task for write completion</returns>
        </member>
        <member name="T:SteamKit2.Discovery.NullServerListProvider">
            <summary>
            A server list provider that returns an empty list, for consumers that populate the server list themselves
            </summary>
        </member>
        <member name="M:SteamKit2.Discovery.NullServerListProvider.FetchServerListAsync">
            <summary>
            No-op implementation that returns an empty server list
            </summary>
            <returns>Empty server list</returns>
        </member>
        <member name="M:SteamKit2.Discovery.NullServerListProvider.UpdateServerListAsync(System.Collections.Generic.IEnumerable{System.Net.IPEndPoint})">
            <summary>
            No-op implementation that does not persist server list
            </summary>
            <param name="endpoints">Server list</param>
            <returns>Completed task</returns>
        </member>
        <member name="T:SteamKit2.Discovery.ServerQuality">
            <summary>
            Currently marked quality of a server. All servers start off as Undetermined.
            </summary>
        </member>
        <member name="F:SteamKit2.Discovery.ServerQuality.Good">
            <summary>
            Known good server.
            </summary>
        </member>
        <member name="F:SteamKit2.Discovery.ServerQuality.Bad">
            <summary>
            Known bad server.
            </summary>
        </member>
        <member name="T:SteamKit2.Discovery.SmartCMServerList">
            <summary>
            Smart list of CM servers.
            </summary>
        </member>
        <member name="M:SteamKit2.Discovery.SmartCMServerList.#ctor(SteamKit2.Discovery.IServerListProvider,System.Boolean)">
            <summary>
            Initialize SmartCMServerList with a given server list provider
            </summary>
            <param name="provider">The ServerListProvider to persist servers</param>
            <param name="allowDirectoryFetch">Specifies if we can query SteamDirectory to discover more servers</param>
        </member>
        <member name="M:SteamKit2.Discovery.SmartCMServerList.#ctor">
            <summary>
            Initialize SmartCMServerList with the default <see cref="T:SteamKit2.Discovery.NullServerListProvider"/> server list provider
            </summary>
        </member>
        <member name="P:SteamKit2.Discovery.SmartCMServerList.ServerListProvider">
            <summary>
            The server list provider chosen to provide a persistent list of servers to connect to
            </summary>
        </member>
        <member name="P:SteamKit2.Discovery.SmartCMServerList.CellID">
            <summary>
            The preferred cell id for retrieving the list of servers from the Steam directory
            </summary>
        </member>
        <member name="P:SteamKit2.Discovery.SmartCMServerList.BadConnectionMemoryTimeSpan">
            <summary>
            Determines how long a server's bad connection state is remembered for.
            </summary>
        </member>
        <member name="M:SteamKit2.Discovery.SmartCMServerList.ResetOldScores">
            <summary>
            Resets the scores of all servers which has a last bad connection more than <see cref="P:SteamKit2.Discovery.SmartCMServerList.BadConnectionMemoryTimeSpan"/> ago.
            </summary>
        </member>
        <member name="M:SteamKit2.Discovery.SmartCMServerList.ReplaceList(System.Collections.Generic.IEnumerable{System.Net.IPEndPoint})">
            <summary>
            Replace the list with a new list of servers provided to us by the Steam servers.
            </summary>
            <param name="endpointList">The <see cref="T:System.Net.IPEndPoint"/>s to use for this <see cref="T:SteamKit2.Discovery.SmartCMServerList"/>.</param>
        </member>
        <member name="M:SteamKit2.Discovery.SmartCMServerList.ResetBadServers">
            <summary>
            Explicitly resets the known state of all servers.
            </summary>
        </member>
        <member name="M:SteamKit2.Discovery.SmartCMServerList.GetNextServerCandidateInternal">
            <summary>
            Perform the actual score lookup of the server list and return the candidate
            </summary>
            <returns>IPEndPoint candidate</returns>
        </member>
        <member name="M:SteamKit2.Discovery.SmartCMServerList.GetNextServerCandidate">
            <summary>
            Get the next server in the list.
            </summary>
            <returns>An <see cref="T:System.Net.IPEndPoint"/>, or null if the list is empty.</returns>
        </member>
        <member name="M:SteamKit2.Discovery.SmartCMServerList.GetNextServerCandidateAsync">
            <summary>
            Get the next server in the list.
            </summary>
            <returns>An <see cref="T:System.Net.IPEndPoint"/>, or null if the list is empty.</returns>
        </member>
        <member name="M:SteamKit2.Discovery.SmartCMServerList.GetAllEndPoints">
            <summary>
            Gets the <see cref="T:System.Net.IPEndPoint"/>s of all servers in the server list.
            </summary>
            <returns>An <see cref="T:System.Net.IPEndPoint[]"/> array contains the <see cref="T:System.Net.IPEndPoint"/>s of the servers in the list</returns>
        </member>
        <member name="T:SteamKit2.Discovery.IsolatedStorageServerListProvider">
            <summary>
            A server list provider that uses IsolatedStorage to persist the server list
            </summary>
        </member>
        <member name="M:SteamKit2.Discovery.IsolatedStorageServerListProvider.#ctor">
            <summary>
            Initialize a new instance of IsolatedStorageServerListProvider using <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForAssembly"/>
            </summary>
        </member>
        <member name="M:SteamKit2.Discovery.IsolatedStorageServerListProvider.FetchServerListAsync">
            <summary>
            Read the stored list of servers from IsolatedStore
            </summary>
            <returns>List of servers if persisted, otherwise an empty list</returns>
        </member>
        <member name="M:SteamKit2.Discovery.IsolatedStorageServerListProvider.UpdateServerListAsync(System.Collections.Generic.IEnumerable{System.Net.IPEndPoint})">
            <summary>
            Writes the supplied list of servers to persistent storage
            </summary>
            <param name="endpoints">List of server endpoints</param>
            <returns>Awaitable task for write completion</returns>
        </member>
        <member name="T:SteamKit2.Discovery.IServerListProvider">
            <summary>
            An interface for persisting the server list for connection discovery
            </summary>
        </member>
        <member name="M:SteamKit2.Discovery.IServerListProvider.FetchServerListAsync">
            <summary>
            Ask a provider to fetch any servers that it has available
            </summary>
            <returns>A list of IPEndPoints representing servers</returns>
        </member>
        <member name="M:SteamKit2.Discovery.IServerListProvider.UpdateServerListAsync(System.Collections.Generic.IEnumerable{System.Net.IPEndPoint})">
            <summary>
            Update the persistent list of endpoints
            </summary>
            <param name="endpoints">List of endpoints</param>
        </member>
        <member name="T:SteamKit2.CDNClient">
            <summary>
            The CDNClient class is used for downloading game content from the Steam servers.
            </summary>
        </member>
        <member name="T:SteamKit2.CDNClient.Server">
            <summary>
            Represents a single Steam3 'Steampipe' content server.
            </summary>
        </member>
        <member name="P:SteamKit2.CDNClient.Server.Host">
            <summary>
            Gets the hostname of the server.
            </summary>
        </member>
        <member name="P:SteamKit2.CDNClient.Server.Port">
            <summary>
            Gets the port of the server.
            </summary>
        </member>
        <member name="P:SteamKit2.CDNClient.Server.Type">
            <summary>
            Gets the type of the server.
            </summary>
        </member>
        <member name="P:SteamKit2.CDNClient.Server.CellID">
            <summary>
            Gets the CellID this server belongs to.
            </summary>
        </member>
        <member name="P:SteamKit2.CDNClient.Server.Load">
            <summary>
            Gets the load value associated with this server.
            </summary>
        </member>
        <member name="P:SteamKit2.CDNClient.Server.WeightedLoad">
            <summary>
            Gets the weighted load.
            </summary>
        </member>
        <member name="P:SteamKit2.CDNClient.Server.NumEntries">
            <summary>
            Gets the number of entries this server is worth.
            </summary>
        </member>
        <member name="M:SteamKit2.CDNClient.Server.op_Implicit(System.Net.IPEndPoint)~SteamKit2.CDNClient.Server">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Net.IPEndPoint"/> to <see cref="T:SteamKit2.CDNClient.Server"/>.
            </summary>
            <param name="endPoint">A IPEndPoint to convert into a <see cref="T:SteamKit2.CDNClient.Server"/>.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SteamKit2.CDNClient.Server.op_Implicit(System.Net.DnsEndPoint)~SteamKit2.CDNClient.Server">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Net.DnsEndPoint"/> to <see cref="T:SteamKit2.CDNClient.Server"/>.
            </summary>
            <param name="endPoint">A DnsEndPoint to convert into a <see cref="T:SteamKit2.CDNClient.Server"/>.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SteamKit2.CDNClient.Server.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this server.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this server.
            </returns>
        </member>
        <member name="T:SteamKit2.CDNClient.DepotChunk">
            <summary>
            Represents a single downloaded chunk from a file in a depot.
            </summary>
        </member>
        <member name="P:SteamKit2.CDNClient.DepotChunk.ChunkInfo">
            <summary>
            Gets the depot manifest chunk information associated with this chunk.
            </summary>
        </member>
        <member name="P:SteamKit2.CDNClient.DepotChunk.IsProcessed">
            <summary>
            Gets a value indicating whether this chunk has been processed. A chunk is processed when the data has been decrypted and decompressed.
            </summary>
            <value>
              <c>true</c> if this chunk has been processed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.CDNClient.DepotChunk.Data">
            <summary>
            Gets the underlying data for this chunk.
            </summary>
        </member>
        <member name="M:SteamKit2.CDNClient.DepotChunk.Process(System.Byte[])">
            <summary>
            Processes the specified depot key by decrypting the data with the given depot encryption key, and then by decompressing the data.
            If the chunk has already been processed, this function does nothing.
            </summary>
            <param name="depotKey">The depot decryption key.</param>
            <exception cref="T:System.IO.InvalidDataException">Thrown if the processed data does not match the expected checksum given in it's chunk information.</exception>
        </member>
        <member name="F:SteamKit2.CDNClient.RequestTimeout">
            <summary>
            Default timeout to use when making requests
            </summary>
        </member>
        <member name="M:SteamKit2.CDNClient.#ctor(SteamKit2.SteamClient,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.CDNClient"/> class.
            </summary>
            <param name="steamClient">
            The <see cref="T:SteamKit2.SteamClient"/> this instance will be associated with.
            The SteamClient instance must be connected and logged onto Steam.</param>
            <param name="appTicket">
            The optional appticket for the depot that will be downloaded.
            This must be present when connected to steam non-anonymously.
            </param>
        </member>
        <member name="M:SteamKit2.CDNClient.FetchServerList(System.Net.IPEndPoint,System.Nullable{System.UInt32},System.Int32)">
            <summary>
            Fetches a list of content servers.
            </summary>
            <param name="csServer">
            The optional Steam3 content server to fetch the list from.
            If this parameter is not specified, a random CS server will be selected.
            </param>
            <param name="cellId">
            The optional CellID used to specify which regional servers should be returned in the list.
            If this parameter is not specified, Steam's GeoIP suggested CellID will be used instead.
            </param>
            <param name="maxServers">The maximum amount of servers to request.</param>
            <returns>A list of servers.</returns>
            <exception cref="T:System.InvalidOperationException">
            No Steam CS servers available, or the suggested CellID is unavailable.
            Check that the <see cref="T:SteamKit2.SteamClient"/> associated with this <see cref="T:SteamKit2.CDNClient"/> instance is logged onto Steam.
            </exception>
        </member>
        <member name="M:SteamKit2.CDNClient.Connect(SteamKit2.CDNClient.Server)">
            <summary>
            Connects and initializes a session to the specified content server.
            </summary>
            <param name="csServer">The content server to connect to.</param>
            <exception cref="T:System.ArgumentNullException">csServer was null.</exception>
        </member>
        <member name="M:SteamKit2.CDNClient.AuthenticateDepot(System.UInt32,System.Byte[],System.String)">
            <summary>
            Authenticate a CDNClient to a depot in the connected session
            </summary>
            <param name="depotid">The id of the depot being accessed.</param>
            <param name="depotKey">
            The optional depot decryption key for the depot that will be downloaded.
            This is used for decrypting filenames (if needed) in depot manifests, and processing depot chunks.
            </param>
            <param name="cdnAuthToken">CDN auth token for CDN content server endpoints.</param>
        </member>
        <member name="M:SteamKit2.CDNClient.DownloadManifest(System.UInt32,System.UInt64)">
            <summary>
            Downloads the depot manifest specified by the given manifest ID, and optionally decrypts the manifest's filenames if the depot decryption key has been provided.
            </summary>
            <param name="depotId">The id of the depot being accessed.</param>
            <param name="manifestId">The unique identifier of the manifest to be downloaded.</param>
            <returns>A <see cref="T:SteamKit2.DepotManifest"/> instance that contains information about the files present within a depot.</returns>
        </member>
        <member name="M:SteamKit2.CDNClient.DownloadManifest(System.UInt32,System.UInt64,System.String,System.String,System.Byte[])">
            <summary>
            Downloads the depot manifest specified by the given manifest ID, and optionally decrypts the manifest's filenames if the depot decryption key has been provided.
            </summary>
            <param name="depotId">The id of the depot being accessed.</param>
            <param name="manifestId">The unique identifier of the manifest to be downloaded.</param>
            <param name="host">CDN hostname.</param>
            <param name="cdnAuthToken">CDN auth token for CDN content server endpoints.</param>
            <param name="depotKey">
            The depot decryption key for the depot that will be downloaded.
            This is used for decrypting filenames (if needed) in depot manifests, and processing depot chunks.
            </param>
            <returns>A <see cref="T:SteamKit2.DepotManifest"/> instance that contains information about the files present within a depot.</returns>
        </member>
        <member name="M:SteamKit2.CDNClient.DownloadDepotChunk(System.UInt32,SteamKit2.DepotManifest.ChunkData)">
            <summary>
            Downloads the specified depot chunk, and optionally processes the chunk and verifies the checksum if the depot decryption key has been provided.
            </summary>
            <remarks>
            This function will also validate the length of the downloaded chunk with the value of <see cref="P:SteamKit2.DepotManifest.ChunkData.CompressedLength"/>,
            if it has been assigned a value.
            </remarks>
            <param name="depotId">The id of the depot being accessed.</param>
            <param name="chunk">
            A <see cref="T:SteamKit2.DepotManifest.ChunkData"/> instance that represents the chunk to download.
            This value should come from a manifest downloaded with <see cref="M:SteamKit2.CDNClient.DownloadManifest(System.UInt32,System.UInt64)"/>.
            </param>
            <returns>A <see cref="T:SteamKit2.CDNClient.DepotChunk"/> instance that contains the data for the given chunk.</returns>
            <exception cref="T:System.ArgumentNullException">chunk's <see cref="P:SteamKit2.DepotManifest.ChunkData.ChunkID"/> was null.</exception>
        </member>
        <member name="M:SteamKit2.CDNClient.DownloadDepotChunk(System.UInt32,SteamKit2.DepotManifest.ChunkData,System.String,System.String,System.Byte[])">
            <summary>
            Downloads the specified depot chunk, and optionally processes the chunk and verifies the checksum if the depot decryption key has been provided.
            </summary>
            <remarks>
            This function will also validate the length of the downloaded chunk with the value of <see cref="P:SteamKit2.DepotManifest.ChunkData.CompressedLength"/>,
            if it has been assigned a value.
            </remarks>
            <param name="depotId">The id of the depot being accessed.</param>
            <param name="chunk">
            A <see cref="T:SteamKit2.DepotManifest.ChunkData"/> instance that represents the chunk to download.
            This value should come from a manifest downloaded with <see cref="M:SteamKit2.CDNClient.DownloadManifest(System.UInt32,System.UInt64)"/>.
            </param>
            <returns>A <see cref="T:SteamKit2.CDNClient.DepotChunk"/> instance that contains the data for the given chunk.</returns>
            <param name="host">CDN hostname.</param>
            <param name="cdnAuthToken">CDN auth token for CDN content server endpoints.</param>
            <param name="depotKey">
            The depot decryption key for the depot that will be downloaded.
            This is used for decrypting filenames (if needed) in depot manifests, and processing depot chunks.
            </param>
            <exception cref="T:System.ArgumentNullException">chunk's <see cref="P:SteamKit2.DepotManifest.ChunkData.ChunkID"/> was null.</exception>
        </member>
        <member name="T:SteamKit2.SteamCloud">
            <summary>
            This handler is used for interacting with remote storage and user generated content.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamCloud.UGCDetailsCallback">
            <summary>
            This callback is recieved in response to calling <see cref="M:SteamKit2.SteamCloud.RequestUGCDetails(SteamKit2.UGCHandle)"/>.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamCloud.UGCDetailsCallback.Result">
            <summary>
            Gets the result of the request.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamCloud.UGCDetailsCallback.AppID">
            <summary>
            Gets the App ID the UGC is for.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamCloud.UGCDetailsCallback.Creator">
            <summary>
            Gets the SteamID of the UGC's creator.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamCloud.UGCDetailsCallback.URL">
            <summary>
            Gets the URL that the content is located at.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamCloud.UGCDetailsCallback.FileName">
            <summary>
            Gets the name of the file.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamCloud.UGCDetailsCallback.FileSize">
            <summary>
            Gets the size of the file.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamCloud.SingleFileInfoCallback">
            <summary>
            This callback is recieved in response to calling <see cref="M:SteamKit2.SteamCloud.GetSingleFileInfo(System.UInt32,System.String)"/>.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamCloud.SingleFileInfoCallback.Result">
            <summary>
            Gets the result of the request.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamCloud.SingleFileInfoCallback.AppID">
            <summary>
            Gets the App ID the file is for.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamCloud.SingleFileInfoCallback.FileName">
            <summary>
            Gets the file name request.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamCloud.SingleFileInfoCallback.SHAHash">
            <summary>
            Gets the SHA hash of the file.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamCloud.SingleFileInfoCallback.Timestamp">
            <summary>
            Gets the timestamp of the file.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamCloud.SingleFileInfoCallback.FileSize">
            <summary>
            Gets the size of the file.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamCloud.SingleFileInfoCallback.IsExplicitDelete">
            <summary>
            Gets if the file was explicity deleted by the user.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamCloud.ShareFileCallback">
            <summary>
            This callback is recieved in response to calling <see cref="M:SteamKit2.SteamCloud.ShareFile(System.UInt32,System.String)"/>.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamCloud.ShareFileCallback.Result">
            <summary>
            Gets the result of the request.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamCloud.ShareFileCallback.UGCId">
            <summary>
            Gets the resulting UGC handle.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamCloud.RequestUGCDetails(SteamKit2.UGCHandle)">
            <summary>
            Requests details for a specific item of user generated content from the Steam servers.
            Results are returned in a <see cref="T:SteamKit2.SteamCloud.UGCDetailsCallback"/>.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            </summary>
            <param name="ugcId">The unique user generated content id.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamCloud.UGCDetailsCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamCloud.GetSingleFileInfo(System.UInt32,System.String)">
            <summary>
            Requests details for a specific file in the user's Cloud storage.
            Results are returned in a <see cref="T:SteamKit2.SteamCloud.SingleFileInfoCallback"/>.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            </summary>
            <param name="appid">The app id of the game.</param>
            <param name="filename">The path to the file being requested.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamCloud.SingleFileInfoCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamCloud.ShareFile(System.UInt32,System.String)">
            <summary>
            Commit a Cloud file at the given path to make its UGC handle publicly visible.
            Results are returned in a <see cref="T:SteamKit2.SteamCloud.ShareFileCallback"/>.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            </summary>
            <param name="appid">The app id of the game.</param>
            <param name="filename">The path to the file being requested.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamCloud.ShareFileCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamCloud.HandleMsg(SteamKit2.IPacketMsg)">
            <summary>
            Handles a client message. This should not be called directly.
            </summary>
            <param name="packetMsg">The packet message that contains the data.</param>
        </member>
        <member name="T:SteamKit2.SteamGameServer">
            <summary>
            This handler is used for interacting with the Steam network as a game server.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamGameServer.StatusReplyCallback">
            <summary>
            This callback is fired when the game server receives a status reply.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamGameServer.StatusReplyCallback.IsSecure">
            <summary>
            Gets a value indicating whether this game server is VAC secure.
            </summary>
            <value>
            	<c>true</c> if this server is VAC secure; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SteamKit2.SteamGameServer.TicketAuthCallback">
            <summary>
            This callback is fired when ticket authentication has completed.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamGameServer.TicketAuthCallback.SteamID">
            <summary>
            Gets the SteamID the ticket auth completed for.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamGameServer.TicketAuthCallback.GameID">
            <summary>
            Gets the GameID the ticket was for.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamGameServer.TicketAuthCallback.State">
            <summary>
            Gets the authentication state.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamGameServer.TicketAuthCallback.AuthSessionResponse">
            <summary>
            Gets the auth session response.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamGameServer.TicketAuthCallback.TicketCRC">
            <summary>
            Gets the ticket CRC.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamGameServer.TicketAuthCallback.TicketSequence">
            <summary>
            Gets the ticket sequence.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamGameServer.LogOnDetails">
            <summary>
            Represents the details required to log into Steam3 as a game server.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamGameServer.LogOnDetails.Token">
            <summary>
            Gets or sets the authentication token used to log in as a game server.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamGameServer.LogOnDetails.AppID">
            <summary>
            Gets or sets the AppID this gameserver will serve.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamGameServer.StatusDetails">
            <summary>
            Represents the details of the game server's current status.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamGameServer.StatusDetails.AppID">
            <summary>
            Gets or sets the AppID this game server is serving.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamGameServer.StatusDetails.ServerFlags">
            <summary>
            Gets or sets the server's basic state as flags.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamGameServer.StatusDetails.GameDirectory">
            <summary>
            Gets or sets the directory the game data is in.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamGameServer.StatusDetails.Address">
            <summary>
            Gets or sets the IP address the game server listens on.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamGameServer.StatusDetails.Port">
            <summary>
            Gets or sets the port the game server listens on.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamGameServer.StatusDetails.QueryPort">
            <summary>
            Gets or sets the port the game server responds to queries on.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamGameServer.StatusDetails.Version">
            <summary>
            Gets or sets the current version of the game server.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamGameServer.LogOn(SteamKit2.SteamGameServer.LogOnDetails)">
            <summary>
            Logs onto the Steam network as a persistent game server.
            The client should already have been connected at this point.
            Results are return in a <see cref="T:SteamKit2.SteamUser.LoggedOnCallback"/>.
            </summary>
            <param name="details">The details to use for logging on.</param>
            <exception cref="T:System.ArgumentNullException">No logon details were provided.</exception>
            <exception cref="T:System.ArgumentException">Username or password are not set within <paramref name="details"/>.</exception>
        </member>
        <member name="M:SteamKit2.SteamGameServer.LogOnAnonymous(System.UInt32)">
            <summary>
            Logs the client into the Steam3 network as an anonymous game server.
            The client should already have been connected at this point.
            Results are returned in a <see cref="T:SteamKit2.SteamUser.LoggedOnCallback"/>.
            </summary>
            <param name="appId">The AppID served by this game server, or 0 for the default.</param>
        </member>
        <member name="M:SteamKit2.SteamGameServer.LogOff">
            <summary>
            Informs the Steam servers that this client wishes to log off from the network.
            The Steam server will disconnect the client, and a <see cref="T:SteamKit2.SteamClient.DisconnectedCallback"/> will be posted.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamGameServer.SendStatus(SteamKit2.SteamGameServer.StatusDetails)">
            <summary>
            Sends the server's status to the Steam network.
            Results are returned in a <see cref="T:SteamKit2.SteamGameServer.StatusReplyCallback"/> callback.
            </summary>
            <param name="details">A <see cref="T:SteamKit2.SteamGameServer.StatusDetails"/> object containing the server's status.</param>
        </member>
        <member name="M:SteamKit2.SteamGameServer.HandleMsg(SteamKit2.IPacketMsg)">
            <summary>
            Handles a client message. This should not be called directly.
            </summary>
            <param name="packetMsg">The packet message that contains the data.</param>
        </member>
        <member name="T:SteamKit2.SteamGameCoordinator">
            <summary>
            This handler handles all game coordinator messaging.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamGameCoordinator.MessageCallback">
            <summary>
            This callback is fired when a game coordinator message is recieved from the network.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamGameCoordinator.MessageCallback.EMsg">
            <summary>
            Gets the game coordinator message type.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamGameCoordinator.MessageCallback.AppID">
            <summary>
            Gets the AppID of the game coordinator the message is from.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamGameCoordinator.MessageCallback.IsProto">
            <summary>
            Gets a value indicating whether this message is protobuf'd.
            </summary>
            <value>
              <c>true</c> if this instance is protobuf'd; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.SteamGameCoordinator.MessageCallback.Message">
            <summary>
            Gets the actual message.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamGameCoordinator.Send(SteamKit2.GC.IClientGCMsg,System.UInt32)">
            <summary>
            Sends a game coordinator message for a specific appid.
            </summary>
            <param name="msg">The GC message to send.</param>
            <param name="appId">The app id of the game coordinator to send to.</param>
        </member>
        <member name="M:SteamKit2.SteamGameCoordinator.HandleMsg(SteamKit2.IPacketMsg)">
            <summary>
            Handles a client message. This should not be called directly.
            </summary>
            <param name="packetMsg">The packet message that contains the data.</param>
        </member>
        <member name="T:SteamKit2.SteamMasterServer">
            <summary>
            This handler is used for requesting server list details from Steam.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamMasterServer.QueryCallback">
            <summary>
            This callback is received in response to calling <see cref="M:SteamKit2.SteamMasterServer.ServerQuery(SteamKit2.SteamMasterServer.QueryDetails)"/>.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamMasterServer.QueryCallback.Server">
            <summary>
            Represents a single server.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamMasterServer.QueryCallback.Server.EndPoint">
            <summary>
            Gets the IP endpoint of the server.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamMasterServer.QueryCallback.Server.AuthedPlayers">
            <summary>
            Gets the number of Steam authenticated players on this server.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamMasterServer.QueryCallback.Servers">
            <summary>
            Gets the list of servers.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamMasterServer.QueryDetails">
            <summary>
            Details used when performing a server list query.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamMasterServer.QueryDetails.AppID">
            <summary>
            Gets or sets the AppID used when querying servers.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamMasterServer.QueryDetails.Filter">
            <summary>
            Gets or sets the filter used for querying the master server.
            Check https://developer.valvesoftware.com/wiki/Master_Server_Query_Protocol for details on how the filter is structured.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamMasterServer.QueryDetails.Region">
            <summary>
            Gets or sets the region that servers will be returned from.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamMasterServer.QueryDetails.GeoLocatedIP">
            <summary>
            Gets or sets the IP address that will be GeoIP located.
            This is done to return servers closer to this location.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamMasterServer.QueryDetails.MaxServers">
            <summary>
            Gets or sets the maximum number of servers to return.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamMasterServer.ServerQuery(SteamKit2.SteamMasterServer.QueryDetails)">
            <summary>
            Requests a list of servers from the Steam game master server.
            Results are returned in a <see cref="T:SteamKit2.SteamMasterServer.QueryCallback"/>.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            </summary>
            <param name="details">The details for the request.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamMasterServer.QueryCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamMasterServer.HandleMsg(SteamKit2.IPacketMsg)">
            <summary>
            Handles a client message. This should not be called directly.
            </summary>
            <param name="packetMsg">The packet message that contains the data.</param>
        </member>
        <member name="T:SteamKit2.SteamScreenshots">
            <summary>
            This handler is used for initializing Steam trades with other clients.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamScreenshots.ScreenshotAddedCallback">
            <summary>
            This callback is fired when this client receives a trade proposal.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamScreenshots.ScreenshotAddedCallback.Result">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamScreenshots.ScreenshotAddedCallback.ScreenshotID">
            <summary>
            Gets the screenshot ID of the newly added screenshot.
            </summary>
        </member>
        <member name="F:SteamKit2.SteamScreenshots.ScreenshotThumbnailWidth">
            <summary>
            Width of a screenshot thumnail
            </summary>
        </member>
        <member name="T:SteamKit2.SteamScreenshots.ScreenshotDetails">
            <summary>
            Represents the details required to add a screenshot
            </summary>
        </member>
        <member name="P:SteamKit2.SteamScreenshots.ScreenshotDetails.GameID">
            <summary>
            Gets or sets the Steam game ID this screenshot belongs to
            </summary>
            <value>The game ID.</value>
        </member>
        <member name="P:SteamKit2.SteamScreenshots.ScreenshotDetails.UFSImageFilePath">
            <summary>
            Gets or sets the UFS image filepath.
            </summary>
            <value>The UFS image filepath.</value>
        </member>
        <member name="P:SteamKit2.SteamScreenshots.ScreenshotDetails.UFSThumbnailFilePath">
            <summary>
            Gets or sets the UFS thumbnail filepath.
            </summary>
            <value>The UFS thumbnail filepath.</value>
        </member>
        <member name="P:SteamKit2.SteamScreenshots.ScreenshotDetails.Caption">
            <summary>
            Gets or sets the screenshot caption
            </summary>
            <value>The screenshot caption.</value>
        </member>
        <member name="P:SteamKit2.SteamScreenshots.ScreenshotDetails.Privacy">
            <summary>
            Gets or sets the screenshot privacy
            </summary>
            <value>The screenshot privacy.</value>
        </member>
        <member name="P:SteamKit2.SteamScreenshots.ScreenshotDetails.Width">
            <summary>
            Gets or sets the screenshot width
            </summary>
            <value>The screenshot width.</value>
        </member>
        <member name="P:SteamKit2.SteamScreenshots.ScreenshotDetails.Height">
            <summary>
            Gets or sets the screenshot height
            </summary>
            <value>The screenshot height.</value>
        </member>
        <member name="P:SteamKit2.SteamScreenshots.ScreenshotDetails.CreationTime">
            <summary>
            Gets or sets the creation time
            </summary>
            <value>The creation time.</value>
        </member>
        <member name="P:SteamKit2.SteamScreenshots.ScreenshotDetails.ContainsSpoilers">
            <summary>
            Gets or sets whether or not the screenshot contains spoilers
            </summary>
            <value>Whether or not the screenshot contains spoilers.</value>
        </member>
        <member name="M:SteamKit2.SteamScreenshots.ScreenshotDetails.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.SteamScreenshots.ScreenshotDetails"/> class.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamScreenshots.AddScreenshot(SteamKit2.SteamScreenshots.ScreenshotDetails)">
            <summary>
            Adds a screenshot to the user's screenshot library. The screenshot image and thumbnail must already exist on the UFS.
            Results are returned in a <see cref="T:SteamKit2.SteamScreenshots.ScreenshotAddedCallback"/>.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            </summary>
            <param name="details">The details of the screenshot.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamScreenshots.ScreenshotAddedCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamScreenshots.HandleMsg(SteamKit2.IPacketMsg)">
            <summary>
            Handles a client message. This should not be called directly.
            </summary>
            <param name="packetMsg">The packet message that contains the data.</param>
        </member>
        <member name="T:SteamKit2.SteamTrading">
            <summary>
            This handler is used for initializing Steam trades with other clients.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamTrading.TradeProposedCallback">
            <summary>
            This callback is fired when this client receives a trade proposal.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamTrading.TradeProposedCallback.TradeID">
            <summary>
            Gets the Trade ID of his proposal, used for replying.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamTrading.TradeProposedCallback.OtherClient">
            <summary>
            Gets the SteamID of the client that sent the proposal.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamTrading.TradeProposedCallback.OtherName">
            <summary>
            Gets the persona name of the client that sent the proposal.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamTrading.TradeResultCallback">
            <summary>
            This callback is fired when this client receives the response from a trade proposal.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamTrading.TradeResultCallback.TradeID">
            <summary>
            Gets the Trade ID that this result is for.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamTrading.TradeResultCallback.Response">
            <summary>
            Gets the response of the trade proposal.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamTrading.TradeResultCallback.OtherClient">
            <summary>
            Gets the SteamID of the client that responded to the proposal.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamTrading.TradeResultCallback.NumDaysSteamGuardRequired">
            <summary>
            Gets the number of days Steam Guard is required to have been active on this account.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamTrading.TradeResultCallback.NumDaysNewDeviceCooldown">
            <summary>
            Gets the number of days a new device cannot trade for.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamTrading.TradeResultCallback.DefaultNumDaysPasswordResetProbation">
            <summary>
            Gets the default number of days one cannot trade for after a password reset.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamTrading.TradeResultCallback.NumDaysPasswordResetProbation">
            <summary>
            Gets the number of days one cannot trade for after a password reset.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamTrading.SessionStartCallback">
            <summary>
            This callback is fired when a trading session has started.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamTrading.SessionStartCallback.OtherClient">
            <summary>
            Gets the SteamID of the client that this the trading session has started with.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamTrading.Trade(SteamKit2.SteamID)">
            <summary>
            Proposes a trade to another client.
            </summary>
            <param name="user">The client to trade.</param>
        </member>
        <member name="M:SteamKit2.SteamTrading.RespondToTrade(System.UInt32,System.Boolean)">
            <summary>
            Responds to a trade proposal.
            </summary>
            <param name="tradeId">The trade id of the received proposal.</param>
            <param name="acceptTrade">if set to <c>true</c>, the trade will be accepted.</param>
        </member>
        <member name="M:SteamKit2.SteamTrading.CancelTrade(SteamKit2.SteamID)">
            <summary>
            Cancels an already sent trade proposal.
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="M:SteamKit2.SteamTrading.HandleMsg(SteamKit2.IPacketMsg)">
            <summary>
            Handles a client message. This should not be called directly.
            </summary>
            <param name="packetMsg">The packet message that contains the data.</param>
        </member>
        <member name="T:SteamKit2.SteamUnifiedMessages">
            <summary>
            This handler is used for interacting with Steamworks unified messaging
            </summary>
        </member>
        <member name="T:SteamKit2.SteamUnifiedMessages.ServiceMethodResponse">
            <summary>
            This callback is returned in response to a service method sent through <see cref="T:SteamKit2.SteamUnifiedMessages"/>.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUnifiedMessages.ServiceMethodResponse.Result">
            <summary>
            Gets the result of the message.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUnifiedMessages.ServiceMethodResponse.ResponseRaw">
            <summary>
            Gets the raw binary response.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUnifiedMessages.ServiceMethodResponse.ServiceName">
            <summary>
            Gets the name of the Service.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUnifiedMessages.ServiceMethodResponse.RpcName">
            <summary>
            Gets the name of the RPC method.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUnifiedMessages.ServiceMethodResponse.MethodName">
            <summary>
            Gets the full name of the service method.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamUnifiedMessages.ServiceMethodResponse.GetDeserializedResponse``1">
            <summary>
            Deserializes the response into a protobuf object.
            </summary>
            <typeparam name="T">Protobuf type of the response message.</typeparam>
            <returns>The response to the message sent through <see cref="T:SteamKit2.SteamUnifiedMessages"/>.</returns>
        </member>
        <member name="T:SteamKit2.SteamUnifiedMessages.ServiceMethodNotification">
            <summary>
            This callback represents a service notification recieved though <see cref="T:SteamKit2.SteamUnifiedMessages"/>.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUnifiedMessages.ServiceMethodNotification.ServiceName">
            <summary>
            Gets the name of the Service.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUnifiedMessages.ServiceMethodNotification.RpcName">
            <summary>
            Gets the name of the RPC method.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUnifiedMessages.ServiceMethodNotification.MethodName">
            <summary>
            Gets the full name of the service method.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUnifiedMessages.ServiceMethodNotification.Body">
            <summary>
            Gets the protobuf notification body.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamUnifiedMessages.UnifiedService`1">
            <summary>
            This wrapper is used for expression-based RPC calls using Steam Unified Messaging.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamUnifiedMessages.UnifiedService`1.SendMessage``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Sends a message.
            Results are returned in a <see cref="T:SteamKit2.SteamUnifiedMessages.ServiceMethodResponse"/>.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            </summary>
            <typeparam name="TResponse">The type of the protobuf object which is the response to the RPC call.</typeparam>
            <param name="expr">RPC call expression, e.g. x => x.SomeMethodCall(message);</param>
            <param name="isNotification">Whether this message is a notification or not.</param>
            <returns>The JobID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamUnifiedMessages.ServiceMethodResponse"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamUnifiedMessages.SendMessage``1(System.String,``0,System.Boolean)">
            <summary>
            Sends a message.
            Results are returned in a <see cref="T:SteamKit2.SteamUnifiedMessages.ServiceMethodResponse"/>.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            </summary>
            <typeparam name="TRequest">The type of a protobuf object.</typeparam>
            <param name="name">Name of the RPC endpoint. Takes the format ServiceName.RpcName</param>
            <param name="message">The message to send.</param>
            <param name="isNotification">Whether this message is a notification or not.</param>
            <returns>The JobID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamUnifiedMessages.ServiceMethodResponse"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamUnifiedMessages.CreateService``1">
            <summary>
            Creates a <see cref="T:SteamKit2.SteamUnifiedMessages.UnifiedService`1"/> wrapper for expression-based unified messaging.
            </summary>
            <typeparam name="TService">The type of a service interface.</typeparam>
            <returns>The <see cref="T:SteamKit2.SteamUnifiedMessages.UnifiedService`1"/> wrapper.</returns>
        </member>
        <member name="M:SteamKit2.SteamUnifiedMessages.HandleMsg(SteamKit2.IPacketMsg)">
            <summary>
            Handles a client message. This should not be called directly.
            </summary>
            <param name="packetMsg">The packet message that contains the data.</param>
        </member>
        <member name="T:SteamKit2.SteamWorkshop">
            <summary>
            This handler is used for requesting files published on the Steam Workshop.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamWorkshop.PublishedFilesCallback">
            <summary>
            This callback is received in response to calling <see cref="M:SteamKit2.SteamWorkshop.EnumeratePublishedFiles(SteamKit2.SteamWorkshop.EnumerationDetails)"/>.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamWorkshop.PublishedFilesCallback.File">
            <summary>
            Represents the details of a single published file.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.PublishedFilesCallback.File.FileID">
            <summary>
            Gets the file ID.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.PublishedFilesCallback.File.Reports">
            <summary>
            Gets the number of reports for this file.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.PublishedFilesCallback.File.Score">
            <summary>
            Gets the score of this file, based on up and down votes.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.PublishedFilesCallback.File.UpVotes">
            <summary>
            Gets the total count of up votes.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.PublishedFilesCallback.File.DownVotes">
            <summary>
            Gets the total count of down votes.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.PublishedFilesCallback.Result">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.PublishedFilesCallback.Files">
            <summary>
            Gets the list of enumerated files.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.PublishedFilesCallback.TotalResults">
            <summary>
            Gets the count of total results.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamWorkshop.UserPublishedFilesCallback">
            <summary>
            This callback is received in response to calling <see cref="M:SteamKit2.SteamWorkshop.EnumerateUserPublishedFiles(SteamKit2.SteamWorkshop.EnumerationUserDetails)"/>.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamWorkshop.UserPublishedFilesCallback.File">
            <summary>
            Represents the details of a single published file.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.UserPublishedFilesCallback.File.FileID">
            <summary>
            Gets the file ID.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.UserPublishedFilesCallback.Result">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.UserPublishedFilesCallback.Files">
            <summary>
            Gets the list of enumerated files.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.UserPublishedFilesCallback.TotalResults">
            <summary>
            Gets the count of total results.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamWorkshop.UserSubscribedFilesCallback">
            <summary>
            This callback is received in response to calling <see cref="M:SteamKit2.SteamWorkshop.EnumerateUserPublishedFiles(SteamKit2.SteamWorkshop.EnumerationUserDetails)"/>.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamWorkshop.UserSubscribedFilesCallback.File">
            <summary>
            Represents the details of a single published file.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.UserSubscribedFilesCallback.File.FileID">
            <summary>
            Gets the file ID.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.UserSubscribedFilesCallback.File.TimeSubscribed">
            <summary>
            Gets the time this file was subscribed to.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.UserSubscribedFilesCallback.Result">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.UserSubscribedFilesCallback.Files">
            <summary>
            Gets the list of enumerated files.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.UserSubscribedFilesCallback.TotalResults">
            <summary>
            Gets the count of total results.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamWorkshop.UserActionPublishedFilesCallback">
            <summary>
            This callback is received in response to calling <see cref="M:SteamKit2.SteamWorkshop.EnumeratePublishedFilesByUserAction(SteamKit2.SteamWorkshop.EnumerationUserDetails)"/>.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamWorkshop.UserActionPublishedFilesCallback.File">
            <summary>
            Represents the details of a single published file.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.UserActionPublishedFilesCallback.File.FileID">
            <summary>
            Gets the file ID.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.UserActionPublishedFilesCallback.File.Timestamp">
            <summary>
            Gets the timestamp of this file.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.UserActionPublishedFilesCallback.Result">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.UserActionPublishedFilesCallback.Files">
            <summary>
            Gets the list of enumerated files.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.UserActionPublishedFilesCallback.TotalResults">
            <summary>
            Gets the count of total results.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamWorkshop.EnumerationUserDetails">
            <summary>
            Represents the details of an enumeration request used for the local user's files.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.EnumerationUserDetails.AppID">
            <summary>
            Gets or sets the AppID of the workshop to enumerate.
            </summary>
            <value>
            The AppID.
            </value>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.EnumerationUserDetails.SortOrder">
            <summary>
            Gets or sets the sort order.
            This value is only used by <see cref="M:SteamKit2.SteamWorkshop.EnumerateUserPublishedFiles(SteamKit2.SteamWorkshop.EnumerationUserDetails)"/>.
            </summary>
            <value>
            The sort order.
            </value>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.EnumerationUserDetails.StartIndex">
            <summary>
            Gets or sets the start index.
            </summary>
            <value>
            The start index.
            </value>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.EnumerationUserDetails.UserAction">
            <summary>
            Gets or sets the user action to filter by.
            This value is only used by <see cref="M:SteamKit2.SteamWorkshop.EnumeratePublishedFilesByUserAction(SteamKit2.SteamWorkshop.EnumerationUserDetails)"/>.
            </summary>
            <value>
            The user action.
            </value>
        </member>
        <member name="M:SteamKit2.SteamWorkshop.EnumerateUserPublishedFiles(SteamKit2.SteamWorkshop.EnumerationUserDetails)">
            <summary>
            Enumerates the list of published files for the current logged in user.
            Results are returned in a <see cref="T:SteamKit2.SteamWorkshop.UserPublishedFilesCallback"/>.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            </summary>
            <param name="details">The specific details of the request.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamWorkshop.UserPublishedFilesCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamWorkshop.EnumerateUserSubscribedFiles(SteamKit2.SteamWorkshop.EnumerationUserDetails)">
            <summary>
            Enumerates the list of subscribed files for the current logged in user.
            Results are returned in a <see cref="T:SteamKit2.SteamWorkshop.UserSubscribedFilesCallback"/>.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            </summary>
            <param name="details">The specific details of the request.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamWorkshop.UserSubscribedFilesCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamWorkshop.EnumeratePublishedFilesByUserAction(SteamKit2.SteamWorkshop.EnumerationUserDetails)">
            <summary>
            Enumerates the list of published files for the current logged in user based on user action.
            Results are returned in a <see cref="T:SteamKit2.SteamWorkshop.UserActionPublishedFilesCallback"/>.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            </summary>
            <param name="details">The specific details of the request.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamWorkshop.UserActionPublishedFilesCallback"/>.</returns>
        </member>
        <member name="T:SteamKit2.SteamWorkshop.EnumerationDetails">
            <summary>
            Represents the details of an enumeration request for all published files.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.EnumerationDetails.AppID">
            <summary>
            Gets or sets the AppID of the workshop to enumerate.
            </summary>
            <value>
            The AppID.
            </value>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.EnumerationDetails.Type">
            <summary>
            Gets or sets the type of the enumeration.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.EnumerationDetails.StartIndex">
            <summary>
            Gets or sets the start index.
            </summary>
            <value>
            The start index.
            </value>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.EnumerationDetails.Days">
            <summary>
            Gets or sets the days.
            </summary>
            <value>
            The days.
            </value>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.EnumerationDetails.Count">
            <summary>
            Gets or sets the number of results to return.
            </summary>
            <value>
            The number of results.
            </value>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.EnumerationDetails.Tags">
            <summary>
            Gets the list of tags to enumerate.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.EnumerationDetails.UserTags">
            <summary>
            Gets the list of user tags to enumerate.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamWorkshop.EnumerationDetails.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.SteamWorkshop.EnumerationDetails"/> class.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamWorkshop.EnumeratePublishedFiles(SteamKit2.SteamWorkshop.EnumerationDetails)">
            <summary>
            Enumerates the list of all published files on the Steam workshop.
            Results are returned in a <see cref="T:SteamKit2.SteamWorkshop.PublishedFilesCallback"/>.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            </summary>
            <param name="details">The specific details of the request.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamWorkshop.PublishedFilesCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamWorkshop.HandleMsg(SteamKit2.IPacketMsg)">
            <summary>
            Handles a client message. This should not be called directly.
            </summary>
            <param name="packetMsg">The packet message that contains the data.</param>
        </member>
        <member name="T:SteamKit2.SteamUserStats">
            <summary>
            This handler handles Steam user statistic related actions.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamUserStats.GetNumberOfCurrentPlayers(SteamKit2.GameID)">
            <summary>
            Retrieves the number of current players for a given <see cref="T:SteamKit2.GameID"/>.
            Results are returned in a <see cref="T:SteamKit2.SteamUserStats.NumberOfPlayersCallback"/>.
            </summary>
            <param name="gameId">The GameID to request the number of players for.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamUserStats.NumberOfPlayersCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamUserStats.GetNumberOfCurrentPlayers(System.UInt32)">
            <summary>
            Retrieves the number of current players for a given app id.
            Results are returned in a <see cref="T:SteamKit2.SteamUserStats.NumberOfPlayersCallback"/>.
            </summary>
            <param name="appId">The app id to request the number of players for.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamUserStats.NumberOfPlayersCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamUserStats.FindLeaderboard(System.UInt32,System.String)">
            <summary>
            Asks the Steam back-end for a leaderboard by name for a given appid.
            Results are returned in a <see cref="T:SteamKit2.SteamUserStats.FindOrCreateLeaderboardCallback"/>.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            </summary>
            <param name="appId">The AppID to request a leaderboard for.</param>
            <param name="name">Name of the leaderboard to request.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamUserStats.FindOrCreateLeaderboardCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamUserStats.CreateLeaderboard(System.UInt32,System.String,SteamKit2.ELeaderboardSortMethod,SteamKit2.ELeaderboardDisplayType)">
            <summary>
            Asks the Steam back-end for a leaderboard by name, and will create it if it's not yet.
            Results are returned in a <see cref="T:SteamKit2.SteamUserStats.FindOrCreateLeaderboardCallback"/>.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            </summary>
            <param name="appId">The AppID to request a leaderboard for.</param>
            <param name="name">Name of the leaderboard to create.</param>
            <param name="sortMethod">Sort method to use for this leaderboard</param>
            <param name="displayType">Display type for this leaderboard.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamUserStats.FindOrCreateLeaderboardCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamUserStats.GetLeaderboardEntries(System.UInt32,System.Int32,System.Int32,System.Int32,SteamKit2.ELeaderboardDataRequest)">
            <summary>
            Asks the Steam back-end for a set of rows in the leaderboard.
            Results are returned in a <see cref="T:SteamKit2.SteamUserStats.LeaderboardEntriesCallback"/>.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            </summary>
            <param name="appId">The AppID to request leaderboard rows for.</param>
            <param name="id">ID of the leaderboard to view.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamUserStats.LeaderboardEntriesCallback"/>.</returns>
            <param name="rangeStart">Range start or 0.</param>
            <param name="rangeEnd">Range end or max leaderboard entries.</param>
            <param name="dataRequest">Type of request.</param>
        </member>
        <member name="M:SteamKit2.SteamUserStats.HandleMsg(SteamKit2.IPacketMsg)">
            <summary>
            Handles a client message. This should not be called directly.
            </summary>
            <param name="packetMsg">The <see cref="T:SteamKit2.IPacketMsg"/> instance containing the event data.</param>
        </member>
        <member name="T:SteamKit2.SteamUserStats.NumberOfPlayersCallback">
            <summary>
            This callback is fired in response to <see cref="M:SteamKit2.SteamUserStats.GetNumberOfCurrentPlayers(System.UInt32)" />.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUserStats.NumberOfPlayersCallback.Result">
            <summary>
            Gets the result of the request.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUserStats.NumberOfPlayersCallback.NumPlayers">
            <summary>
            Gets the current number of players according to Steam.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamUserStats.FindOrCreateLeaderboardCallback">
            <summary>
            This callback is fired in response to <see cref="M:SteamKit2.SteamUserStats.FindLeaderboard(System.UInt32,System.String)" /> and <see cref="M:SteamKit2.SteamUserStats.CreateLeaderboard(System.UInt32,System.String,SteamKit2.ELeaderboardSortMethod,SteamKit2.ELeaderboardDisplayType)" />.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUserStats.FindOrCreateLeaderboardCallback.Result">
            <summary>
            Gets the result of the request.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUserStats.FindOrCreateLeaderboardCallback.ID">
            <summary>
            Leaderboard ID.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUserStats.FindOrCreateLeaderboardCallback.EntryCount">
            <summary>
            How many entires there are for requested leaderboard.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUserStats.FindOrCreateLeaderboardCallback.SortMethod">
            <summary>
            Sort method to use for this leaderboard.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUserStats.FindOrCreateLeaderboardCallback.DisplayType">
            <summary>
            Display type for this leaderboard.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamUserStats.LeaderboardEntriesCallback">
            <summary>
            This callback is fired in response to <see cref="M:SteamKit2.SteamUserStats.GetLeaderboardEntries(System.UInt32,System.Int32,System.Int32,System.Int32,SteamKit2.ELeaderboardDataRequest)" />.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamUserStats.LeaderboardEntriesCallback.LeaderboardEntry">
            <summary>
            Represents a single package in this response.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUserStats.LeaderboardEntriesCallback.LeaderboardEntry.SteamID">
            <summary>
            Gets the <see cref="P:SteamKit2.SteamUserStats.LeaderboardEntriesCallback.LeaderboardEntry.SteamID"/> for this entry.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUserStats.LeaderboardEntriesCallback.LeaderboardEntry.GlobalRank">
            <summary>
            Gets the global rank for this entry.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUserStats.LeaderboardEntriesCallback.LeaderboardEntry.Score">
            <summary>
            Gets the score for this entry.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUserStats.LeaderboardEntriesCallback.LeaderboardEntry.UGCId">
            <summary>
            Gets the <see cref="T:SteamKit2.UGCHandle"/> attached to this entry.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUserStats.LeaderboardEntriesCallback.LeaderboardEntry.Details">
            <summary>
            Extra game-defined information regarding how the user got that score.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUserStats.LeaderboardEntriesCallback.Result">
            <summary>
            Gets the result of the request.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUserStats.LeaderboardEntriesCallback.EntryCount">
            <summary>
            How many entires there are for requested leaderboard.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUserStats.LeaderboardEntriesCallback.Entries">
            <summary>
            Gets the list of leaderboard entries this response contains.
            </summary>
        </member>
        <member name="M:SteamKit2.AsyncJobManager.StartJob(SteamKit2.AsyncJob)">
            <summary>
            Tracks a job with this manager.
            </summary>
            <param name="asyncJob">The asynchronous job to track.</param>
        </member>
        <member name="M:SteamKit2.AsyncJobManager.TryCompleteJob(SteamKit2.JobID,SteamKit2.CallbackMsg)">
            <summary>
            Passes a callback to a pending async job.
            If the given callback completes the job, the job is removed from this manager.
            </summary>
            <param name="jobId">The JobID.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:SteamKit2.AsyncJobManager.HeartbeatJob(SteamKit2.JobID)">
            <summary>
            Extends the lifetime of a job.
            </summary>
            <param name="jobId">The job identifier.</param>
        </member>
        <member name="M:SteamKit2.AsyncJobManager.FailJob(SteamKit2.JobID)">
            <summary>
            Marks a certain job as remotely failed.
            </summary>
            <param name="jobId">The job identifier.</param>
        </member>
        <member name="M:SteamKit2.AsyncJobManager.CancelPendingJobs">
            <summary>
            Cancels and clears all jobs being tracked.
            </summary>
        </member>
        <member name="M:SteamKit2.AsyncJobManager.SetTimeoutsEnabled(System.Boolean)">
            <summary>
            Enables or disables periodic checks for job timeouts.
            </summary>
            <param name="enable">Whether or not job timeout checks should be enabled.</param>
        </member>
        <member name="M:SteamKit2.AsyncJobManager.CancelTimedoutJobs">
            <summary>
            This is called periodically to cancel and clear out any jobs that have timed out (no response from Steam).
            </summary>
        </member>
        <member name="M:SteamKit2.AsyncJobManager.GetJob(SteamKit2.JobID,System.Boolean)">
            <summary>
            Retrieves a job from this manager, and optionally removes it from tracking.
            </summary>
            <param name="jobId">The JobID.</param>
            <param name="andRemove">If set to <c>true</c>, this job is removed from tracking.</param>
            <returns></returns>
        </member>
        <member name="T:SteamKit2.AsyncJobFailedException">
            <summary>
            Thrown when Steam encounters a remote error with a pending <see cref="T:SteamKit2.AsyncJob"/>.
            </summary>
        </member>
        <member name="M:SteamKit2.AsyncJobFailedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.AsyncJobFailedException"/> class.
            </summary>
        </member>
        <member name="M:SteamKit2.AsyncJobFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.AsyncJobFailedException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:SteamKit2.AsyncJobFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.AsyncJobFailedException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:SteamKit2.Callback`1">
            <summary>
            This utility class is used for binding a callback to a function.
            </summary>
            <typeparam name="TCall">The callback type this instance will handle.</typeparam>
        </member>
        <member name="P:SteamKit2.Callback`1.JobID">
            <summary>
            Gets or sets the job ID this callback will handle.
            Setting this field to the maximum value of a ulong will unbind this handler,
            allowing all callbacks of type TCall to be handled.
            </summary>
        </member>
        <member name="P:SteamKit2.Callback`1.OnRun">
            <summary>
            Gets or sets the function to call when a callback of type TCall arrives.
            </summary>
        </member>
        <member name="M:SteamKit2.Callback`1.#ctor(System.Action{`0},SteamKit2.CallbackManager)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.Callback`1"/> class.
            </summary>
            <param name="func">The function to call when a callback of type TCall arrives.</param>
            <param name="mgr">The <see cref="T:SteamKit2.CallbackManager"/> that is responsible for the routing of callbacks to this handler, or null if the callback will be registered manually.</param>
        </member>
        <member name="M:SteamKit2.Callback`1.#ctor(System.Action{`0},SteamKit2.CallbackManager,SteamKit2.JobID)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.Callback`1"/> class.
            </summary>
            <param name="func">The function to call when a callback of type TCall arrives.</param>
            <param name="mgr">The <see cref="T:SteamKit2.CallbackManager"/> that is responsible for the routing of callbacks to this handler, or null if the callback will be registered manually.</param>
            <param name="jobID">The <see cref="P:SteamKit2.Callback`1.JobID"/>to filter matching callbacks by. Specify <see cref="P:JobID.Invalid"/> to recieve all callbacks of type TCall.</param>
        </member>
        <member name="M:SteamKit2.Callback`1.AttachTo(SteamKit2.CallbackManager)">
            <summary>
            Attaches the specified <see cref="T:SteamKit2.CallbackManager"/> to this handler.
            </summary>
            <param name="mgr">The manager to attach.</param>
        </member>
        <member name="M:SteamKit2.Callback`1.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:SteamKit2.Callback`1"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:SteamKit2.Callback`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            This function will unregister the callback.
            </summary>
        </member>
        <member name="T:SteamKit2.CallbackManager">
            <summary>
            This class is a utility for routing callbacks to function calls.
            In order to bind callbacks to functions, an instance of this class must be created for the
            <see cref="T:SteamKit2.SteamClient"/> instance that will be posting callbacks.
            </summary>
        </member>
        <member name="M:SteamKit2.CallbackManager.#ctor(SteamKit2.SteamClient)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.CallbackManager"/> class.
            </summary>
            <param name="client">The <see cref="T:SteamKit2.SteamClient"/> instance to handle the callbacks of.</param>
        </member>
        <member name="M:SteamKit2.CallbackManager.RunCallbacks">
            <summary>
            Runs a single queued callback.
            If no callback is queued, this method will instantly return.
            </summary>
        </member>
        <member name="M:SteamKit2.CallbackManager.RunWaitCallbacks(System.TimeSpan)">
            <summary>
            Blocks the current thread to run a single queued callback.
            If no callback is queued, the method will block for the given timeout.
            </summary>
            <param name="timeout">The length of time to block.</param>
        </member>
        <member name="M:SteamKit2.CallbackManager.RunWaitAllCallbacks(System.TimeSpan)">
            <summary>
            Blocks the current thread to run all queued callbacks.
            If no callback is queued, the method will block for the given timeout.
            </summary>
            <param name="timeout">The length of time to block.</param>
        </member>
        <member name="M:SteamKit2.CallbackManager.RunWaitCallbacks">
            <summary>
            Blocks the current thread to run a single queued callback.
            If no callback is queued, the method will block until one is posted.
            </summary>
        </member>
        <member name="M:SteamKit2.CallbackManager.Register(SteamKit2.Internal.CallbackBase)">
            <summary>
            Manually registers the specified callback handler.
            This is generally not required, as a handler will register itself when it is created.
            If the specified callback is already registered, no exception is thrown.
            </summary>
            <param name="call">The callback handler to register.</param>
        </member>
        <member name="M:SteamKit2.CallbackManager.Subscribe``1(SteamKit2.JobID,System.Action{``0})">
            <summary>
            Registers the provided <see cref="T:System.Action`1"/> to receive callbacks of type <typeparamref name="TCallback" />.
            </summary>
            <param name="jobID">The <see cref="T:SteamKit2.JobID"/> of the callbacks that should be subscribed to.
            	If this is <see cref="F:SteamKit2.JobID.Invalid"/>, all callbacks of type <typeparamref name="TCallback" /> will be recieved.</param>
            <param name="callbackFunc">The function to invoke with the callback.</param>
            <typeparam name="TCallback">The type of callback to subscribe to.</typeparam>
            <returns>An <see cref="T:System.IDisposable"/>. Disposing of the return value will unsubscribe the <paramref name="callbackFunc"/>.</returns>
        </member>
        <member name="M:SteamKit2.CallbackManager.Subscribe``1(System.Action{``0})">
            <summary>
            Registers the provided <see cref="T:System.Action`1"/> to receive callbacks of type <typeparam name="TCallback" />.
            </summary>
            <param name="callbackFunc">The function to invoke with the callback.</param>
            <returns>An <see cref="T:System.IDisposable"/>. Disposing of the return value will unsubscribe the <paramref name="callbackFunc"/>.</returns>
        </member>
        <member name="M:SteamKit2.CallbackManager.Unregister(SteamKit2.Internal.CallbackBase)">
            <summary>
            Unregisters the specified callback handler.
            This is generally not required, as a handler will unregister itself when disposed or finalized.
            If the specified callback isn't registered, no exception is thrown.
            </summary>
            <param name="call">The callback handler to unregister.</param>
        </member>
        <member name="T:SteamKit2.UFSClient">
            <summary>
            Represents a single client that connects to a UFS server.
            </summary>
        </member>
        <member name="T:SteamKit2.UFSClient.ConnectedCallback">
            <summary>
            This callback is received after attempting to connect to the UFS server.
            </summary>
        </member>
        <member name="P:SteamKit2.UFSClient.ConnectedCallback.Result">
            <summary>
            Gets the result of the connection attempt.
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:SteamKit2.UFSClient.DisconnectedCallback">
            <summary>
            This callback is received when the client is physically disconnected from the UFS server.
            </summary>
        </member>
        <member name="P:SteamKit2.UFSClient.DisconnectedCallback.UserInitiated">
            <summary>
            If true, the disconnection was initiated by calling <see cref="M:SteamKit2.UFSClient.Disconnect"/>.
            If false, the disconnection was the cause of something not user-controlled, such as a network failure or
            a forcible disconnection by the remote server.
            </summary>
        </member>
        <member name="T:SteamKit2.UFSClient.LoggedOnCallback">
            <summary>
            This callback is returned in response to an attempt to log on to the UFS server through <see cref="T:SteamKit2.UFSClient"/>.
            </summary>
        </member>
        <member name="P:SteamKit2.UFSClient.LoggedOnCallback.Result">
            <summary>
            Gets the result of the logon
            </summary>
        </member>
        <member name="T:SteamKit2.UFSClient.UploadFileResponseCallback">
            <summary>
            This callback is returned in response to a request to upload a file through <see cref="T:SteamKit2.UFSClient"/>.
            </summary>
        </member>
        <member name="P:SteamKit2.UFSClient.UploadFileResponseCallback.Result">
            <summary>
            Gets the result of the upload request
            </summary>
        </member>
        <member name="P:SteamKit2.UFSClient.UploadFileResponseCallback.UseHttp">
            <summary>
            Gets whether or not the file upload should proceed over HTTP
            </summary>
        </member>
        <member name="P:SteamKit2.UFSClient.UploadFileResponseCallback.UseHttps">
            <summary>
            Gets whether or not the file upload should proceed over HTTPS
            </summary>
        </member>
        <member name="P:SteamKit2.UFSClient.UploadFileResponseCallback.EncryptFile">
            <summary>
            Gets whether or not the file should be encrypted during upload
            </summary>
        </member>
        <member name="P:SteamKit2.UFSClient.UploadFileResponseCallback.ShaHash">
            <summary>
            Gets the SHA hash of the file to be uploaded
            </summary>
        </member>
        <member name="P:SteamKit2.UFSClient.UploadFileResponseCallback.RemoteJobID">
            <summary>
            Gets the JobID on the UFS server.
            </summary>
        </member>
        <member name="T:SteamKit2.UFSClient.UploadFileFinishedCallback">
            <summary>
            This callback is returned when a file upload through <see cref="T:SteamKit2.UFSClient"/> is completed.
            </summary>
        </member>
        <member name="P:SteamKit2.UFSClient.UploadFileFinishedCallback.Result">
            <summary>
            Gets the result of the file upload
            </summary>
        </member>
        <member name="P:SteamKit2.UFSClient.UploadFileFinishedCallback.ShaHash">
            <summary>
            Gets the SHA hash of the file that was uploaded
            </summary>
        </member>
        <member name="P:SteamKit2.UFSClient.ConnectedUniverse">
            <summary>
            Gets the connected universe of this client.
            This value will be <see cref="F:SteamKit2.EUniverse.Invalid"/> if the client is not connected to Steam.
            </summary>
            <value>The universe.</value>
        </member>
        <member name="P:SteamKit2.UFSClient.IsConnected">
            <summary>
            Gets a value indicating whether this instance is connected to the remote UFS server.
            </summary>
            <value>
            	<c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.UFSClient.ConnectionTimeout">
            <summary>
            Gets or sets the connection timeout used when connecting to the UFS server.
            The default value is 5 seconds.
            </summary>
            <value>
            The connection timeout.
            </value>
        </member>
        <member name="M:SteamKit2.UFSClient.#ctor(SteamKit2.SteamClient)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.UFSClient"/> class.
            </summary>
            <param name="steamClient">
            The parent <see cref="T:SteamKit2.SteamClient"/> instance that the UFS connection is for.
            Callbacks will also be posted through this instance.
            </param>
        </member>
        <member name="M:SteamKit2.UFSClient.Connect(System.Net.IPEndPoint)">
            <summary>
            Connects this client to a UFS server.
            This begins the process of connecting and encrypting the data channel between the client and the UFS server.
            Results are returned asynchronously in a <see cref="T:SteamKit2.UFSClient.ConnectedCallback"/>.
            If the UFS server that this client attempts to connect to is down, a <see cref="T:SteamKit2.UFSClient.DisconnectedCallback"/> will be posted instead.
            <see cref="T:SteamKit2.UFSClient"/> will not attempt to reconnect to Steam, you must handle this callback and call <see cref="M:SteamKit2.UFSClient.Connect(System.Net.IPEndPoint)"/> again, preferrably after a short delay.
            In order to connect to the UFS server, the parent <see cref="T:SteamKit2.SteamClient"/> must be connected to the CM server.
            </summary>
            <param name="ufsServer">
            The <see cref="T:System.Net.IPEndPoint"/> of the UFS server to connect to.
            If <c>null</c>, <see cref="T:SteamKit2.UFSClient"/> will randomly select a UFS server from the <see cref="T:SteamKit2.SteamClient"/>'s list of servers.
            </param>
        </member>
        <member name="M:SteamKit2.UFSClient.Disconnect">
            <summary>
            Disconnects this client from the UFS server.
            a <see cref="T:SteamKit2.UFSClient.DisconnectedCallback"/> will be posted upon disconnection.
            </summary>
        </member>
        <member name="T:SteamKit2.UFSClient.UploadDetails">
            <summary>
            Represents all the information required to upload a file to the UFS server.
            </summary>
        </member>
        <member name="P:SteamKit2.UFSClient.UploadDetails.AppID">
            <summary>
            Gets or sets the AppID this upload request is for.
            </summary>
            <value>
            The AppID.
            </value>
        </member>
        <member name="P:SteamKit2.UFSClient.UploadDetails.FileName">
            <summary>
            Gets or sets the remote name of the file that is being uploaded.
            </summary>
            <value>
            The name of the file.
            </value>
        </member>
        <member name="P:SteamKit2.UFSClient.UploadDetails.FileData">
            <summary>
            Gets or sets the physical file data for this upload.
            </summary>
            <value>
            The file data.
            </value>
        </member>
        <member name="P:SteamKit2.UFSClient.UploadDetails.RemoteJobID">
            <summary>
            Gets or sets the JobID of this file upload. This value should be assigned from <see cref="P:SteamKit2.UFSClient.UploadFileResponseCallback.RemoteJobID"/>.
            </summary>
            <value>
            The job ID.
            </value>
        </member>
        <member name="M:SteamKit2.UFSClient.Logon(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Attempt to logon to the UFS and authorize the client for the given AppIDs.
            The <see cref="T:SteamKit2.UFSClient"/> should be connected before this point.
            Results are returned in a <see cref="T:SteamKit2.UFSClient.LoggedOnCallback"/>.
            </summary>
            <param name="appIds">The AppIDs to authorize when connecting to the UFS.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.UFSClient.LoggedOnCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.UFSClient.RequestFileUpload(SteamKit2.UFSClient.UploadDetails)">
            <summary>
            Begins a request to upload a file to the UFS.
            The <see cref="T:SteamKit2.UFSClient"/> should be logged on before this point.
            Results are returned in a <see cref="T:SteamKit2.UFSClient.UploadFileResponseCallback"/>.
            </summary>
            <param name="details">The details to use for uploading the file.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.UFSClient.UploadFileResponseCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.UFSClient.UploadFile(SteamKit2.UFSClient.UploadDetails)">
            <summary>
            Uploads the actual contents of a file to the UFS.
            The <see cref="T:SteamKit2.UFSClient"/> should be logged on before this point, and the previous request to upload a file must have completed successfully.
            Results are returned in a <see cref="T:SteamKit2.UFSClient.UploadFileFinishedCallback"/>.
            </summary>
            <param name="details">The details to use for uploading the file.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.UFSClient.UploadFileFinishedCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.UFSClient.Send(SteamKit2.IClientMsg)">
            <summary>
            Sends the specified client message to the UFS server.
            This method will automatically assign the correct <see cref="P:SteamKit2.IClientMsg.SteamID"/> of the message, as given by the parent <see cref="T:SteamKit2.SteamClient"/>.
            </summary>
            <param name="msg">The client message to send.</param>
        </member>
        <member name="T:SteamKit2.SteamDirectory">
            <summary>
            Helper class to load servers from the Steam Directory Web API.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamDirectory.Initialize(System.UInt32)">
            <summary>
            Initializes <see cref="T:SteamKit2.Internal.CMClient"/>'s server list with servers from the Steam Directory.
            </summary>
            <param name="cellid">Cell ID</param>
        </member>
        <member name="M:SteamKit2.SteamDirectory.LoadAsync(System.UInt32)">
            <summary>
            Load a list of servers from the Steam Directory.
            </summary>
            <param name="cellid">Cell ID</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> with the Result set to an enumerable list of <see cref="T:System.Net.IPEndPoint"/>s.</returns>
        </member>
        <member name="M:SteamKit2.SteamDirectory.LoadAsync(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Load a list of servers from the Steam Directory.
            </summary>
            <param name="cellid">Cell ID</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> with the Result set to an enumerable list of <see cref="T:System.Net.IPEndPoint"/>s.</returns>
        </member>
        <member name="T:SteamKit2.WebAPI">
            <summary>
            Utility class for interacting with the Steam Web API.
            </summary>
        </member>
        <member name="T:SteamKit2.WebAPI.Interface">
            <summary>
            Represents a single interface that exists within the Web API.
            This is a dynamic object that allows function calls to interfaces with minimal code.
            </summary>
        </member>
        <member name="P:SteamKit2.WebAPI.Interface.Timeout">
            <summary>
            Gets or sets the timeout value in milliseconds for any web requests made to the WebAPI.
            </summary>
            <value>
            The timeout value in milliseconds. The default value is 100,000 milliseconds (100 seconds).
            </value>
        </member>
        <member name="M:SteamKit2.WebAPI.Interface.Call(System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Boolean)">
            <summary>
            Manually calls the specified Web API function with the provided details.
            </summary>
            <param name="func">The function name to call.</param>
            <param name="version">The version of the function to call.</param>
            <param name="args">A dictionary of string key value pairs representing arguments to be passed to the API.</param>
            <param name="method">The http request method. Either "POST" or "GET".</param>
            <param name="secure">if set to <c>true</c> this method will be called through the secure API.</param>
            <returns>A <see cref="T:SteamKit2.KeyValue"/> object representing the results of the Web API call.</returns>
            <exception cref="T:System.ArgumentNullException">The function name or request method provided were <c>null</c>.</exception>
            <exception cref="T:System.Net.WebException">An network error occurred when performing the request.</exception>
            <exception cref="T:System.IO.InvalidDataException">An error occured when parsing the response from the WebAPI.</exception>
        </member>
        <member name="M:SteamKit2.WebAPI.Interface.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SteamKit2.WebAPI.Interface.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that invoke a member.
            Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can
            override this method to specify dynamic behavior for operations such as calling a method.
            This method should not be called directly, it is  called through dynamic method calls.
            </summary>
            <param name="binder">
            Provides information about the dynamic operation.
            The binder.Name property provides the name of the member on which the dynamic operation is performed.
            For example, for the statement sampleObject.SampleMethod(100), where sampleObject is an instance of the
            class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleMethod".
            The binder.IgnoreCase property specifies whether the member name is case-sensitive.
            </param>
            <param name="args">
            The arguments that are passed to the object member during the invoke operation. For example,
            for the statement sampleObject.SampleMethod(100), where sampleObject is derived from the
            <see cref="T:System.Dynamic.DynamicObject"/> class, the first argument to <paramref name="args"/> is equal to 100.
            </param>
            <param name="result">The result of the member invocation.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time
            binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Dynamic method is called with non-named argument.
            All parameters must be passed as name arguments to API calls.
            - or -
            The dynamic method name was not in the correct format.
            All API function calls must be in the format 'FunctionName###' where the optional ###'s represent a version number.
            </exception>
            <exception cref="T:System.ArgumentException">
            The reserved named parameter 'secure' was not a boolean value.
            This parameter is used when requests must go through the secure API.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The function version number specified was out of range.
            </exception>
        </member>
        <member name="T:SteamKit2.WebAPI.AsyncInterface">
            <summary>
            Represents a single interface that exists within the Web API.
            This is a dynamic object that allows function calls to interfaces with minimal code.
            This version of the <see cref="T:SteamKit2.WebAPI.Interface"/> class makes use of TPL Tasks to provide an asynchronous API.
            </summary>
        </member>
        <member name="M:SteamKit2.WebAPI.AsyncInterface.Call(System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Boolean)">
            <summary>
            Manually calls the specified Web API function with the provided details.
            </summary>
            <param name="func">The function name to call.</param>
            <param name="version">The version of the function to call.</param>
            <param name="args">A dictionary of string key value pairs representing arguments to be passed to the API.</param>
            <param name="method">The http request method. Either "POST" or "GET".</param>
            <param name="secure">if set to <c>true</c> this method will be called through the secure API.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that contains a <see cref="T:SteamKit2.KeyValue"/> object representing the results of the Web API call.</returns>
            <exception cref="T:System.ArgumentNullException">The function name or request method provided were <c>null</c>.</exception>
            <exception cref="T:System.Net.WebException">An network error occurred when performing the request.</exception>
            <exception cref="T:System.IO.InvalidDataException">An error occured when parsing the response from the WebAPI.</exception>
        </member>
        <member name="M:SteamKit2.WebAPI.AsyncInterface.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SteamKit2.WebAPI.AsyncInterface.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that invoke a member.
            Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can
            override this method to specify dynamic behavior for operations such as calling a method.
            This method should not be called directly, it is  called through dynamic method calls.
            </summary>
            <param name="binder">
            Provides information about the dynamic operation.
            The binder.Name property provides the name of the member on which the dynamic operation is performed.
            For example, for the statement sampleObject.SampleMethod(100), where sampleObject is an instance of the
            class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleMethod".
            The binder.IgnoreCase property specifies whether the member name is case-sensitive.
            </param>
            <param name="args">
            The arguments that are passed to the object member during the invoke operation. For example,
            for the statement sampleObject.SampleMethod(100), where sampleObject is derived from the
            <see cref="T:System.Dynamic.DynamicObject"/> class, the first argument to <paramref name="args"/> is equal to 100.
            </param>
            <param name="result">The result of the member invocation.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time
            binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Dynamic method is called with non-named argument.
            All parameters must be passed as name arguments to API calls.
            - or -
            The dynamic method name was not in the correct format.
            All API function calls must be in the format 'FunctionName###' where the optional ###'s represent a version number.
            </exception>
            <exception cref="T:System.ArgumentException">
            The reserved named parameter 'secure' was not a boolean value.
            This parameter is used when requests must go through the secure API.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The function version number specified was out of range.
            </exception>
        </member>
        <member name="M:SteamKit2.WebAPI.GetInterface(System.String,System.String)">
            <summary>
            Retreives a dynamic handler capable of interacting with the specified interface on the Web API.
            </summary>
            <param name="iface">The interface to retrieve a handler for.</param>
            <param name="apiKey">An optional API key to be used for authorized requests.</param>
            <returns>A dynamic <see cref="T:SteamKit2.WebAPI.Interface"/> object to interact with the Web API.</returns>
        </member>
        <member name="M:SteamKit2.WebAPI.GetAsyncInterface(System.String,System.String)">
            <summary>
            Retreives a dynamic handler capable of interacting with the specified interface on the Web API.
            </summary>
            <param name="iface">The interface to retrieve a handler for.</param>
            <param name="apiKey">An optional API key to be used for authorized requests.</param>
            <returns>A dynamic <see cref="T:SteamKit2.WebAPI.AsyncInterface"/> object to interact with the Web API.</returns>
        </member>
        <member name="T:SteamKit2.GlobalID">
            <summary>
            Represents a globally unique identifier within the Steam network.
            Guaranteed to be unique across all racks and servers for a given Steam universe.
            </summary>
        </member>
        <member name="M:SteamKit2.GlobalID.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.GlobalID"/> class.
            </summary>
        </member>
        <member name="M:SteamKit2.GlobalID.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.GlobalID"/> class.
            </summary>
            <param name="gid">The GID value.</param>
        </member>
        <member name="M:SteamKit2.GlobalID.op_Implicit(SteamKit2.GlobalID)~System.UInt64">
            <summary>
            Performs an implicit conversion from <see cref="T:SteamKit2.GlobalID"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="gid">The gid.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SteamKit2.GlobalID.op_Implicit(System.UInt64)~SteamKit2.GlobalID">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:SteamKit2.GlobalID"/>.
            </summary>
            <param name="gid">The gid.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="P:SteamKit2.GlobalID.SequentialCount">
            <summary>
            Gets or sets the sequential count for this GID.
            </summary>
            <value>
            The sequential count.
            </value>
        </member>
        <member name="P:SteamKit2.GlobalID.StartTime">
            <summary>
            Gets or sets the start time of the server that generated this GID.
            </summary>
            <value>
            The start time.
            </value>
        </member>
        <member name="P:SteamKit2.GlobalID.ProcessID">
            <summary>
            Gets or sets the process ID of the server that generated this GID.
            </summary>
            <value>
            The process ID.
            </value>
        </member>
        <member name="P:SteamKit2.GlobalID.BoxID">
            <summary>
            Gets or sets the box ID of the server that generated this GID.
            </summary>
            <value>
            The box ID.
            </value>
        </member>
        <member name="P:SteamKit2.GlobalID.Value">
            <summary>
            Gets or sets the entire 64bit value of this GID.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:SteamKit2.GlobalID.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SteamKit2.GlobalID.Equals(SteamKit2.GlobalID)">
            <summary>
            Determines whether the specified <see cref="T:SteamKit2.GlobalID"/> is equal to this instance.
            </summary>
            <param name="gid">The <see cref="T:SteamKit2.GlobalID"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:SteamKit2.GlobalID"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SteamKit2.GlobalID.op_Equality(SteamKit2.GlobalID,SteamKit2.GlobalID)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">The left side GID.</param>
            <param name="b">The right side GID.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SteamKit2.GlobalID.op_Inequality(SteamKit2.GlobalID,SteamKit2.GlobalID)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">The left side GID.</param>
            <param name="b">The right side GID.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SteamKit2.GlobalID.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SteamKit2.GlobalID.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:SteamKit2.UGCHandle">
            <summary>
            Represents a single unique handle to a piece of User Generated Content.
            </summary>
        </member>
        <member name="M:SteamKit2.UGCHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.UGCHandle"/> class.
            </summary>
        </member>
        <member name="M:SteamKit2.UGCHandle.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.UGCHandle"/> class.
            </summary>
            <param name="ugcId">The UGC ID.</param>
        </member>
        <member name="M:SteamKit2.UGCHandle.op_Implicit(SteamKit2.UGCHandle)~System.UInt64">
            <summary>
            Performs an implicit conversion from <see cref="T:SteamKit2.UGCHandle"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="handle">The UGC handle.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SteamKit2.UGCHandle.op_Implicit(System.UInt64)~SteamKit2.UGCHandle">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:SteamKit2.UGCHandle"/>.
            </summary>
            <param name="ugcId">The UGC ID.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:SteamKit2.DepotManifest">
            <summary>
            Represents a Steam3 depot manifest.
            </summary>
        </member>
        <member name="T:SteamKit2.DepotManifest.ChunkData">
            <summary>
            Represents a single chunk within a file.
            </summary>
        </member>
        <member name="P:SteamKit2.DepotManifest.ChunkData.ChunkID">
            <summary>
            Gets or sets the SHA-1 hash chunk id.
            </summary>
        </member>
        <member name="P:SteamKit2.DepotManifest.ChunkData.Checksum">
            <summary>
            Gets or sets the expected Adler32 checksum of this chunk.
            </summary>
        </member>
        <member name="P:SteamKit2.DepotManifest.ChunkData.Offset">
            <summary>
            Gets or sets the chunk offset.
            </summary>
        </member>
        <member name="P:SteamKit2.DepotManifest.ChunkData.CompressedLength">
            <summary>
            Gets or sets the compressed length of this chunk.
            </summary>
        </member>
        <member name="P:SteamKit2.DepotManifest.ChunkData.UncompressedLength">
            <summary>
            Gets or sets the decompressed length of this chunk.
            </summary>
        </member>
        <member name="M:SteamKit2.DepotManifest.ChunkData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.DepotManifest.ChunkData"/> class.
            </summary>
        </member>
        <member name="T:SteamKit2.DepotManifest.FileData">
            <summary>
            Represents a single file within a manifest.
            </summary>
        </member>
        <member name="P:SteamKit2.DepotManifest.FileData.FileName">
            <summary>
            Gets the name of the file.
            </summary>
        </member>
        <member name="P:SteamKit2.DepotManifest.FileData.Chunks">
            <summary>
            Gets the chunks that this file is composed of.
            </summary>
        </member>
        <member name="P:SteamKit2.DepotManifest.FileData.Flags">
            <summary>
            Gets the file flags
            </summary>
        </member>
        <member name="P:SteamKit2.DepotManifest.FileData.TotalSize">
            <summary>
            Gets the total size of this file.
            </summary>
        </member>
        <member name="P:SteamKit2.DepotManifest.FileData.FileHash">
            <summary>
            Gets the hash of this file.
            </summary>
        </member>
        <member name="P:SteamKit2.DepotManifest.Files">
            <summary>
            Gets the list of files within this manifest.
            </summary>
        </member>
        <member name="P:SteamKit2.DepotManifest.FilenamesEncrypted">
            <summary>
            Gets a value indicating whether filenames within this depot are encrypted.
            </summary>
            <value>
              <c>true</c> if the filenames are encrypted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SteamKit2.DepotManifest.DecryptFilenames(System.Byte[])">
            <summary>
            Attempts to decrypts file names with the given encryption key.
            </summary>
            <param name="encryptionKey">The encryption key.</param>
            <returns><c>true</c> if the file names were successfully decrypted; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:SteamKit2.JobID">
            <summary>
            Represents an identifier of a network task known as a job.
            </summary>
        </member>
        <member name="F:SteamKit2.JobID.Invalid">
            <summary>
            Represents an invalid JobID.
            </summary>
        </member>
        <member name="M:SteamKit2.JobID.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.JobID"/> class.
            </summary>
        </member>
        <member name="M:SteamKit2.JobID.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.JobID"/> class.
            </summary>
            <param name="jobId">The Job ID to initialize this instance with.</param>
        </member>
        <member name="M:SteamKit2.JobID.op_Implicit(SteamKit2.JobID)~System.UInt64">
            <summary>
            Performs an implicit conversion from <see cref="T:SteamKit2.JobID"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="jobId">The Job ID.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SteamKit2.JobID.op_Implicit(System.UInt64)~SteamKit2.JobID">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:SteamKit2.JobID"/>.
            </summary>
            <param name="jobId">The Job ID.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SteamKit2.JobID.op_Implicit(SteamKit2.AsyncJob)~SteamKit2.JobID">
            <summary>
            Performs an implicit conversion from <see cref="T:SteamKit2.AsyncJob"/> to <see cref="T:SteamKit2.JobID"/>.
            </summary>
            <param name="asyncJob">The asynchronous job.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:SteamKit2.AsyncJob">
            <summary>
            The base class for awaitable versions of a <see cref="P:SteamKit2.AsyncJob.JobID"/>.
            Should not be used or constructed directly, but rather with <see cref="T:SteamKit2.AsyncJob`1"/>.
            </summary>
        </member>
        <member name="P:SteamKit2.AsyncJob.JobID">
            <summary>
            Gets the <see cref="P:SteamKit2.AsyncJob.JobID"/> for this job.
            </summary>
        </member>
        <member name="P:SteamKit2.AsyncJob.Timeout">
            <summary>
            Gets or sets the period of time before this job will be considered timed out and will be canceled. By default this is 10 seconds.
            </summary>
        </member>
        <member name="M:SteamKit2.AsyncJob.AddResult(SteamKit2.CallbackMsg)">
            <summary>
            Adds a callback to the async job's result set.
            </summary>
            <param name="callback">The callback.</param>
            <returns><c>true</c> if this result completes the set; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SteamKit2.AsyncJob.SetFailed(System.Boolean)">
            <summary>
            Sets this job as failed, either remotely or due to a message timeout.
            </summary>
            <param name="dueToRemoteFailure">
            If set to <c>true</c> this job is marked as failed because Steam informed us of a job failure;
            otherwise, this job has failed due to a message timeout.
            </param>
        </member>
        <member name="M:SteamKit2.AsyncJob.Heartbeat">
            <summary>
            Marks this job as having received a heartbeat and extends the job's timeout.
            </summary>
        </member>
        <member name="T:SteamKit2.AsyncJob`1">
            <summary>
            Represents an awaitable version of a <see cref="T:SteamKit2.JobID"/>.
            Can either be converted to a TPL <see cref="T:System.Threading.Tasks.Task"/> with <see cref="M:SteamKit2.AsyncJob`1.ToTask"/> or can be awaited directly.
            </summary>
            <typeparam name="T">The callback type that will be returned by this async job.</typeparam>
        </member>
        <member name="M:SteamKit2.AsyncJob`1.#ctor(SteamKit2.SteamClient,SteamKit2.JobID)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.AsyncJob`1" /> class.
            </summary>
            <param name="client">The <see cref="T:SteamKit2.SteamClient"/> that this job will be associated with.</param>
            <param name="jobId">The Job ID value associated with this async job.</param>
        </member>
        <member name="M:SteamKit2.AsyncJob`1.ToTask">
            <summary>
            Converts this <see cref="T:SteamKit2.AsyncJob`1"/> instance into a TPL <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SteamKit2.AsyncJob`1.GetAwaiter">
            <summary>Gets an awaiter used to await this <see cref="T:SteamKit2.AsyncJob`1"/>.</summary>
            <returns>An awaiter instance.</returns>
            <remarks>This method is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="M:SteamKit2.AsyncJob`1.AddResult(SteamKit2.CallbackMsg)">
            <summary>
            Adds a callback to the async job's result set. For an <see cref="T:SteamKit2.AsyncJob`1"/>, this always completes the set.
            </summary>
            <param name="callback">The callback.</param>
            <returns>Always <c>true</c>.</returns>
        </member>
        <member name="M:SteamKit2.AsyncJob`1.SetFailed(System.Boolean)">
            <summary>
            Sets this job as failed, either remotely or due to a message timeout.
            </summary>
            <param name="dueToRemoteFailure">
            If set to <c>true</c> this job is marked as failed because Steam informed us of a job failure;
            otherwise, this job has failed due to a message timeout.
            </param>
        </member>
        <member name="T:SteamKit2.AsyncJobMultiple`1">
            <summary>
            Represents an awaitable version of a <see cref="T:SteamKit2.JobID"/>.
            Can either be converted to a TPL <see cref="T:System.Threading.Tasks.Task"/> with <see cref="M:SteamKit2.AsyncJobMultiple`1.ToTask"/> or can be awaited directly.
            This type of async job can contain multiple callback results.
            </summary>
            <typeparam name="T">The callback type that will be returned by this async job.</typeparam>
        </member>
        <member name="T:SteamKit2.AsyncJobMultiple`1.ResultSet">
            <summary>
            The set of callback results for an <see cref="T:SteamKit2.AsyncJobMultiple`1"/>.
            </summary>
        </member>
        <member name="P:SteamKit2.AsyncJobMultiple`1.ResultSet.Complete">
            <summary>
            Gets a value indicating whether this <see cref="T:SteamKit2.AsyncJobMultiple`1.ResultSet" /> is complete and contains every result sent by Steam.
            </summary>
        </member>
        <member name="P:SteamKit2.AsyncJobMultiple`1.ResultSet.Failed">
            <summary>
            Gets a value indicating whether the parent <see cref="T:SteamKit2.AsyncJobMultiple`1" /> received an incomplete result set and then encountered a remote failure.
            </summary>
        </member>
        <member name="P:SteamKit2.AsyncJobMultiple`1.ResultSet.Results">
            <summary>
            Gets a read only collection of callback results for this async job.
            </summary>
        </member>
        <member name="M:SteamKit2.AsyncJobMultiple`1.#ctor(SteamKit2.SteamClient,SteamKit2.JobID,System.Predicate{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.AsyncJob`1" /> class.
            </summary>
            <param name="client">The <see cref="T:SteamKit2.SteamClient"/> that this job will be associated with.</param>
            <param name="jobId">The Job ID value associated with this async job.</param>
            <param name="finishCondition">The condition that must be fulfilled for the result set to be considered complete.</param>
        </member>
        <member name="M:SteamKit2.AsyncJobMultiple`1.ToTask">
            <summary>
            Converts this <see cref="T:SteamKit2.AsyncJob`1"/> instance into a TPL <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SteamKit2.AsyncJobMultiple`1.GetAwaiter">
            <summary>Gets an awaiter used to await this <see cref="T:SteamKit2.AsyncJob`1"/>.</summary>
            <returns>An awaiter instance.</returns>
            <remarks>This method is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="M:SteamKit2.AsyncJobMultiple`1.AddResult(SteamKit2.CallbackMsg)">
            <summary>
            Adds a callback to the async job's result set.
            </summary>
            <param name="callback">The callback.</param>
            <returns><c>true</c> if this result completes the set; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SteamKit2.AsyncJobMultiple`1.SetFailed(System.Boolean)">
            <summary>
            Sets this job as failed, either remotely or due to a message timeout.
            </summary>
            <param name="dueToRemoteFailure">
            If set to <c>true</c> this job is marked as failed because Steam informed us of a job failure;
            otherwise, this job has failed due to a message timeout.
            </param>
        </member>
        <member name="T:SteamKit2.MessageObject">
            <summary>
            Represents a <see cref="T:SteamKit2.KeyValue"/> backed MessageObject structure, which are often sent by the Steam servers.
            </summary>
        </member>
        <member name="P:SteamKit2.MessageObject.KeyValues">
            <summary>
            Gets the inner <see cref="T:SteamKit2.KeyValue"/> object.
            </summary>
        </member>
        <member name="M:SteamKit2.MessageObject.#ctor(SteamKit2.KeyValue)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.MessageObject"/> class, using the provided KeyValues object.
            </summary>
            <param name="keyValues">The KeyValue backing store for this message object.</param>
        </member>
        <member name="M:SteamKit2.MessageObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.MessageObject"/> class with an empty inner KeyValues.
            </summary>
        </member>
        <member name="M:SteamKit2.MessageObject.ReadFromStream(System.IO.Stream)">
            <summary>
            Populates this MessageObject instance from the data inside the given stream.
            </summary>
            <param name="stream">The stream to load data from.</param>
            <returns><c>true</c> on success; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SteamKit2.MessageObject.WriteToStream(System.IO.Stream)">
            <summary>
            Writes this MessageObject instance to the given stream.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="T:SteamKit2.UInt64Handle">
            <summary>
            The base class used for wrapping common ulong types, to introduce type safety and distinguish between common types.
            </summary>
        </member>
        <member name="P:SteamKit2.UInt64Handle.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:SteamKit2.UInt64Handle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.UInt64Handle"/> class.
            </summary>
        </member>
        <member name="M:SteamKit2.UInt64Handle.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.UInt64Handle"/> class.
            </summary>
            <param name="value">The value to initialize this handle to.</param>
        </member>
        <member name="M:SteamKit2.UInt64Handle.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SteamKit2.UInt64Handle.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SteamKit2.UInt64Handle.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SteamKit2.UInt64Handle.Equals(SteamKit2.UInt64Handle)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="T:SteamKit2.PublishedFileID">
            <summary>
            Represents a handle to a published file on the Steam workshop.
            </summary>
        </member>
        <member name="M:SteamKit2.PublishedFileID.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.PublishedFileID"/> class.
            </summary>
            <param name="fileId">The file id.</param>
        </member>
        <member name="M:SteamKit2.PublishedFileID.op_Implicit(SteamKit2.PublishedFileID)~System.UInt64">
            <summary>
            Performs an implicit conversion from <see cref="T:SteamKit2.PublishedFileID"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="file">The published file.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SteamKit2.PublishedFileID.op_Implicit(System.UInt64)~SteamKit2.PublishedFileID">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:SteamKit2.PublishedFileID"/>.
            </summary>
            <param name="fileId">The file id.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SteamKit2.PublishedFileID.op_Equality(SteamKit2.PublishedFileID,SteamKit2.PublishedFileID)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">The first published file.</param>
            <param name="b">The second published file.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SteamKit2.PublishedFileID.op_Inequality(SteamKit2.PublishedFileID,SteamKit2.PublishedFileID)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">The first published file.</param>
            <param name="b">The second published file.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:SteamKit2.IDebugNetworkListener">
            <summary>
            This is a debug utility, do not use it to implement your business logic.
            
            This interface is used for logging network messages sent to and received from the Steam server that the client is connected to.
            </summary>
        </member>
        <member name="M:SteamKit2.IDebugNetworkListener.OnIncomingNetworkMessage(SteamKit2.EMsg,System.Byte[])">
            <summary>
            Called when a packet is received from the Steam server.
            </summary>
            <param name="msgType">Network message type of this packet message.</param>
            <param name="data">Raw packet data that was received.</param>
        </member>
        <member name="M:SteamKit2.IDebugNetworkListener.OnOutgoingNetworkMessage(SteamKit2.EMsg,System.Byte[])">
            <summary>
            Called when a packet is about to be sent to the Steam server.
            </summary>
            <param name="msgType">Network message type of this packet message.</param>
            <param name="data">Raw packet data that will be sent.</param>
        </member>
        <member name="T:SteamKit2.NetHookNetworkListener">
             <summary>
             Dump any network messages sent to and received from the Steam server that the client is connected to.
             These messages are dumped to file, and can be analyzed further with NetHookAnalyzer, a hex editor, or your own purpose-built tools.
            
             Be careful with this, sensitive data may be written to the disk (such as your Steam password).
             </summary>
        </member>
        <member name="M:SteamKit2.NetHookNetworkListener.#ctor">
            <summary>
            Will create a folder in path "%assembly%/nethook/%currenttime%/"
            </summary>
        </member>
        <member name="M:SteamKit2.NetHookNetworkListener.#ctor(System.String)">
            <summary>
            Log to your own folder.
            </summary>
            <param name="path">Path to folder.</param>
        </member>
        <member name="M:SteamKit2.NetHookNetworkListener.OnIncomingNetworkMessage(SteamKit2.EMsg,System.Byte[])">
            <summary>
            Called when a packet is received from the Steam server.
            </summary>
            <param name="msgType">Network message type of this packet message.</param>
            <param name="data">Raw packet data that was received.</param>
        </member>
        <member name="M:SteamKit2.NetHookNetworkListener.OnOutgoingNetworkMessage(SteamKit2.EMsg,System.Byte[])">
            <summary>
            Called when a packet is about to be sent to the Steam server.
            </summary>
            <param name="msgType">Network message type of this packet message.</param>
            <param name="data">Raw packet data that will be sent.</param>
        </member>
        <member name="P:SteamKit2.UdpPacket.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SteamKit2.UdpPacket.#ctor(System.IO.MemoryStream)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.UdpPacket"/> class with
            information from the memory stream.
            
            Header is populated from the MemoryStream
            </summary>
            <param name="ms">The stream containing the packet and it's payload data.</param>
        </member>
        <member name="M:SteamKit2.UdpPacket.#ctor(SteamKit2.EUdpPacketType)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.UdpPacket"/> class, with
            no payload.
            
            Header must be populated manually.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:SteamKit2.UdpPacket.#ctor(SteamKit2.EUdpPacketType,System.IO.MemoryStream)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.UdpPacket"/> class, of the
            specified type containing the specified payload.
            
            Header must be populated manually.
            </summary>
            <param name="type">The type.</param>
            <param name="payload">The payload.</param>
        </member>
        <member name="M:SteamKit2.UdpPacket.#ctor(SteamKit2.EUdpPacketType,System.IO.MemoryStream,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.UdpPacket"/> class, of the
            specified type containing the first 'length' bytes of specified payload.
            
            Header must be populated manually.
            </summary>
            <param name="type">The type.</param>
            <param name="payload">The payload.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:SteamKit2.UdpPacket.SetPayload(System.IO.MemoryStream)">
            <summary>
            Sets the payload
            </summary>
            <param name="ms">The payload to copy.</param>
        </member>
        <member name="M:SteamKit2.UdpPacket.SetPayload(System.IO.MemoryStream,System.Int64)">
            <summary>
            Sets the payload.
            </summary>
            <param name="ms">The payload.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:SteamKit2.UdpPacket.GetData">
            <summary>
            Serializes the UdpPacket.
            </summary>
            <returns>The serialized packet.</returns>
        </member>
        <member name="T:SteamKit2.SteamApps">
            <summary>
            This handler is used for interacting with apps and packages on the Steam network.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.LicenseListCallback">
            <summary>
            This callback is fired during logon, informing the client of it's available licenses.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.LicenseListCallback.License">
            <summary>
            Represents a granted license (steam3 subscription) for one or more games.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.LicenseListCallback.License.PackageID">
            <summary>
            Gets the package ID used to identify the license.
            </summary>
            <value>The package ID.</value>
        </member>
        <member name="P:SteamKit2.SteamApps.LicenseListCallback.License.LastChangeNumber">
            <summary>
            Gets the last change number for this license.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.LicenseListCallback.License.TimeCreated">
            <summary>
            Gets the time the license was created.
            </summary>
            <value>The time created.</value>
        </member>
        <member name="P:SteamKit2.SteamApps.LicenseListCallback.License.TimeNextProcess">
            <summary>
            Gets the next process time for the license.
            </summary>
            <value>The next process time.</value>
        </member>
        <member name="P:SteamKit2.SteamApps.LicenseListCallback.License.MinuteLimit">
            <summary>
            Gets the minute limit of the license.
            </summary>
            <value>The minute limit.</value>
        </member>
        <member name="P:SteamKit2.SteamApps.LicenseListCallback.License.MinutesUsed">
            <summary>
            Gets the minutes used of the license.
            </summary>
            <value>The minutes used.</value>
        </member>
        <member name="P:SteamKit2.SteamApps.LicenseListCallback.License.PaymentMethod">
            <summary>
            Gets the payment method used when the license was created.
            </summary>
            <value>The payment method.</value>
        </member>
        <member name="P:SteamKit2.SteamApps.LicenseListCallback.License.LicenseFlags">
            <summary>
            Gets the license flags.
            </summary>
            <value>The license flags.</value>
        </member>
        <member name="P:SteamKit2.SteamApps.LicenseListCallback.License.PurchaseCountryCode">
            <summary>
            Gets the two letter country code where the license was purchased.
            </summary>
            <value>The purchase country code.</value>
        </member>
        <member name="P:SteamKit2.SteamApps.LicenseListCallback.License.LicenseType">
            <summary>
            Gets the type of the license.
            </summary>
            <value>The type of the license.</value>
        </member>
        <member name="P:SteamKit2.SteamApps.LicenseListCallback.License.TerritoryCode">
            <summary>
            Gets the territory code of the license.
            </summary>
            <value>The territory code.</value>
        </member>
        <member name="P:SteamKit2.SteamApps.LicenseListCallback.Result">
            <summary>
            Gets the result of the message.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:SteamKit2.SteamApps.LicenseListCallback.LicenseList">
            <summary>
            Gets the license list.
            </summary>
            <value>The license list.</value>
        </member>
        <member name="T:SteamKit2.SteamApps.FreeLicenseCallback">
            <summary>
            This callback is received in response to calling <see cref="o:SteamApps.RequestFreeLicence"/>, informing the client of newly granted packages, if any.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.FreeLicenseCallback.Result">
            <summary>
            Gets the result of the message.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:SteamKit2.SteamApps.FreeLicenseCallback.GrantedApps">
            <summary>
            Gets the list of granted apps.
            </summary>
            <value>List of granted apps.</value>
        </member>
        <member name="P:SteamKit2.SteamApps.FreeLicenseCallback.GrantedPackages">
            <summary>
            Gets the list of granted packages.
            </summary>
            <value>List of granted packages.</value>
        </member>
        <member name="T:SteamKit2.SteamApps.AppOwnershipTicketCallback">
            <summary>
            This callback is received in response to calling <see cref="M:SteamKit2.SteamApps.GetAppOwnershipTicket(System.UInt32)"/>.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.AppOwnershipTicketCallback.Result">
            <summary>
            Gets the result of requesting the ticket.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.AppOwnershipTicketCallback.AppID">
            <summary>
            Gets the AppID this ticket is for.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.AppOwnershipTicketCallback.Ticket">
            <summary>
            Gets the ticket data.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.AppInfoCallback">
            <summary>
            This callback is received in response to calling <see cref="M:SteamKit2.SteamApps.GetAppInfo(SteamKit2.SteamApps.AppDetails,System.Boolean)"/>.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.AppInfoCallback.App">
            <summary>
            Represents a single app in the info response.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.AppInfoCallback.App.AppInfoStatus">
            <summary>
            The status of a requested app.
            </summary>
        </member>
        <member name="F:SteamKit2.SteamApps.AppInfoCallback.App.AppInfoStatus.OK">
            <summary>
            The information for this app was requested successfully.
            </summary>
        </member>
        <member name="F:SteamKit2.SteamApps.AppInfoCallback.App.AppInfoStatus.Unknown">
            <summary>
            This app is unknown.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.AppInfoCallback.App.Status">
            <summary>
            Gets the status of the app.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.AppInfoCallback.App.AppID">
            <summary>
            Gets the AppID for this app.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.AppInfoCallback.App.ChangeNumber">
            <summary>
            Gets the last change number for this app.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.AppInfoCallback.App.Sections">
            <summary>
            Gets a section data for this app.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.AppInfoCallback.Apps">
            <summary>
            Gets the list of apps this response contains.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.AppInfoCallback.AppsPending">
            <summary>
            Gets the number of apps pending in this response.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.PackageInfoCallback">
            <summary>
            This callback is received in response to calling <see cref="M:SteamKit2.SteamApps.GetPackageInfo(System.UInt32,System.Boolean)"/>.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.PackageInfoCallback.Package">
            <summary>
            Represents a single package in this response.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.PackageInfoCallback.Package.PackageStatus">
            <summary>
            The status of a package.
            </summary>
        </member>
        <member name="F:SteamKit2.SteamApps.PackageInfoCallback.Package.PackageStatus.OK">
            <summary>
            The information for this package was requested successfully.
            </summary>
        </member>
        <member name="F:SteamKit2.SteamApps.PackageInfoCallback.Package.PackageStatus.Unknown">
            <summary>
            This package is unknown.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PackageInfoCallback.Package.Status">
            <summary>
            Gets the status of this package.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PackageInfoCallback.Package.PackageID">
            <summary>
            Gets the PackageID for this package.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PackageInfoCallback.Package.ChangeNumber">
            <summary>
            Gets the last change number for this package.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PackageInfoCallback.Package.Hash">
            <summary>
            Gets a hash of the package data for caching purposes.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PackageInfoCallback.Package.Data">
            <summary>
            Gets the data for this package.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PackageInfoCallback.Packages">
            <summary>
            Gets the list of packages this response contains.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PackageInfoCallback.PackagesPending">
            <summary>
            Gets a count of packages pending in this response.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.AppChangesCallback">
            <summary>
            This callback is received in response to calling <see cref="M:SteamKit2.SteamApps.GetAppChanges(System.UInt32,System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.AppChangesCallback.AppIDs">
            <summary>
            Gets the list of AppIDs that have changed since the last change number request.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.AppChangesCallback.CurrentChangeNumber">
            <summary>
            Gets the current change number.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.AppChangesCallback.ForceFullUpdate">
            <summary>
            Gets a value indicating whether the backend wishes for the client to perform a full update.
            </summary>
            <value>
            	<c>true</c> if the client should perform a full update; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SteamKit2.SteamApps.DepotKeyCallback">
            <summary>
            This callback is recieved in response to calling <see cref="M:SteamKit2.SteamApps.GetDepotDecryptionKey(System.UInt32,System.UInt32)"/>.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.DepotKeyCallback.Result">
            <summary>
            Gets the result of requesting this encryption key.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.DepotKeyCallback.DepotID">
            <summary>
            Gets the DepotID this encryption key is for.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.DepotKeyCallback.DepotKey">
            <summary>
            Gets the encryption key for this depot.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.GameConnectTokensCallback">
            <summary>
            This callback is fired when the client receives a list of game connect tokens.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.GameConnectTokensCallback.TokensToKeep">
            <summary>
            Gets a count of tokens to keep.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.GameConnectTokensCallback.Tokens">
            <summary>
            Gets the list of tokens.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.VACStatusCallback">
            <summary>
            This callback is fired when the client receives it's VAC banned status.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.VACStatusCallback.BannedApps">
            <summary>
            Gets a list of VAC banned apps the client is banned from.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.PICSTokensCallback">
            <summary>
            This callback is fired when the PICS returns access tokens for a list of appids and packageids
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSTokensCallback.PackageTokensDenied">
            <summary>
            Gets a list of denied package tokens
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSTokensCallback.AppTokensDenied">
            <summary>
            Gets a list of denied app tokens
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSTokensCallback.PackageTokens">
            <summary>
            Dictionary containing requested package tokens
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSTokensCallback.AppTokens">
            <summary>
            Dictionary containing requested package tokens
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.PICSChangesCallback">
            <summary>
            This callback is fired when the PICS returns the changes since the last change number
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.PICSChangesCallback.PICSChangeData">
            <summary>
            Holds the change data for a single app or package
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSChangesCallback.PICSChangeData.ID">
            <summary>
            App or package ID this change data represents
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSChangesCallback.PICSChangeData.ChangeNumber">
            <summary>
            Current change number of this app
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSChangesCallback.PICSChangeData.NeedsToken">
            <summary>
            Signals if an access token is needed for this request
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSChangesCallback.LastChangeNumber">
            <summary>
            Supplied change number for the request
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSChangesCallback.CurrentChangeNumber">
            <summary>
            Gets the current change number
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSChangesCallback.RequiresFullUpdate">
            <summary>
            If this update requires a full update of the information
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSChangesCallback.PackageChanges">
            <summary>
            Dictionary containing requested package tokens
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSChangesCallback.AppChanges">
            <summary>
            Dictionary containing requested package tokens
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.PICSProductInfoCallback">
            <summary>
            This callback is fired when the PICS returns the product information requested
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.PICSProductInfoCallback.PICSProductInfo">
            <summary>
            Represents the information for a single app or package
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSProductInfoCallback.PICSProductInfo.ID">
            <summary>
            Gets the ID of the app or package
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSProductInfoCallback.PICSProductInfo.ChangeNumber">
            <summary>
            Gets the current change number for the app or package
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSProductInfoCallback.PICSProductInfo.MissingToken">
            <summary>
            Gets if an access token was required for the request
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSProductInfoCallback.PICSProductInfo.SHAHash">
            <summary>
            Gets the hash of the content
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSProductInfoCallback.PICSProductInfo.KeyValues">
            <summary>
            Gets the KeyValue info
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSProductInfoCallback.PICSProductInfo.OnlyPublic">
            <summary>
            For an app request, returns if only the public information was requested
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSProductInfoCallback.PICSProductInfo.UseHttp">
            <summary>
            Whether or not to use HTTP to load the KeyValues data.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSProductInfoCallback.PICSProductInfo.HttpUri">
            <summary>
            For an app metadata-only request, returns the Uri for HTTP appinfo requests.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSProductInfoCallback.MetaDataOnly">
            <summary>
            Gets if this response contains only product metadata
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSProductInfoCallback.ResponsePending">
            <summary>
            Gets if there are more product information responses pending
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSProductInfoCallback.UnknownPackages">
            <summary>
            Gets a list of unknown package ids
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSProductInfoCallback.UnknownApps">
            <summary>
            Gets a list of unknown app ids
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSProductInfoCallback.Apps">
            <summary>
            Dictionary containing requested app info
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSProductInfoCallback.Packages">
            <summary>
            Dictionary containing requested package info
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.GuestPassListCallback">
            <summary>
            This callback is received when the list of guest passes is updated.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.GuestPassListCallback.Result">
            <summary>
            Result of the operation
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.GuestPassListCallback.CountGuestPassesToGive">
            <summary>
            Number of guest passes to be given out
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.GuestPassListCallback.CountGuestPassesToRedeem">
            <summary>
            Number of guest passes to be redeemed
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.GuestPassListCallback.GuestPasses">
            <summary>
            Guest pass list
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.SendGuestPassCallback">
            <summary>
            This callback is received when a guest pass has been sent
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.SendGuestPassCallback.Result">
            <summary>
            Result of the operation
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.CDNAuthTokenCallback">
            <summary>
            This callback is received when a CDN auth token is received
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.CDNAuthTokenCallback.Result">
            <summary>
            Result of the operation
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.CDNAuthTokenCallback.Token">
            <summary>
            CDN auth token
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.CDNAuthTokenCallback.Expiration">
            <summary>
            Token expiration date
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.CheckAppBetaPasswordCallback">
            <summary>
            This callback is received when a beta password check has been completed
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.CheckAppBetaPasswordCallback.Result">
            <summary>
            Result of the operation
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.CheckAppBetaPasswordCallback.BetaPasswords">
            <summary>
            Map of beta names to their encryption keys
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.AppDetails">
            <summary>
            Represents app request details when calling <see cref="M:SteamKit2.SteamApps.GetAppInfo(SteamKit2.SteamApps.AppDetails,System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.AppDetails.AppID">
            <summary>
            Gets or sets the AppID for this request.
            </summary>
            <value>The AppID.</value>
        </member>
        <member name="P:SteamKit2.SteamApps.AppDetails.SectionFlags">
            <summary>
            Gets or sets the section flags for this request.
            </summary>
            <value>The section flags.</value>
        </member>
        <member name="P:SteamKit2.SteamApps.AppDetails.SectionCRC">
            <summary>
            Gets the Section CRC list for this request.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamApps.AppDetails.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.SteamApps.AppDetails"/> class.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.PICSRequest">
            <summary>
            Represents a PICS request used for <see cref="M:SteamKit2.SteamApps.PICSGetProductInfo(System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Boolean,System.Boolean)"/>
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSRequest.ID">
            <summary>
            Gets or sets the ID of the app or package being requested
            </summary>
            <value>The ID</value>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSRequest.AccessToken">
            <summary>
            Gets or sets the access token associated with the request
            </summary>
            <value>The access token</value>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSRequest.Public">
            <summary>
            Requests only public app info
            </summary>
            <value>The flag specifying if only public data is requested</value>
        </member>
        <member name="M:SteamKit2.SteamApps.PICSRequest.#ctor">
            <summary>
            Instantiate an empty PICS product info request
            </summary>
        </member>
        <member name="M:SteamKit2.SteamApps.PICSRequest.#ctor(System.UInt32)">
            <summary>
             Instantiate a PICS product info request for a given app or package id
            </summary>
            <param name="id">App or package ID</param>
        </member>
        <member name="M:SteamKit2.SteamApps.PICSRequest.#ctor(System.UInt32,System.UInt64,System.Boolean)">
            <summary>
            Instantiate a PICS product info request for a given app or package id and an access token
            </summary>
            <param name="id">App or package ID</param>
            <param name="access_token">PICS access token</param>
            <param name="only_public">Get only public info</param>
        </member>
        <member name="M:SteamKit2.SteamApps.GetAppOwnershipTicket(System.UInt32)">
            <summary>
            Requests an app ownership ticket for the specified AppID.
            Results are returned in a <see cref="T:SteamKit2.SteamApps.AppOwnershipTicketCallback"/> callback.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            </summary>
            <param name="appid">The appid to request the ownership ticket of.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamApps.AppOwnershipTicketCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamApps.GetAppInfo(SteamKit2.SteamApps.AppDetails,System.Boolean)">
            <summary>
            Requests app information for a single app. Use the overload for requesting information on a batch of apps.
            Results are returned in a <see cref="T:SteamKit2.SteamApps.AppInfoCallback"/> callback.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            
            Consider using <see cref="o:SteamApps.PICSGetProductInfo"/> instead.
            </summary>
            <param name="app">The app to request information for.</param>
            <param name="supportsBatches">if set to <c>true</c>, the request supports batches.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamApps.AppInfoCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamApps.GetAppInfo(System.UInt32,System.Boolean)">
            <summary>
            Requests app information for a single app. Use the overload for requesting information on a batch of apps.
            Results are returned in a <see cref="T:SteamKit2.SteamApps.AppInfoCallback"/> callback.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            
            Consider using <see cref="o:SteamApps.PICSGetProductInfo"/> instead.
            </summary>
            <param name="app">The app to request information for.</param>
            <param name="supportsBatches">if set to <c>true</c>, the request supports batches.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamApps.AppInfoCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamApps.GetAppInfo(System.Collections.Generic.IEnumerable{System.UInt32},System.Boolean)">
            <summary>
            Requests app information for a list of apps.
            Results are returned in a <see cref="T:SteamKit2.SteamApps.AppInfoCallback"/> callback.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            
            Consider using <see cref="o:SteamApps.PICSGetProductInfo"/> instead.
            </summary>
            <param name="apps">The apps to request information for.</param>
            <param name="supportsBatches">if set to <c>true</c>, the request supports batches.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamApps.AppInfoCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamApps.GetAppInfo(System.Collections.Generic.IEnumerable{SteamKit2.SteamApps.AppDetails},System.Boolean)">
            <summary>
            Requests app information for a list of apps.
            Results are returned in a <see cref="T:SteamKit2.SteamApps.AppInfoCallback"/> callback.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            
            Consider using <see cref="o:SteamApps.PICSGetProductInfo"/> instead.
            </summary>
            <param name="apps">The apps to request information for.</param>
            <param name="supportsBatches">if set to <c>true</c>, the request supports batches.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamApps.AppInfoCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamApps.GetPackageInfo(System.UInt32,System.Boolean)">
            <summary>
            Requests package information for a single package. Use the overload for requesting information on a batch of packages.
            Results are returned in a <see cref="T:SteamKit2.SteamApps.PackageInfoCallback"/> callback.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            
            Consider using <see cref="o:SteamApps.PICSGetProductInfo"/> instead.
            </summary>
            <param name="packageId">The package id to request information for.</param>
            <param name="metaDataOnly">if set to <c>true</c>, request metadata only.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamApps.PackageInfoCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamApps.GetPackageInfo(System.Collections.Generic.IEnumerable{System.UInt32},System.Boolean)">
            <summary>
            Requests package information for a list of packages.
            Results are returned in a <see cref="T:SteamKit2.SteamApps.PackageInfoCallback"/> callback.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            
            Consider using <see cref="o:SteamApps.PICSGetProductInfo"/> instead.
            </summary>
            <param name="packageId">The packages to request information for.</param>
            <param name="metaDataOnly">if set to <c>true</c> to request metadata only.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamApps.PackageInfoCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamApps.GetAppChanges(System.UInt32,System.Boolean)">
            <summary>
            Requests a list of app changes since the last provided change number value.
            Results are returned in a <see cref="T:SteamKit2.SteamApps.AppChangesCallback"/> callback.
            
            Consider using <see cref="M:SteamKit2.SteamApps.PICSGetChangesSince(System.UInt32,System.Boolean,System.Boolean)"/> instead.
            </summary>
            <param name="lastChangeNumber">The last change number value.</param>
            <param name="sendChangelist">if set to <c>true</c>, request a change list.</param>
        </member>
        <member name="M:SteamKit2.SteamApps.GetDepotDecryptionKey(System.UInt32,System.UInt32)">
            <summary>
            Request the depot decryption key for a specified DepotID.
            Results are returned in a <see cref="T:SteamKit2.SteamApps.DepotKeyCallback"/> callback.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            </summary>
            <param name="depotid">The DepotID to request a decryption key for.</param>
            <param name="appid">The AppID to request the decryption key for.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamApps.DepotKeyCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamApps.PICSGetAccessTokens(System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            Request PICS access tokens for an app or package.
            Results are returned in a <see cref="T:SteamKit2.SteamApps.PICSTokensCallback"/> callback.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            </summary>
            <param name="app">App id to request access token for.</param>
            <param name="package">Package id to request access token for.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamApps.PICSTokensCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamApps.PICSGetAccessTokens(System.Collections.Generic.IEnumerable{System.UInt32},System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Request PICS access tokens for a list of app ids and package ids
            Results are returned in a <see cref="T:SteamKit2.SteamApps.PICSTokensCallback"/> callback.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            </summary>
            <param name="appIds">List of app ids to request access tokens for.</param>
            <param name="packageIds">List of package ids to request access tokens for.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamApps.PICSTokensCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamApps.PICSGetChangesSince(System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Request changes for apps and packages since a given change number
            Results are returned in a <see cref="T:SteamKit2.SteamApps.PICSChangesCallback"/> callback.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            </summary>
            <param name="lastChangeNumber">Last change number seen.</param>
            <param name="sendAppChangelist">Whether to send app changes.</param>
            <param name="sendPackageChangelist">Whether to send package changes.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamApps.PICSChangesCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamApps.PICSGetProductInfo(System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Boolean,System.Boolean)">
            <summary>
            Request product information for an app or package
            Results are returned in a <see cref="T:SteamKit2.SteamApps.PICSProductInfoCallback"/> callback.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            </summary>
            <param name="app">App id requested.</param>
            <param name="package">Package id requested.</param>
            <param name="onlyPublic">Whether to send only public information.</param>
            <param name="metaDataOnly">Whether to send only meta data.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamApps.PICSProductInfoCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamApps.PICSGetProductInfo(System.Collections.Generic.IEnumerable{System.UInt32},System.Collections.Generic.IEnumerable{System.UInt32},System.Boolean,System.Boolean)">
            <summary>
            Request product information for a list of apps or packages
            Results are returned in a <see cref="T:SteamKit2.SteamApps.PICSProductInfoCallback"/> callback.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            </summary>
            <param name="apps">List of app ids requested.</param>
            <param name="packages">List of package ids requested.</param>
            <param name="onlyPublic">Whether to send only public information.</param>
            <param name="metaDataOnly">Whether to send only meta data.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamApps.PICSProductInfoCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamApps.PICSGetProductInfo(System.Collections.Generic.IEnumerable{SteamKit2.SteamApps.PICSRequest},System.Collections.Generic.IEnumerable{SteamKit2.SteamApps.PICSRequest},System.Boolean)">
            <summary>
            Request product information for a list of apps or packages
            Results are returned in a <see cref="T:SteamKit2.SteamApps.PICSProductInfoCallback"/> callback.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            </summary>
            <param name="apps">List of <see cref="T:SteamKit2.SteamApps.PICSRequest"/> requests for apps.</param>
            <param name="packages">List of <see cref="T:SteamKit2.SteamApps.PICSRequest"/> requests for packages.</param>
            <param name="metaDataOnly">Whether to send only meta data.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamApps.PICSProductInfoCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamApps.GetCDNAuthToken(System.UInt32,System.UInt32,System.String)">
            <summary>
            Request product information for an app or package
            Results are returned in a <see cref="T:SteamKit2.SteamApps.CDNAuthTokenCallback"/> callback.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            </summary>
            <param name="app">App id requested.</param>
            <param name="depot">Depot id requested.</param>
            <param name="host_name">CDN host name being requested.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamApps.CDNAuthTokenCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamApps.RequestFreeLicense(System.UInt32)">
            <summary>
            Request a free license for given appid, can be used for free on demand apps
            Results are returned in a <see cref="T:SteamKit2.SteamApps.FreeLicenseCallback"/> callback.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            </summary>
            <param name="app">The app to request a free license for.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamApps.FreeLicenseCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamApps.RequestFreeLicense(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Request a free license for given appids, can be used for free on demand apps
            Results are returned in a <see cref="T:SteamKit2.SteamApps.FreeLicenseCallback"/> callback.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            </summary>
            <param name="apps">The apps to request a free license for.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamApps.FreeLicenseCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamApps.CheckAppBetaPassword(System.UInt32,System.String)">
            <summary>
            Submit a beta password for a given app to retrieve any betas and their encryption keys.
            Results are returned in a <see cref="T:SteamKit2.SteamApps.CheckAppBetaPasswordCallback"/> callback.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            </summary>
            <param name="app">App id requested.</param>
            <param name="password">Password to check.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamApps.CheckAppBetaPasswordCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamApps.HandleMsg(SteamKit2.IPacketMsg)">
            <summary>
            Handles a client message. This should not be called directly.
            </summary>
            <param name="packetMsg">The packet message that contains the data.</param>
        </member>
        <member name="T:SteamKit2.SteamFriends">
            <summary>
            This handler handles all interaction with other users on the Steam3 network.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamFriends.ChatMemberInfo">
            <summary>
            Represents the details of a user which is a member of a chatroom.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamFriends.ChatMemberInfo.#ctor(SteamKit2.KeyValue)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.SteamFriends.ChatMemberInfo"/> class.
            </summary>
            <param name="keyValues">The KeyValue backing store for this member info.</param>
        </member>
        <member name="M:SteamKit2.SteamFriends.ChatMemberInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.SteamFriends.ChatMemberInfo"/> class.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatMemberInfo.Details">
            <summary>
            Gets the clan permission details of this chat member.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatMemberInfo.Permissions">
            <summary>
            Gets the permissions this user has with the chatroom.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatMemberInfo.SteamID">
            <summary>
            Gets the <see cref="P:SteamKit2.SteamFriends.ChatMemberInfo.SteamID"/> of this user.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamFriends.PersonaStateCallback">
            <summary>
            This callback is fired in response to someone changing their friend details over the network.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.StatusFlags">
            <summary>
            Gets the status flags. This shows what has changed.
            </summary>
            <value>The status flags.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.FriendID">
            <summary>
            Gets the friend ID.
            </summary>
            <value>The friend ID.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.State">
            <summary>
            Gets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.StateFlags">
            <summary>
            Gets the state flags.
            </summary>
            <value>The state flags.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.GameAppID">
            <summary>
            Gets the game app ID.
            </summary>
            <value>The game app ID.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.GameID">
            <summary>
            Gets the game ID.
            </summary>
            <value>The game ID.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.GameName">
            <summary>
            Gets the name of the game.
            </summary>
            <value>The name of the game.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.GameServerIP">
            <summary>
            Gets the game server IP.
            </summary>
            <value>The game server IP.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.GameServerPort">
            <summary>
            Gets the game server port.
            </summary>
            <value>The game server port.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.QueryPort">
            <summary>
            Gets the query port.
            </summary>
            <value>The query port.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.SourceSteamID">
            <summary>
            Gets the source steam ID.
            </summary>
            <value>The source steam ID.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.GameDataBlob">
            <summary>
            Gets the game data blob.
            </summary>
            <value>The game data blob.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.AvatarHash">
            <summary>
            Gets the avatar hash.
            </summary>
            <value>The avatar hash.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.LastLogOff">
            <summary>
            Gets the last log off.
            </summary>
            <value>The last log off.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.LastLogOn">
            <summary>
            Gets the last log on.
            </summary>
            <value>The last log on.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.ClanRank">
            <summary>
            Gets the clan rank.
            </summary>
            <value>The clan rank.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.ClanTag">
            <summary>
            Gets the clan tag.
            </summary>
            <value>The clan tag.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.OnlineSessionInstances">
            <summary>
            Gets the online session instances.
            </summary>
            <value>The online session instances.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.PublishedSessionID">
            <summary>
            Gets the published session ID.
            </summary>
            <value>The published session ID.</value>
        </member>
        <member name="T:SteamKit2.SteamFriends.ClanStateCallback">
            <summary>
            This callback is posted when a clan's state has been changed.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamFriends.ClanStateCallback.Event">
            <summary>
            Represents an event or announcement that was posted by a clan.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ClanStateCallback.Event.ID">
            <summary>
            Gets the globally unique ID for this specific event.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ClanStateCallback.Event.EventTime">
            <summary>
            Gets the event time.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ClanStateCallback.Event.Headline">
            <summary>
            Gets the headline of the event.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ClanStateCallback.Event.GameID">
            <summary>
            Gets the <see cref="P:SteamKit2.SteamFriends.ClanStateCallback.Event.GameID"/> associated with this event, if any.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ClanStateCallback.Event.JustPosted">
            <summary>
            Gets a value indicating whether this event was just posted.
            </summary>
            <value>
              <c>true</c> if the event was just posted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.SteamFriends.ClanStateCallback.ClanID">
            <summary>
            Gets the <see cref="T:SteamKit2.SteamID"/> of the clan that posted this state update.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ClanStateCallback.StatusFlags">
            <summary>
            Gets the status flags.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ClanStateCallback.AccountFlags">
            <summary>
            Gets the account flags.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ClanStateCallback.ClanName">
            <summary>
            Gets the name of the clan.
            </summary>
            <value>
            The name of the clan.
            </value>
        </member>
        <member name="P:SteamKit2.SteamFriends.ClanStateCallback.AvatarHash">
            <summary>
            Gets the SHA-1 avatar hash.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ClanStateCallback.MemberTotalCount">
            <summary>
            Gets the total number of members in this clan.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ClanStateCallback.MemberOnlineCount">
            <summary>
            Gets the number of members in this clan that are currently online.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ClanStateCallback.MemberChattingCount">
            <summary>
            Gets the number of members in this clan that are currently chatting.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ClanStateCallback.MemberInGameCount">
            <summary>
            Gets the number of members in this clan that are currently in-game.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ClanStateCallback.Events">
            <summary>
            Gets any events associated with this clan state update.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ClanStateCallback.Announcements">
            <summary>
            Gets any announcements associated with this clan state update.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamFriends.FriendsListCallback">
            <summary>
            This callback is fired when the client receives a list of friends.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamFriends.FriendsListCallback.Friend">
            <summary>
            Represents a single friend entry in a client's friendlist.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.FriendsListCallback.Friend.SteamID">
            <summary>
            Gets the SteamID of the friend.
            </summary>
            <value>The SteamID.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.FriendsListCallback.Friend.Relationship">
            <summary>
            Gets the relationship to this friend.
            </summary>
            <value>The relationship.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.FriendsListCallback.Incremental">
            <summary>
            Gets a value indicating whether this <see cref="T:SteamKit2.SteamFriends.FriendsListCallback"/> is an incremental update.
            </summary>
            <value><c>true</c> if incremental; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.FriendsListCallback.FriendList">
            <summary>
            Gets the friend list.
            </summary>
            <value>The friend list.</value>
        </member>
        <member name="T:SteamKit2.SteamFriends.FriendMsgCallback">
            <summary>
            This callback is fired in response to receiving a message from a friend.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.FriendMsgCallback.Sender">
            <summary>
            Gets or sets the sender.
            </summary>
            <value>The sender.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.FriendMsgCallback.EntryType">
            <summary>
            Gets the chat entry type.
            </summary>
            <value>The chat entry type.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.FriendMsgCallback.FromLimitedAccount">
            <summary>
            Gets a value indicating whether this message is from a limited account.
            </summary>
            <value><c>true</c> if this message is from a limited account; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.FriendMsgCallback.Message">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:SteamKit2.SteamFriends.FriendMsgEchoCallback">
            <summary>
            This callback is fired in response to receiving an echo message from another instance.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.FriendMsgEchoCallback.Recipient">
            <summary>
            Gets or sets the recipient
            </summary>
            <value>The recipient.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.FriendMsgEchoCallback.EntryType">
            <summary>
            Gets the chat entry type.
            </summary>
            <value>The chat entry type.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.FriendMsgEchoCallback.FromLimitedAccount">
            <summary>
            Gets a value indicating whether this message is from a limited account.
            </summary>
            <value><c>true</c> if this message is from a limited account; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.FriendMsgEchoCallback.Message">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:SteamKit2.SteamFriends.FriendMsgHistoryCallback">
            <summary>
            <para>This callback is fired in response to receiving historical messages.</para> 
            See also <seealso cref="M:SteamKit2.SteamFriends.RequestOfflineMessages"/> and
            <seealso cref="M:SteamKit2.SteamFriends.RequestMessageHistory(SteamKit2.SteamID)"/>.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.FriendMsgHistoryCallback.Result">
            <summary>
            Gets the result of the request.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.FriendMsgHistoryCallback.SteamID">
            <summary>
            Gets the SteamID of the user with whom these messages were exchanged.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.FriendMsgHistoryCallback.Messages">
            <summary>
            The messages exchanged with the user.
            Offline messages are marked by having set <see cref="P:SteamKit2.SteamFriends.FriendMsgHistoryCallback.FriendMessage.Unread"/> to <c>true</c>
            </summary>
        </member>
        <member name="T:SteamKit2.SteamFriends.FriendMsgHistoryCallback.FriendMessage">
            <summary>
            Represents a single Message sent to or received from a friend
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.FriendMsgHistoryCallback.FriendMessage.SteamID">
            <summary>
            The SteamID of the User that wrote the message
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.FriendMsgHistoryCallback.FriendMessage.Unread">
            <summary>
            Whether or not the message has been read, i.e., is an offline message.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.FriendMsgHistoryCallback.FriendMessage.Message">
            <summary>
            The actual message
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.FriendMsgHistoryCallback.FriendMessage.Timestamp">
            <summary>
            The time (in UTC) when the message was sent
            </summary>
        </member>
        <member name="T:SteamKit2.SteamFriends.FriendAddedCallback">
            <summary>
            This callback is fired in response to adding a user to your friends list.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.FriendAddedCallback.Result">
            <summary>
            Gets the result of the request.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.FriendAddedCallback.SteamID">
            <summary>
            Gets the SteamID of the friend that was added.
            </summary>
            <value>The SteamID.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.FriendAddedCallback.PersonaName">
            <summary>
            Gets the persona name of the friend.
            </summary>
            <value>The persona name.</value>
        </member>
        <member name="T:SteamKit2.SteamFriends.ChatEnterCallback">
            <summary>
            This callback is fired in response to attempting to join a chat.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatEnterCallback.ChatID">
            <summary>
            Gets SteamID of the chat room.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatEnterCallback.FriendID">
            <summary>
            Gets the friend ID.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatEnterCallback.ChatRoomType">
            <summary>
            Gets the type of the chat room.
            </summary>
            <value>
            The type of the chat room.
            </value>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatEnterCallback.OwnerID">
            <summary>
            Gets the SteamID of the chat room owner.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatEnterCallback.ClanID">
            <summary>
            Gets clan SteamID that owns this chat room.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatEnterCallback.ChatFlags">
            <summary>
            Gets the chat flags.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatEnterCallback.EnterResponse">
            <summary>
            Gets the chat enter response.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatEnterCallback.NumChatMembers">
            <summary>
            Gets the number of users currently in this chat room.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatEnterCallback.ChatRoomName">
            <summary>
            Gets the name of the chat room.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatEnterCallback.ChatMembers">
            <summary>
            Gets a list of <see cref="T:SteamKit2.SteamFriends.ChatMemberInfo"/> instances for each of the members of this chat room.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamFriends.ChatMsgCallback">
            <summary>
            This callback is fired when a chat room message arrives.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatMsgCallback.ChatterID">
            <summary>
            Gets the SteamID of the chatter.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatMsgCallback.ChatRoomID">
            <summary>
            Gets the SteamID of the chat room.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatMsgCallback.ChatMsgType">
            <summary>
            Gets chat entry type.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatMsgCallback.Message">
            <summary>
            Gets the message.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamFriends.ChatMemberInfoCallback">
            <summary>
            This callback is fired in response to chat member info being recieved.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamFriends.ChatMemberInfoCallback.StateChangeDetails">
            <summary>
            Represents state change information.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatMemberInfoCallback.StateChangeDetails.ChatterActedOn">
            <summary>
            Gets the SteamID of the chatter that was acted on.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatMemberInfoCallback.StateChangeDetails.StateChange">
            <summary>
            Gets the state change for the acted on SteamID.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatMemberInfoCallback.StateChangeDetails.ChatterActedBy">
            <summary>
            Gets the SteamID of the chatter that acted on <see cref="P:SteamKit2.SteamFriends.ChatMemberInfoCallback.StateChangeDetails.ChatterActedOn"/>.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatMemberInfoCallback.StateChangeDetails.MemberInfo">
            <summary>
            Gets the member information for a user that has joined the chat room.
            This field is only populated when <see cref="P:SteamKit2.SteamFriends.ChatMemberInfoCallback.StateChangeDetails.StateChange"/> is <see cref="F:SteamKit2.EChatMemberStateChange.Entered"/>.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatMemberInfoCallback.ChatRoomID">
            <summary>
            Gets SteamId of the chat room.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatMemberInfoCallback.Type">
            <summary>
            Gets the info type.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatMemberInfoCallback.StateChangeInfo">
            <summary>
            Gets the state change info for <see cref="F:SteamKit2.EChatInfoType.StateChange"/> member info updates.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamFriends.ChatRoomInfoCallback">
            <summary>
            This callback is fired in response to chat room info being recieved.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatRoomInfoCallback.ChatRoomID">
            <summary>
            Gets SteamId of the chat room.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatRoomInfoCallback.Type">
            <summary>
            Gets the info type.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamFriends.ChatActionResultCallback">
            <summary>
            This callback is fired when a chat action has completed.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatActionResultCallback.ChatRoomID">
            <summary>
            Gets the SteamID of the chat room the action was performed in.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatActionResultCallback.ChatterID">
            <summary>
            Gets the SteamID of the chat member the action was performed on.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatActionResultCallback.Action">
            <summary>
            Gets the chat action that was performed.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatActionResultCallback.Result">
            <summary>
            Gets the result of the chat action.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamFriends.ChatInviteCallback">
            <summary>
            This callback is fired when a chat invite is recieved.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatInviteCallback.InvitedID">
            <summary>
            Gets the SteamID of the user who was invited to the chat.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatInviteCallback.ChatRoomID">
            <summary>
            Gets the chat room SteamID.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatInviteCallback.PatronID">
            <summary>
            Gets the SteamID of the user who performed the invitation.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatInviteCallback.ChatRoomType">
            <summary>
            Gets the chat room type.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatInviteCallback.FriendChatID">
            <summary>
            Gets the SteamID of the chat friend.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatInviteCallback.ChatRoomName">
            <summary>
            Gets the name of the chat room.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatInviteCallback.GameID">
            <summary>
            Gets the GameID associated with this chat room, if it's a game lobby.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamFriends.IgnoreFriendCallback">
            <summary>
            This callback is fired in response to an attempt at ignoring a friend.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.IgnoreFriendCallback.Result">
            <summary>
            Gets the result of ignoring a friend.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamFriends.ProfileInfoCallback">
            <summary>
            This callback is fired in response to requesting profile info for a user.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ProfileInfoCallback.Result">
            <summary>
            Gets the result of requesting profile info.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ProfileInfoCallback.SteamID">
            <summary>
            Gets the <see cref="P:SteamKit2.SteamFriends.ProfileInfoCallback.SteamID"/> this info belongs to.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ProfileInfoCallback.TimeCreated">
            <summary>
            Gets the time this account was created.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ProfileInfoCallback.RealName">
            <summary>
            Gets the real name.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ProfileInfoCallback.CityName">
            <summary>
            Gets the name of the city.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ProfileInfoCallback.StateName">
            <summary>
            Gets the name of the state.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ProfileInfoCallback.CountryName">
            <summary>
            Gets the name of the country.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ProfileInfoCallback.Headline">
            <summary>
            Gets the headline.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ProfileInfoCallback.Summary">
            <summary>
            Gets the summary.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamFriends.PersonaChangeCallback">
            <summary>
            This callback is fired in response to setting this client's persona name or state
            with <see cref="M:SteamKit2.SteamFriends.SetPersonaName(System.String)"/> or <see cref="M:SteamKit2.SteamFriends.SetPersonaState(SteamKit2.EPersonaState)"/>.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaChangeCallback.Result">
            <summary>
            Gets the result of changing this client's persona information.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaChangeCallback.Name">
            <summary>
            Gets the name of this client according to Steam.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamFriends.GetPersonaName">
            <summary>
            Gets the local user's persona name.
            </summary>
            <returns>The name.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.SetPersonaName(System.String)">
            <summary>
            Sets the local user's persona name and broadcasts it over the network.
            Results are returned in a <see cref="T:SteamKit2.SteamFriends.PersonaChangeCallback"/> callback.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            </summary>
            <param name="name">The name.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamFriends.PersonaChangeCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.GetPersonaState">
            <summary>
            Gets the local user's persona state.
            </summary>
            <returns>The persona state.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.SetPersonaState(SteamKit2.EPersonaState)">
            <summary>
            Sets the local user's persona state and broadcasts it over the network.
            Results are returned in a <see cref="T:SteamKit2.SteamFriends.PersonaChangeCallback"/> callback.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            </summary>
            <param name="state">The state.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamFriends.PersonaChangeCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.GetFriendCount">
            <summary>
            Gets the friend count of the local user.
            </summary>
            <returns>The number of friends.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.GetFriendByIndex(System.Int32)">
            <summary>
            Gets a friend by index.
            </summary>
            <param name="index">The index.</param>
            <returns>A valid steamid of a friend if the index is in range; otherwise a steamid representing 0.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.GetFriendPersonaName(SteamKit2.SteamID)">
            <summary>
            Gets the persona name of a friend.
            </summary>
            <param name="steamId">The steam id.</param>
            <returns>The name.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.GetFriendPersonaState(SteamKit2.SteamID)">
            <summary>
            Gets the persona state of a friend.
            </summary>
            <param name="steamId">The steam id.</param>
            <returns>The persona state.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.GetFriendRelationship(SteamKit2.SteamID)">
            <summary>
            Gets the relationship of a friend.
            </summary>
            <param name="steamId">The steam id.</param>
            <returns>The relationship of the friend to the local user.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.GetFriendGamePlayedName(SteamKit2.SteamID)">
            <summary>
            Gets the game name of a friend playing a game.
            </summary>
            <param name="steamId">The steam id.</param>
            <returns>The game name of a friend playing a game, or null if they haven't been cached yet.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.GetFriendGamePlayed(SteamKit2.SteamID)">
            <summary>
            Gets the GameID of a friend playing a game.
            </summary>
            <param name="steamId">The steam id.</param>
            <returns>The gameid of a friend playing a game, or 0 if they haven't been cached yet.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.GetFriendAvatar(SteamKit2.SteamID)">
            <summary>
            Gets a SHA-1 hash representing the friend's avatar.
            </summary>
            <param name="steamId">The SteamID of the friend to get the avatar of.</param>
            <returns>A byte array representing a SHA-1 hash of the friend's avatar.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.GetClanCount">
            <summary>
            Gets the count of clans the local user is a member of.
            </summary>
            <returns>The number of clans this user is a member of.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.GetClanByIndex(System.Int32)">
            <summary>
            Gets a clan SteamID by index.
            </summary>
            <param name="index">The index.</param>
            <returns>A valid steamid of a clan if the index is in range; otherwise a steamid representing 0.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.GetClanName(SteamKit2.SteamID)">
            <summary>
            Gets the name of a clan.
            </summary>
            <param name="steamId">The clan SteamID.</param>
            <returns>The name.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.GetClanRelationship(SteamKit2.SteamID)">
            <summary>
            Gets the relationship of a clan.
            </summary>
            <param name="steamId">The clan steamid.</param>
            <returns>The relationship of the clan to the local user.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.GetClanAvatar(SteamKit2.SteamID)">
            <summary>
            Gets a SHA-1 hash representing the clan's avatar.
            </summary>
            <param name="steamId">The SteamID of the clan to get the avatar of.</param>
            <returns>A byte array representing a SHA-1 hash of the clan's avatar, or null if the clan could not be found.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.SendChatMessage(SteamKit2.SteamID,SteamKit2.EChatEntryType,System.String)">
            <summary>
            Sends a chat message to a friend.
            </summary>
            <param name="target">The target to send to.</param>
            <param name="type">The type of message to send.</param>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:SteamKit2.SteamFriends.AddFriend(System.String)">
            <summary>
            Sends a friend request to a user.
            </summary>
            <param name="accountNameOrEmail">The account name or email of the user.</param>
        </member>
        <member name="M:SteamKit2.SteamFriends.AddFriend(SteamKit2.SteamID)">
            <summary>
            Sends a friend request to a user.
            </summary>
            <param name="steamId">The SteamID of the friend to add.</param>
        </member>
        <member name="M:SteamKit2.SteamFriends.RemoveFriend(SteamKit2.SteamID)">
            <summary>
            Removes a friend from your friends list.
            </summary>
            <param name="steamId">The SteamID of the friend to remove.</param>
        </member>
        <member name="M:SteamKit2.SteamFriends.JoinChat(SteamKit2.SteamID)">
            <summary>
            Attempts to join a chat room.
            </summary>
            <param name="steamId">The SteamID of the chat room.</param>
        </member>
        <member name="M:SteamKit2.SteamFriends.LeaveChat(SteamKit2.SteamID)">
            <summary>
            Attempts to leave a chat room.
            </summary>
            <param name="steamId">The SteamID of the chat room.</param>
        </member>
        <member name="M:SteamKit2.SteamFriends.SendChatRoomMessage(SteamKit2.SteamID,SteamKit2.EChatEntryType,System.String)">
            <summary>
            Sends a message to a chat room.
            </summary>
            <param name="steamIdChat">The SteamID of the chat room.</param>
            <param name="type">The message type.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:SteamKit2.SteamFriends.InviteUserToChat(SteamKit2.SteamID,SteamKit2.SteamID)">
            <summary>
            Invites a user to a chat room.
            The results of this action will be available through the <see cref="T:SteamKit2.SteamFriends.ChatActionResultCallback"/> callback.
            </summary>
            <param name="steamIdUser">The SteamID of the user to invite.</param>
            <param name="steamIdChat">The SteamID of the chat room to invite the user to.</param>
        </member>
        <member name="M:SteamKit2.SteamFriends.KickChatMember(SteamKit2.SteamID,SteamKit2.SteamID)">
            <summary>
            Kicks the specified chat member from the given chat room.
            </summary>
            <param name="steamIdChat">The SteamID of chat room to kick the member from.</param>
            <param name="steamIdMember">The SteamID of the member to kick from the chat.</param>
        </member>
        <member name="M:SteamKit2.SteamFriends.BanChatMember(SteamKit2.SteamID,SteamKit2.SteamID)">
            <summary>
            Bans the specified chat member from the given chat room.
            </summary>
            <param name="steamIdChat">The SteamID of chat room to ban the member from.</param>
            <param name="steamIdMember">The SteamID of the member to ban from the chat.</param>
        </member>
        <member name="M:SteamKit2.SteamFriends.UnbanChatMember(SteamKit2.SteamID,SteamKit2.SteamID)">
            <summary>
            Unbans the specified SteamID from the given chat room.
            </summary>
            <param name="steamIdChat">The SteamID of chat room to unban the member from.</param>
            <param name="steamIdMember">The SteamID of the member to unban from the chat.</param>
        </member>
        <member name="M:SteamKit2.SteamFriends.RequestFriendInfo(System.Collections.Generic.IEnumerable{SteamKit2.SteamID},SteamKit2.EClientPersonaStateFlag)">
            <summary>
            Requests persona state for a list of specified SteamID.
            Results are returned in <see cref="T:SteamKit2.SteamFriends.PersonaStateCallback"/>.
            </summary>
            <param name="steamIdList">A list of SteamIDs to request the info of.</param>
            <param name="requestedInfo">The requested info flags.</param>
        </member>
        <member name="M:SteamKit2.SteamFriends.RequestFriendInfo(SteamKit2.SteamID,SteamKit2.EClientPersonaStateFlag)">
            <summary>
            Requests persona state for a specified SteamID.
            Results are returned in <see cref="T:SteamKit2.SteamFriends.PersonaStateCallback"/>.
            </summary>
            <param name="steamId">A SteamID to request the info of.</param>
            <param name="requestedInfo">The requested info flags.</param>
        </member>
        <member name="M:SteamKit2.SteamFriends.IgnoreFriend(SteamKit2.SteamID,System.Boolean)">
            <summary>
            Ignores or unignores a friend on Steam.
            Results are returned in a <see cref="T:SteamKit2.SteamFriends.IgnoreFriendCallback"/>.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            </summary>
            <param name="steamId">The SteamID of the friend to ignore or unignore.</param>
            <param name="setIgnore">if set to <c>true</c>, the friend will be ignored; otherwise, they will be unignored.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamFriends.IgnoreFriendCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.RequestProfileInfo(SteamKit2.SteamID)">
            <summary>
            Requests profile information for the given <see cref="T:SteamKit2.SteamID"/>.
            Results are returned in a <see cref="T:SteamKit2.SteamFriends.ProfileInfoCallback"/>.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            </summary>
            <param name="steamId">The SteamID of the friend to request the details of.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamFriends.ProfileInfoCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.RequestMessageHistory(SteamKit2.SteamID)">
            <summary>
            Requests the last few chat messages with a friend.
            Results are returned in a <see cref="T:SteamKit2.SteamFriends.FriendMsgHistoryCallback"/>
            </summary>
            <param name="steamId">SteamID of the friend</param>
        </member>
        <member name="M:SteamKit2.SteamFriends.RequestOfflineMessages">
            <summary>
            Requests all offline messages.
            This also marks them as read server side.
            Results are returned in a <see cref="T:SteamKit2.SteamFriends.FriendMsgHistoryCallback"/>.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamFriends.HandleMsg(SteamKit2.IPacketMsg)">
            <summary>
            Handles a client message. This should not be called directly.
            </summary>
            <param name="packetMsg">The packet message that contains the data.</param>
        </member>
        <member name="T:SteamKit2.SteamUser">
            <summary>
            This handler handles all user log on/log off related actions and callbacks.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamUser.LoggedOnCallback">
            <summary>
            This callback is returned in response to an attempt to log on to the Steam3 network through <see cref="T:SteamKit2.SteamUser"/>.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOnCallback.Result">
            <summary>
            Gets the result of the logon.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOnCallback.ExtendedResult">
            <summary>
            Gets the extended result of the logon.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOnCallback.OutOfGameSecsPerHeartbeat">
            <summary>
            Gets the out of game secs per heartbeat value.
            This is used internally by SteamKit to initialize heartbeating.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOnCallback.InGameSecsPerHeartbeat">
            <summary>
            Gets the in game secs per heartbeat value.
            This is used internally by SteamKit to initialize heartbeating.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOnCallback.PublicIP">
            <summary>
            Gets or sets the public IP of the client
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOnCallback.ServerTime">
            <summary>
            Gets the Steam3 server time.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOnCallback.AccountFlags">
            <summary>
            Gets the account flags assigned by the server.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOnCallback.ClientSteamID">
            <summary>
            Gets the client steam ID.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOnCallback.EmailDomain">
            <summary>
            Gets the email domain.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOnCallback.CellID">
            <summary>
            Gets the Steam2 CellID.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOnCallback.CellIDPingThreshold">
            <summary>
            Gets the Steam2 CellID ping threshold.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOnCallback.Steam2Ticket">
            <summary>
            Gets the Steam2 ticket.
            This is used for authenticated content downloads in Steam2.
            This field will only be set when <see cref="P:SteamKit2.SteamUser.LogOnDetails.RequestSteam2Ticket"/> has been set to <c>true</c>.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOnCallback.UsePICS">
            <summary>
            Gets a value indicating whether the client should use PICS.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOnCallback.WebAPIUserNonce">
            <summary>
            Gets the WebAPI authentication user nonce.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOnCallback.IPCountryCode">
            <summary>
            Gets the IP country code.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOnCallback.VanityURL">
            <summary>
            Gets the vanity URL.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOnCallback.NumLoginFailuresToMigrate">
            <summary>
            Gets the threshold for login failures before Steam wants the client to migrate to a new CM.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOnCallback.NumDisconnectsToMigrate">
            <summary>
            Gets the threshold for disconnects before Steam wants the client to migrate to a new CM.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamUser.LoggedOffCallback">
            <summary>
            This callback is returned when the client is told to log off by the server.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOffCallback.Result">
            <summary>
            Gets the result of the log off.
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:SteamKit2.SteamUser.LoginKeyCallback">
            <summary>
            This callback is returned some time after logging onto the network.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoginKeyCallback.LoginKey">
            <summary>
            Gets the login key.
            </summary>
            <value>The login key.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.LoginKeyCallback.UniqueID">
            <summary>
            Gets the unique ID.
            </summary>
            <value>The unique ID.</value>
        </member>
        <member name="T:SteamKit2.SteamUser.SessionTokenCallback">
            <summary>
            This callback is fired when the client recieves it's unique Steam3 session token. This token is used for authenticated content downloading in Steam2.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.SessionTokenCallback.SessionToken">
            <summary>
            Gets the Steam3 session token used for authenticating to various other services.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamUser.AccountInfoCallback">
            <summary>
            This callback is received when account information is recieved from the network.
            This generally happens after logon.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.AccountInfoCallback.PersonaName">
            <summary>
            Gets the last recorded persona name used by this account.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.AccountInfoCallback.Country">
            <summary>
            Gets the country this account is connected from.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.AccountInfoCallback.PasswordSalt">
            <summary>
            Gets the salt used for the password.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.AccountInfoCallback.PasswordSHADisgest">
            <summary>
            Gets the SHA-1 disgest of the password.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.AccountInfoCallback.CountAuthedComputers">
            <summary>
            Gets the count of SteamGuard authenticated computers.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.AccountInfoCallback.LockedWithIPT">
            <summary>
            Gets a value indicating whether this account is locked with IPT.
            </summary>
            <value>
              <c>true</c> if this account is locked with IPT; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.SteamUser.AccountInfoCallback.AccountFlags">
            <summary>
            Gets the account flags for this account.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.AccountInfoCallback.FacebookID">
            <summary>
            Gets the facebook ID of this account if it is linked with facebook.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.AccountInfoCallback.FacebookName">
            <summary>
            Gets the facebook name if this account is linked with facebook.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamUser.WalletInfoCallback">
            <summary>
            This callback is received when wallet info is recieved from the network.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.WalletInfoCallback.HasWallet">
            <summary>
            Gets a value indicating whether this instance has wallet data.
            </summary>
            <value>
            	<c>true</c> if this instance has wallet data; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.SteamUser.WalletInfoCallback.Currency">
            <summary>
            Gets the currency code for this wallet.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.WalletInfoCallback.Balance">
            <summary>
            Gets the balance of the wallet, in cents.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamUser.UpdateMachineAuthCallback">
            <summary>
            This callback is received when the backend wants the client to update it's local machine authentication data.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamUser.UpdateMachineAuthCallback.OTPDetails">
            <summary>
            Represents various one-time-password details.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.UpdateMachineAuthCallback.OTPDetails.Type">
            <summary>
            Gets the OTP type.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.UpdateMachineAuthCallback.OTPDetails.Identifier">
            <summary>
            Gets the OTP identifier.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.UpdateMachineAuthCallback.OTPDetails.SharedSecret">
            <summary>
            Gets the OTP shared secret.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.UpdateMachineAuthCallback.OTPDetails.TimeDrift">
            <summary>
            Gets the OTP time drift.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamUser.UpdateMachineAuthCallback.OTPDetails.op_Implicit(SteamKit2.SteamUser.UpdateMachineAuthCallback.OTPDetails)~SteamKit2.SteamUser.MachineAuthDetails.OTPDetails">
            <summary>
            Implicitly converts <see cref="T:SteamKit2.SteamUser.UpdateMachineAuthCallback.OTPDetails"/> into <see cref="T:SteamKit2.SteamUser.MachineAuthDetails.OTPDetails"/>.
            </summary>
            <param name="otp">The details to convert.</param>
            <returns></returns>
        </member>
        <member name="P:SteamKit2.SteamUser.UpdateMachineAuthCallback.Data">
            <summary>
            Gets the sentry file data that should be written.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.UpdateMachineAuthCallback.BytesToWrite">
            <summary>
            Gets the number of bytes to write.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.UpdateMachineAuthCallback.Offset">
            <summary>
            Gets the offset to write to.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.UpdateMachineAuthCallback.FileName">
            <summary>
            Gets the name of the sentry file to write.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.UpdateMachineAuthCallback.OneTimePassword">
            <summary>
            Gets the one-time-password details.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamUser.WebAPIUserNonceCallback">
            <summary>
            This callback is received when requesting a new WebAPI authentication user nonce.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.WebAPIUserNonceCallback.Result">
            <summary>
            Gets the result of the request.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.WebAPIUserNonceCallback.Nonce">
            <summary>
            Gets the authentication nonce.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamUser.MarketingMessageCallback">
            <summary>
            This callback is fired when the client receives a marketing message update.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamUser.MarketingMessageCallback.Message">
            <summary>
            Represents a single marketing message.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.MarketingMessageCallback.Message.ID">
            <summary>
            Gets the unique identifier for this marketing message.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.MarketingMessageCallback.Message.URL">
            <summary>
            Gets the URL for this marketing message.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.MarketingMessageCallback.Message.Flags">
            <summary>
            Gets the marketing message flags.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.MarketingMessageCallback.UpdateTime">
            <summary>
            Gets the time of this marketing message update.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.MarketingMessageCallback.Messages">
            <summary>
            Gets the messages.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamUser.LogOnDetails">
            <summary>
            Represents the details required to log into Steam3 as a user.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LogOnDetails.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.LogOnDetails.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.LogOnDetails.CellID">
            <summary>
            Gets or sets the CellID.
            </summary>
            <value>The CellID.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.LogOnDetails.LoginID">
            <summary>
            Gets or sets the LoginID. This number is used for identifying logon session.
            The purpose of this field is to allow multiple sessions to the same steam account from the same machine.
            This is because Steam Network doesn't allow more than one session with the same LoginID to access given account at the same time from the same public IP.
            If you want to establish more than one active session to given account, you must make sure that every session (to that account) from the same public IP has a unique LoginID.
            By default LoginID is automatically generated based on machine's primary bind address, which is the same for all sessions.
            Null value will cause this property to be automatically generated based on default behaviour.
            If in doubt, set this property to null.
            </summary>
            <value>The LoginID.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.LogOnDetails.AuthCode">
            <summary>
            Gets or sets the Steam Guard auth code used to login. This is the code sent to the user's email.
            </summary>
            <value>The auth code.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.LogOnDetails.TwoFactorCode">
            <summary>
            Gets or sets the 2-factor auth code used to login. This is the code that can be received from the authenticator apps.
            </summary>
            <value>The two factor auth code.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.LogOnDetails.LoginKey">
            <summary>
            Gets or sets the login key used to login. This is a key that has been recieved in a previous Steam sesson by a <see cref="T:SteamKit2.SteamUser.LoginKeyCallback"/>.
            </summary>
            <value>The login key.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.LogOnDetails.ShouldRememberPassword">
            <summary>
            Gets or sets the 'Should Remember Password' flag. This is used in combination with the login key and <see cref="T:SteamKit2.SteamUser.LoginKeyCallback"/> for password-less login.
            </summary>
            <value>The 'Should Remember Password' flag.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.LogOnDetails.SentryFileHash">
            <summary>
            Gets or sets the sentry file hash for this logon attempt, or null if no sentry file is available.
            </summary>
            <value>The sentry file hash.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.LogOnDetails.AccountInstance">
            <summary>
            Gets or sets the account instance. 1 for the PC instance or 2 for the Console (PS3) instance.
            </summary>
            <value>The account instance.</value>
            <seealso cref="F:SteamKit2.SteamID.DesktopInstance"/>
            <seealso cref="F:SteamKit2.SteamID.ConsoleInstance"/>
        </member>
        <member name="P:SteamKit2.SteamUser.LogOnDetails.AccountID">
            <summary>
            Gets or sets the account ID used for connecting clients when using the Console instance.
            </summary>
            <value>
            The account ID.
            </value>
            <seealso cref="P:SteamKit2.SteamUser.LogOnDetails.AccountInstance"/>
        </member>
        <member name="P:SteamKit2.SteamUser.LogOnDetails.RequestSteam2Ticket">
            <summary>
            Gets or sets a value indicating whether to request the Steam2 ticket.
            This is an optional request only needed for Steam2 content downloads.
            </summary>
            <value>
              <c>true</c> if the Steam2 ticket should be requested; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.SteamUser.LogOnDetails.ClientOSType">
            <summary>
            Gets or sets the client operating system type.
            </summary>
            <value>The client operating system type.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.LogOnDetails.ClientLanguage">
            <summary>
            Gets or sets the client language.
            </summary>
            <value>The client language.</value>
        </member>
        <member name="M:SteamKit2.SteamUser.LogOnDetails.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.SteamUser.LogOnDetails"/> class.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamUser.AnonymousLogOnDetails">
            <summary>
            Represents the details required to log into Steam3 as an anonymous user.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.AnonymousLogOnDetails.CellID">
            <summary>
            Gets or sets the CellID.
            </summary>
            <value>The CellID.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.AnonymousLogOnDetails.ClientOSType">
            <summary>
            Gets or sets the client operating system type.
            </summary>
            <value>The client operating system type.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.AnonymousLogOnDetails.ClientLanguage">
            <summary>
            Gets or sets the client language.
            </summary>
            <value>The client language.</value>
        </member>
        <member name="M:SteamKit2.SteamUser.AnonymousLogOnDetails.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.SteamUser.AnonymousLogOnDetails"/> class.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamUser.MachineAuthDetails">
            <summary>
            Represents details required to complete a machine auth request.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamUser.MachineAuthDetails.OTPDetails">
            <summary>
            The One-Time-Password details for this response.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.MachineAuthDetails.OTPDetails.Type">
            <summary>
            Gets or sets the one-time-password type.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.MachineAuthDetails.OTPDetails.Identifier">
            <summary>
            Gets or sets the one-time-password identifier.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.MachineAuthDetails.OTPDetails.Value">
            <summary>
            Gets or sets the one-time-password value.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.MachineAuthDetails.JobID">
            <summary>
            Gets or sets the target Job ID for the request.
            This is provided in the <see cref="T:SteamKit2.Callback`1"/> for a <see cref="T:SteamKit2.SteamUser.UpdateMachineAuthCallback"/>.
            </summary>
            <value>The Job ID.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.MachineAuthDetails.Result">
            <summary>
            Gets or sets the result of updating the machine auth.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.MachineAuthDetails.BytesWritten">
            <summary>
            Gets or sets the number of bytes written for the sentry file.
            </summary>
            <value>The number of bytes written.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.MachineAuthDetails.Offset">
            <summary>
            Gets or sets the offset within the sentry file that was written.
            </summary>
            <value>The offset.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.MachineAuthDetails.FileName">
            <summary>
            Gets or sets the filename of the sentry file that was written.
            </summary>
            <value>The name of the sentry file.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.MachineAuthDetails.FileSize">
            <summary>
            Gets or sets the size of the sentry file.
            </summary>
            <value>/ The size of the sentry file.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.MachineAuthDetails.LastError">
            <summary>
            Gets or sets the last error that occurred while writing the sentry file, or 0 if no error occurred.
            </summary>
            <value>The last error.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.MachineAuthDetails.SentryFileHash">
            <summary>
            Gets or sets the SHA-1 hash of the sentry file.
            </summary>
            <value>The sentry file hash.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.MachineAuthDetails.OneTimePassword">
            <summary>
            Gets or sets the one-time-password details.
            </summary>
            <value>The one time password details.</value>
        </member>
        <member name="M:SteamKit2.SteamUser.MachineAuthDetails.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.SteamUser.MachineAuthDetails"/> class.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.SteamID">
            <summary>
            Gets the SteamID of this client. This value is assigned after a logon attempt has succeeded.
            </summary>
            <value>The SteamID.</value>
        </member>
        <member name="M:SteamKit2.SteamUser.LogOn(SteamKit2.SteamUser.LogOnDetails)">
            <summary>
            Logs the client into the Steam3 network.
            The client should already have been connected at this point.
            Results are returned in a <see cref="T:SteamKit2.SteamUser.LoggedOnCallback"/>.
            </summary>
            <param name="details">The details to use for logging on.</param>
            <exception cref="T:System.ArgumentNullException">No logon details were provided.</exception>
            <exception cref="T:System.ArgumentException">Username or password are not set within <paramref name="details"/>.</exception>
        </member>
        <member name="M:SteamKit2.SteamUser.LogOnAnonymous">
            <summary>
            Logs the client into the Steam3 network as an anonymous user.
            The client should already have been connected at this point.
            Results are returned in a <see cref="T:SteamKit2.SteamUser.LoggedOnCallback"/>.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamUser.LogOnAnonymous(SteamKit2.SteamUser.AnonymousLogOnDetails)">
            <summary>
            Logs the client into the Steam3 network as an anonymous user.
            The client should already have been connected at this point.
            Results are returned in a <see cref="T:SteamKit2.SteamUser.LoggedOnCallback"/>.
            </summary>
            <param name="details">The details to use for logging on.</param>
        </member>
        <member name="M:SteamKit2.SteamUser.LogOff">
            <summary>
            Informs the Steam servers that this client wishes to log off from the network.
            The Steam server will disconnect the client, and a <see cref="T:SteamKit2.SteamClient.DisconnectedCallback"/> will be posted.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamUser.SendMachineAuthResponse(SteamKit2.SteamUser.MachineAuthDetails)">
            <summary>
            Sends a machine auth response.
            This should normally be used in response to a <see cref="T:SteamKit2.SteamUser.UpdateMachineAuthCallback"/>.
            </summary>
            <param name="details">The details pertaining to the response.</param>
        </member>
        <member name="M:SteamKit2.SteamUser.RequestWebAPIUserNonce">
            <summary>
            Requests a new WebAPI authentication user nonce.
            Results are returned in a <see cref="T:SteamKit2.SteamUser.WebAPIUserNonceCallback"/>.
            The returned <see cref="T:SteamKit2.AsyncJob`1"/> can also be awaited to retrieve the callback result.
            </summary>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamUser.WebAPIUserNonceCallback"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamUser.AcceptNewLoginKey(SteamKit2.SteamUser.LoginKeyCallback)">
            <summary>
            Accepts the new Login Key provided by a <see cref="T:SteamKit2.SteamUser.LoginKeyCallback"/>.
            </summary>
            <param name="callback">The callback containing the new Login Key.</param>
        </member>
        <member name="M:SteamKit2.SteamUser.HandleMsg(SteamKit2.IPacketMsg)">
            <summary>
            Handles a client message. This should not be called directly.
            </summary>
            <param name="packetMsg">The packet message that contains the data.</param>
        </member>
        <member name="T:SteamKit2.ICallbackMsg">
            <summary>
            A callback message
            </summary>
        </member>
        <member name="P:SteamKit2.ICallbackMsg.JobID">
            <summary>
            The <see cref="P:SteamKit2.ICallbackMsg.JobID"/> that this callback is associated with. If there is no job associated,
            then this will be <see cref="P:JobID.Invalid"/>
            </summary>
        </member>
        <member name="T:SteamKit2.CallbackMsg">
            <summary>
            Represents the base object all callbacks are based off.
            </summary>
        </member>
        <member name="M:SteamKit2.CallbackMsg.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.CallbackMsg"/> class.
            </summary>
        </member>
        <member name="P:SteamKit2.CallbackMsg.JobID">
            <summary>
            Gets or sets the job ID this callback refers to. If it is not a job callback, it will be <see cref="P:JobID.Invalid" />.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamClient">
            <summary>
            Represents a single client that connects to the Steam3 network.
            This class is also responsible for handling the registration of client message handlers and callbacks.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamClient.ConnectedCallback">
            <summary>
            This callback is received after attempting to connect to the Steam network.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamClient.ConnectedCallback.Result">
            <summary>
            Gets the result of the connection attempt.
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:SteamKit2.SteamClient.DisconnectedCallback">
            <summary>
            This callback is received when the steamclient is physically disconnected from the Steam network.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamClient.DisconnectedCallback.UserInitiated">
            <summary>
            If true, the disconnection was initiated by calling <see cref="M:SteamKit2.Internal.CMClient.Disconnect"/>.
            If false, the disconnection was the cause of something not user-controlled, such as a network failure or
            a forcible disconnection by the remote server.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamClient.CMListCallback">
            <summary>
            This callback is received when the client has received the CM list from Steam.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamClient.CMListCallback.Servers">
            <summary>
            Gets the CM server list.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamClient.ServerListCallback">
            <summary>
            This callback is fired when the client receives a list of all publically available Steam3 servers.
            This callback may be fired multiple times for different server lists.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamClient.ServerListCallback.Servers">
            <summary>
            Gets the server list.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamClient.#ctor(System.Net.Sockets.ProtocolType)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.SteamClient"/> class with a specific connection type.
            </summary>
            <param name="type">The connection type to use.</param>
        </member>
        <member name="M:SteamKit2.SteamClient.AddHandler(SteamKit2.ClientMsgHandler)">
            <summary>
            Adds a new handler to the internal list of message handlers.
            </summary>
            <param name="handler">The handler to add.</param>
            <exception cref="T:System.InvalidOperationException">A handler of that type is already registered.</exception>
        </member>
        <member name="M:SteamKit2.SteamClient.RemoveHandler(System.Type)">
            <summary>
            Removes a registered handler by name.
            </summary>
            <param name="handler">The handler name to remove.</param>
        </member>
        <member name="M:SteamKit2.SteamClient.RemoveHandler(SteamKit2.ClientMsgHandler)">
            <summary>
            Removes a registered handler.
            </summary>
            <param name="handler">The handler to remove.</param>
        </member>
        <member name="M:SteamKit2.SteamClient.GetHandler``1">
            <summary>
            Returns a registered handler.
            </summary>
            <typeparam name="T">The type of the handler to cast to. Must derive from ClientMsgHandler.</typeparam>
            <returns>
            A registered handler on success, or null if the handler could not be found.
            </returns>
        </member>
        <member name="M:SteamKit2.SteamClient.GetCallback">
            <summary>
            Gets the next callback object in the queue.
            This function does not dequeue the callback, you must call FreeLastCallback after processing it.
            </summary>
            <returns>The next callback in the queue, or null if no callback is waiting.</returns>
        </member>
        <member name="M:SteamKit2.SteamClient.GetCallback(System.Boolean)">
            <summary>
            Gets the next callback object in the queue, and optionally frees it.
            </summary>
            <param name="freeLast">if set to <c>true</c> this function also frees the last callback if one existed.</param>
            <returns>The next callback in the queue, or null if no callback is waiting.</returns>
        </member>
        <member name="M:SteamKit2.SteamClient.WaitForCallback">
            <summary>
            Blocks the calling thread until a callback object is posted to the queue.
            This function does not dequeue the callback, you must call FreeLastCallback after processing it.
            </summary>
            <returns>The callback object from the queue.</returns>
        </member>
        <member name="M:SteamKit2.SteamClient.WaitForCallback(System.TimeSpan)">
            <summary>
            Blocks the calling thread until a callback object is posted to the queue, or null after the timeout has elapsed.
            This function does not dequeue the callback, you must call FreeLastCallback after processing it.
            </summary>
            <param name="timeout">The length of time to block.</param>
            <returns>A callback object from the queue if a callback has been posted, or null if the timeout has elapsed.</returns>
        </member>
        <member name="M:SteamKit2.SteamClient.WaitForCallback(System.Boolean)">
            <summary>
            Blocks the calling thread until a callback object is posted to the queue, and optionally frees it.
            </summary>
            <param name="freeLast">if set to <c>true</c> this function also frees the last callback.</param>
            <returns>The callback object from the queue.</returns>
        </member>
        <member name="M:SteamKit2.SteamClient.WaitForCallback(System.Boolean,System.TimeSpan)">
            <summary>
            Blocks the calling thread until a callback object is posted to the queue, and optionally frees it.
            </summary>
            <param name="freeLast">if set to <c>true</c> this function also frees the last callback.</param>
            <param name="timeout">The length of time to block.</param>
            <returns>A callback object from the queue if a callback has been posted, or null if the timeout has elapsed.</returns>
        </member>
        <member name="M:SteamKit2.SteamClient.GetAllCallbacks(System.Boolean,System.TimeSpan)">
            <summary>
            Blocks the calling thread until the queue contains a callback object. Returns all callbacks, and optionally frees them.
            </summary>
            <param name="freeLast">if set to <c>true</c> this function also frees all callbacks.</param>
            <param name="timeout">The length of time to block.</param>
            <returns>All current callback objects in the queue.</returns>
        </member>
        <member name="M:SteamKit2.SteamClient.FreeLastCallback">
            <summary>
            Frees the last callback in the queue.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamClient.PostCallback(SteamKit2.CallbackMsg)">
            <summary>
            Posts a callback to the queue. This is normally used directly by client message handlers.
            </summary>
            <param name="msg">The message.</param>
        </member>
        <member name="M:SteamKit2.SteamClient.GetNextJobID">
            <summary>
            Returns the next available JobID for job based messages.
            This function is thread-safe.
            </summary>
            <returns>The next available JobID.</returns>
        </member>
        <member name="M:SteamKit2.SteamClient.OnClientMsgReceived(SteamKit2.IPacketMsg)">
            <summary>
            Called when a client message is received from the network.
            </summary>
            <param name="packetMsg">The packet message.</param>
        </member>
        <member name="M:SteamKit2.SteamClient.OnClientDisconnected(System.Boolean)">
            <summary>
            Called when the client is physically disconnected from Steam3.
            </summary>
        </member>
        <member name="T:SteamKit2.ClientMsgHandler">
            <summary>
            This class implements the base requirements every message handler should inherit from.
            </summary>
        </member>
        <member name="P:SteamKit2.ClientMsgHandler.Client">
            <summary>
            Gets the underlying <see cref="T:SteamKit2.SteamClient"/> for use in sending replies.
            </summary>
        </member>
        <member name="P:SteamKit2.ClientMsgHandler.ExpectDisconnection">
            <summary>
            Gets or sets whether or not the related <see cref="T:SteamKit2.SteamClient" /> should imminently expect the server to close the connection.
            If this is true when the connection is closed, the <see cref="T:SteamKit2.SteamClient.DisconnectedCallback"/>'s <see cref="P:SteamKit2.SteamClient.DisconnectedCallback.UserInitiated"/> property
            will be set to <c>true</c>.
            </summary>
        </member>
        <member name="M:SteamKit2.ClientMsgHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.ClientMsgHandler"/> class.
            </summary>
        </member>
        <member name="M:SteamKit2.ClientMsgHandler.HandleMsg(SteamKit2.IPacketMsg)">
            <summary>
            Handles a client message. This should not be called directly.
            </summary>
            <param name="packetMsg">The packet message that contains the data.</param>
        </member>
        <member name="T:SteamKit2.GameID">
            <summary>
            This 64bit structure represents an app, mod, shortcut, or p2p file on the Steam network.
            </summary>
        </member>
        <member name="T:SteamKit2.GameID.GameType">
            <summary>
            Represents various types of games.
            </summary>
        </member>
        <member name="F:SteamKit2.GameID.GameType.App">
            <summary>
            A Steam application.
            </summary>
        </member>
        <member name="F:SteamKit2.GameID.GameType.GameMod">
            <summary>
            A game modification.
            </summary>
        </member>
        <member name="F:SteamKit2.GameID.GameType.Shortcut">
            <summary>
            A shortcut to a program.
            </summary>
        </member>
        <member name="F:SteamKit2.GameID.GameType.P2P">
            <summary>
            A peer-to-peer file.
            </summary>
        </member>
        <member name="M:SteamKit2.GameID.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.GameID"/> class.
            </summary>
        </member>
        <member name="M:SteamKit2.GameID.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.GameID"/> class.
            </summary>
            <param name="id">The 64bit integer to assign this GameID from.</param>
        </member>
        <member name="M:SteamKit2.GameID.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.GameID"/> class.
            </summary>
            <param name="nAppID">The 32bit app id to assign this GameID from.</param>
        </member>
        <member name="M:SteamKit2.GameID.Set(System.UInt64)">
            <summary>
            Sets the various components of this GameID from a 64bit integer form.
            </summary>
            <param name="gameId">The 64bit integer to assign this GameID from.</param>
        </member>
        <member name="M:SteamKit2.GameID.ToUInt64">
            <summary>
            Converts this GameID into it's 64bit integer form.
            </summary>
            <returns>A 64bit integer representing this GameID.</returns>
        </member>
        <member name="M:SteamKit2.GameID.op_Implicit(SteamKit2.GameID)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:SteamKit2.GameID"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="gid">The GameID to convert..</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SteamKit2.GameID.op_Implicit(SteamKit2.GameID)~System.UInt64">
            <summary>
            Performs an implicit conversion from <see cref="T:SteamKit2.GameID"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="gid">The GameId to convert.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SteamKit2.GameID.op_Implicit(System.UInt64)~SteamKit2.GameID">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:SteamKit2.GameID"/>.
            </summary>
            <param name="id">The 64bit integer representing a GameID to convert.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="P:SteamKit2.GameID.AppID">
            <summary>
            Gets or sets the app id.
            </summary>
            <value>
            The app IDid
            </value>
        </member>
        <member name="P:SteamKit2.GameID.AppType">
            <summary>
            Gets or sets the type of the app.
            </summary>
            <value>
            The type of the app.
            </value>
        </member>
        <member name="P:SteamKit2.GameID.ModID">
            <summary>
            Gets or sets the mod id.
            </summary>
            <value>
            The mod ID.
            </value>
        </member>
        <member name="P:SteamKit2.GameID.IsMod">
            <summary>
            Gets a value indicating whether this instance is a mod.
            </summary>
            <value>
              <c>true</c> if this instance is a mod; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.GameID.IsShortcut">
            <summary>
            Gets a value indicating whether this instance is a shortcut.
            </summary>
            <value>
            	<c>true</c> if this instance is a shortcut; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.GameID.IsP2PFile">
            <summary>
            Gets a value indicating whether this instance is a peer-to-peer file.
            </summary>
            <value>
            	<c>true</c> if this instance is a p2p file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.GameID.IsSteamApp">
            <summary>
            Gets a value indicating whether this instance is a steam app.
            </summary>
            <value>
            	<c>true</c> if this instance is a steam app; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SteamKit2.GameID.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SteamKit2.GameID.Equals(SteamKit2.GameID)">
            <summary>
            Determines whether the specified <see cref="T:SteamKit2.GameID"/> is equal to this instance.
            </summary>
            <param name="gid">The <see cref="T:SteamKit2.GameID"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:SteamKit2.GameID"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SteamKit2.GameID.op_Equality(SteamKit2.GameID,SteamKit2.GameID)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">The left side GameID.</param>
            <param name="b">The right side GameID.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SteamKit2.GameID.op_Inequality(SteamKit2.GameID,SteamKit2.GameID)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">The left side GameID.</param>
            <param name="b">The right side GameID.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SteamKit2.GameID.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SteamKit2.GameID.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:SteamKit2.KeyValue">
            <summary>
            Represents a recursive string key to arbitrary value container.
            </summary>
        </member>
        <member name="M:SteamKit2.KeyValue.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.KeyValue"/> class.
            </summary>
            <param name="name">The optional name of the root key.</param>
            <param name="value">The optional value assigned to the root key.</param>
        </member>
        <member name="F:SteamKit2.KeyValue.Invalid">
            <summary>
            Represents an invalid <see cref="T:SteamKit2.KeyValue"/> given when a searched for child does not exist.
            </summary>
        </member>
        <member name="P:SteamKit2.KeyValue.Name">
            <summary>
            Gets or sets the name of this instance.
            </summary>
        </member>
        <member name="P:SteamKit2.KeyValue.Value">
            <summary>
            Gets or sets the value of this instance.
            </summary>
        </member>
        <member name="P:SteamKit2.KeyValue.Children">
            <summary>
            Gets the children of this instance.
            </summary>
        </member>
        <member name="P:SteamKit2.KeyValue.Item(System.String)">
            <summary>
            Gets or sets the child <see cref="T:SteamKit2.KeyValue" /> with the specified key.
            When retrieving by key, if no child with the given key exists, <see cref="F:SteamKit2.KeyValue.Invalid" /> is returned.
            </summary>
        </member>
        <member name="M:SteamKit2.KeyValue.AsString">
            <summary>
            Returns the value of this instance as a string.
            </summary>
            <returns>The value of this instance as a string.</returns>
        </member>
        <member name="M:SteamKit2.KeyValue.AsUnsignedByte(System.Byte)">
            <summary>
            Attempts to convert and return the value of this instance as an unsigned byte.
            If the conversion is invalid, the default value is returned.
            </summary>
            <param name="defaultValue">The default value to return if the conversion is invalid.</param>
            <returns>The value of this instance as an unsigned byte.</returns>
        </member>
        <member name="M:SteamKit2.KeyValue.AsUnsignedShort(System.UInt16)">
            <summary>
            Attempts to convert and return the value of this instance as an unsigned short.
            If the conversion is invalid, the default value is returned.
            </summary>
            <param name="defaultValue">The default value to return if the conversion is invalid.</param>
            <returns>The value of this instance as an unsigned short.</returns>
        </member>
        <member name="M:SteamKit2.KeyValue.AsInteger(System.Int32)">
            <summary>
            Attempts to convert and return the value of this instance as an integer.
            If the conversion is invalid, the default value is returned.
            </summary>
            <param name="defaultValue">The default value to return if the conversion is invalid.</param>
            <returns>The value of this instance as an integer.</returns>
        </member>
        <member name="M:SteamKit2.KeyValue.AsUnsignedInteger(System.UInt32)">
            <summary>
            Attempts to convert and return the value of this instance as an unsigned integer.
            If the conversion is invalid, the default value is returned.
            </summary>
            <param name="defaultValue">The default value to return if the conversion is invalid.</param>
            <returns>The value of this instance as an unsigned integer.</returns>
        </member>
        <member name="M:SteamKit2.KeyValue.AsLong(System.Int64)">
            <summary>
            Attempts to convert and return the value of this instance as a long.
            If the conversion is invalid, the default value is returned.
            </summary>
            <param name="defaultValue">The default value to return if the conversion is invalid.</param>
            <returns>The value of this instance as a long.</returns>
        </member>
        <member name="M:SteamKit2.KeyValue.AsUnsignedLong(System.UInt64)">
            <summary>
            Attempts to convert and return the value of this instance as an unsigned long.
            If the conversion is invalid, the default value is returned.
            </summary>
            <param name="defaultValue">The default value to return if the conversion is invalid.</param>
            <returns>The value of this instance as an unsigned long.</returns>
        </member>
        <member name="M:SteamKit2.KeyValue.AsFloat(System.Single)">
            <summary>
            Attempts to convert and return the value of this instance as a float.
            If the conversion is invalid, the default value is returned.
            </summary>
            <param name="defaultValue">The default value to return if the conversion is invalid.</param>
            <returns>The value of this instance as a float.</returns>
        </member>
        <member name="M:SteamKit2.KeyValue.AsBoolean(System.Boolean)">
            <summary>
            Attempts to convert and return the value of this instance as a boolean.
            If the conversion is invalid, the default value is returned.
            </summary>
            <param name="defaultValue">The default value to return if the conversion is invalid.</param>
            <returns>The value of this instance as a boolean.</returns>
        </member>
        <member name="M:SteamKit2.KeyValue.AsEnum``1(``0)">
            <summary>
            Attempts to convert and return the value of this instance as an enum.
            If the conversion is invalid, the default value is returned.
            </summary>
            <param name="defaultValue">The default value to return if the conversion is invalid.</param>
            <returns>The value of this instance as an enum.</returns>
        </member>
        <member name="M:SteamKit2.KeyValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SteamKit2.KeyValue.LoadAsText(System.String)">
            <summary>
            Attempts to load the given filename as a text <see cref="T:SteamKit2.KeyValue"/>.
            </summary>
            <param name="path">The path to the file to load.</param>
            <returns>a <see cref="T:SteamKit2.KeyValue"/> instance if the load was successful, or <c>null</c> on failure.</returns>
            <remarks>
            This method will swallow any exceptions that occur when reading, use <see cref="M:SteamKit2.KeyValue.ReadAsText(System.IO.Stream)"/> if you wish to handle exceptions.
            </remarks>
        </member>
        <member name="M:SteamKit2.KeyValue.LoadAsBinary(System.String)">
            <summary>
            Attempts to load the given filename as a binary <see cref="T:SteamKit2.KeyValue"/>.
            </summary>
            <param name="path">The path to the file to load.</param>
            <returns>a <see cref="T:SteamKit2.KeyValue"/> instance if the load was successful, or <c>null</c> on failure.</returns>
        </member>
        <member name="M:SteamKit2.KeyValue.TryLoadAsBinary(System.String,SteamKit2.KeyValue@)">
            <summary>
            Attempts to load the given filename as a binary <see cref="T:SteamKit2.KeyValue"/>.
            </summary>
            <param name="path">The path to the file to load.</param>
            <param name="keyValue">The resulting <see cref="T:SteamKit2.KeyValue"/> object if the load was successful, or <c>null</c> if unsuccessful.</param>
            <returns><c>true</c> if the load was successful, or <c>false</c> on failure.</returns>
        </member>
        <member name="M:SteamKit2.KeyValue.LoadFromString(System.String)">
            <summary>
            Attempts to create an instance of <see cref="T:SteamKit2.KeyValue"/> from the given input text.
            </summary>
            <param name="input">The input text to load.</param>
            <returns>a <see cref="T:SteamKit2.KeyValue"/> instance if the load was successful, or <c>null</c> on failure.</returns>
            <remarks>
            This method will swallow any exceptions that occur when reading, use <see cref="M:SteamKit2.KeyValue.ReadAsText(System.IO.Stream)"/> if you wish to handle exceptions.
            </remarks>
        </member>
        <member name="M:SteamKit2.KeyValue.ReadAsText(System.IO.Stream)">
            <summary>
            Populate this instance from the given <see cref="T:System.IO.Stream"/> as a text <see cref="T:SteamKit2.KeyValue"/>.
            </summary>
            <param name="input">The input <see cref="T:System.IO.Stream"/> to read from.</param>
            <returns><c>true</c> if the read was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SteamKit2.KeyValue.ReadFileAsText(System.String)">
            <summary>
            Opens and reads the given filename as text.
            </summary>
            <seealso cref="M:SteamKit2.KeyValue.ReadAsText(System.IO.Stream)"/>
            <param name="filename">The file to open and read.</param>
            <returns><c>true</c> if the read was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SteamKit2.KeyValue.SaveToFile(System.String,System.Boolean)">
            <summary>
            Saves this instance to file.
            </summary>
            <param name="path">The file path to save to.</param>
            <param name="asBinary">If set to <c>true</c>, saves this instance as binary.</param>
        </member>
        <member name="M:SteamKit2.KeyValue.SaveToStream(System.IO.Stream,System.Boolean)">
            <summary>
            Saves this instance to a given <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to save to.</param>
            <param name="asBinary">If set to <c>true</c>, saves this instance as binary.</param>
        </member>
        <member name="M:SteamKit2.KeyValue.ReadAsBinary(System.IO.Stream)">
            <summary>
            Populate this instance from the given <see cref="T:System.IO.Stream"/> as a binary <see cref="T:SteamKit2.KeyValue"/>.
            </summary>
            <param name="input">The input <see cref="T:System.IO.Stream"/> to read from.</param>
            <returns><c>true</c> if the read was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SteamKit2.KeyValue.TryReadAsBinary(System.IO.Stream)">
            <summary>
            Populate this instance from the given <see cref="T:System.IO.Stream"/> as a binary <see cref="T:SteamKit2.KeyValue"/>.
            </summary>
            <param name="input">The input <see cref="T:System.IO.Stream"/> to read from.</param>
            <returns><c>true</c> if the read was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:SteamKit2.Steam3Manifest">
            <summary>
            Represents the binary Steam3 manifest format.
            </summary>
        </member>
        <member name="T:SteamKit2.IDebugListener">
            <summary>
            Interface all debug log listeners must implement in order to register themselves.
            </summary>
        </member>
        <member name="M:SteamKit2.IDebugListener.WriteLine(System.String,System.String)">
            <summary>
            Called when the DebugLog wishes to inform listeners of debug spew.
            </summary>
            <param name="category">The category of the message.</param>
            <param name="msg">The message to log.</param>
        </member>
        <member name="T:SteamKit2.DebugLog">
            <summary>
            Represents the root debug logging functionality. 
            </summary>
        </member>
        <member name="P:SteamKit2.DebugLog.Enabled">
            <summary>
            Gets or sets a value indicating whether debug logging is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SteamKit2.DebugLog.#cctor">
            <summary>
            Initializes the <see cref="T:SteamKit2.DebugLog"/> class.
            </summary>
        </member>
        <member name="M:SteamKit2.DebugLog.AddListener(SteamKit2.IDebugListener)">
            <summary>
            Adds a listener.
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="M:SteamKit2.DebugLog.AddListener(System.Action{System.String,System.String})">
            <summary>
            Adds an action listener.
            </summary>
            <param name="listenerAction">The listener action.</param>
        </member>
        <member name="M:SteamKit2.DebugLog.RemoveListener(SteamKit2.IDebugListener)">
            <summary>
            Removes a listener.
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="M:SteamKit2.DebugLog.RemoveListener(System.Action{System.String,System.String})">
            <summary>
            Removes a listener.
            </summary>
            <param name="listenerAction">The previously registered listener action.</param>
        </member>
        <member name="M:SteamKit2.DebugLog.ClearListeners">
            <summary>
            Clears all registered listeners from the <see cref="T:SteamKit2.DebugLog"/>.
            </summary>
        </member>
        <member name="M:SteamKit2.DebugLog.WriteLine(System.String,System.String,System.Object[])">
            <summary>
            Writes a line to the debug log, informing all listeners.
            </summary>
            <param name="category">The category of the message.</param>
            <param name="msg">A composite format string.</param>
            <param name="args">An System.Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:SteamKit2.DebugLog.Assert(System.Boolean,System.String,System.String)">
            <summary>
            Checks for a condition; if the condition is <c>false</c>, outputs a specified message and displays a message box that shows the call stack.
            This method is equivalent to System.Diagnostics.Debug.Assert, however, it is tailored to spew failed assertions into the SteamKit debug log.
            </summary>
            <param name="condition">The conditional expression to evaluate. If the condition is <c>true</c>, the specified message is not sent and the message box is not displayed.</param>
            <param name="category">The category of the message.</param>
            <param name="message">The message to display if the assertion fails.</param>
        </member>
        <member name="T:SteamKit2.DateUtils">
            <summary>
            Contains various utility functions for dealing with dates.
            </summary>
        </member>
        <member name="M:SteamKit2.DateUtils.DateTimeFromUnixTime(System.UInt64)">
            <summary>
            Converts a given unix timestamp to a DateTime
            </summary>
            <param name="unixTime">A unix timestamp expressed as seconds since the unix epoch</param>
            <returns>DateTime representation</returns>
        </member>
        <member name="M:SteamKit2.DateUtils.DateTimeToUnixTime(System.DateTime)">
            <summary>
            Converts a given DateTime into a unix timestamp representing seconds since the unix epoch.
            </summary>
            <param name="time">DateTime to be expressed</param>
            <returns>64-bit wide representation</returns>
        </member>
        <member name="T:SteamKit2.MsgUtil">
            <summary>
            Contains various utility functions for handling EMsgs.
            </summary>
        </member>
        <member name="M:SteamKit2.MsgUtil.GetMsg(System.UInt32)">
            <summary>
            Strips off the protobuf message flag and returns an EMsg.
            </summary>
            <param name="msg">The message number.</param>
            <returns>The underlying EMsg.</returns>
        </member>
        <member name="M:SteamKit2.MsgUtil.GetGCMsg(System.UInt32)">
            <summary>
            Strips off the protobuf message flag and returns an EMsg.
            </summary>
            <param name="msg">The message number.</param>
            <returns>The underlying EMsg.</returns>
        </member>
        <member name="M:SteamKit2.MsgUtil.GetMsg(SteamKit2.EMsg)">
            <summary>
            Strips off the protobuf message flag and returns an EMsg.
            </summary>
            <param name="msg">The message number.</param>
            <returns>The underlying EMsg.</returns>
        </member>
        <member name="M:SteamKit2.MsgUtil.IsProtoBuf(System.UInt32)">
            <summary>
            Determines whether message is protobuf flagged.
            </summary>
            <param name="msg">The message.</param>
            <returns>
              <c>true</c> if this message is protobuf flagged; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SteamKit2.MsgUtil.IsProtoBuf(SteamKit2.EMsg)">
            <summary>
            Determines whether message is protobuf flagged.
            </summary>
            <param name="msg">The message.</param>
            <returns>
              <c>true</c> if this message is protobuf flagged; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SteamKit2.MsgUtil.MakeMsg(SteamKit2.EMsg,System.Boolean)">
            <summary>
            Crafts an EMsg, flagging it if required.
            </summary>
            <param name="msg">The EMsg to flag.</param>
            <param name="protobuf">if set to <c>true</c>, the message is protobuf flagged.</param>
            <returns>A crafted EMsg, flagged if requested.</returns>
        </member>
        <member name="M:SteamKit2.MsgUtil.MakeGCMsg(System.UInt32,System.Boolean)">
            <summary>
            Crafts an EMsg, flagging it if required.
            </summary>
            <param name="msg">The EMsg to flag.</param>
            <param name="protobuf">if set to <c>true</c>, the message is protobuf flagged.</param>
            <returns>A crafted EMsg, flagged if requested.</returns>
        </member>
        <member name="M:SteamKit2.TcpConnection.Connect(System.Threading.Tasks.Task{System.Net.IPEndPoint},System.Int32)">
            <summary>
            Connects to the specified end point.
            </summary>
            <param name="endPointTask">Task returning the end point.</param>
            <param name="timeout">Timeout in milliseconds</param>
        </member>
        <member name="M:SteamKit2.TcpConnection.NetLoop">
            <summary>
            Nets the loop.
            </summary>
        </member>
        <member name="F:SteamKit2.UdpConnection.RESEND_DELAY">
            <summary>
            Seconds to wait before sending packets.
            </summary>
        </member>
        <member name="F:SteamKit2.UdpConnection.TIMEOUT_DELAY">
            <summary>
            Seconds to wait before considering the connection dead.
            </summary>
        </member>
        <member name="F:SteamKit2.UdpConnection.RESEND_COUNT">
            <summary>
            Maximum number of packets to resend when RESEND_DELAY is exceeded.
            </summary>
        </member>
        <member name="F:SteamKit2.UdpConnection.AHEAD_COUNT">
            <summary>
            Maximum number of packets that we can be waiting on at a time.
            </summary>
        </member>
        <member name="F:SteamKit2.UdpConnection.state">
            <summary>
            Contains information about the state of the connection, used to filter out packets that are
            unexpected or not valid given the state of the connection.
            </summary>
        </member>
        <member name="F:SteamKit2.UdpConnection.outSeq">
            <summary>
            The next outgoing sequence number to be used.
            </summary>
        </member>
        <member name="F:SteamKit2.UdpConnection.outSeqSent">
            <summary>
            The highest sequence number of an outbound packet that has been sent.
            </summary>
        </member>
        <member name="F:SteamKit2.UdpConnection.outSeqAcked">
            <summary>
            The sequence number of the highest packet acknowledged by the server.
            </summary>
        </member>
        <member name="F:SteamKit2.UdpConnection.inSeq">
            <summary>
            The sequence number we plan on acknowledging receiving with the next Ack. All packets below or equal
            to inSeq *must* have been received, but not necessarily handled.
            </summary>
        </member>
        <member name="F:SteamKit2.UdpConnection.inSeqAcked">
            <summary>
            The highest sequence number we've acknowledged receiving.
            </summary>
        </member>
        <member name="F:SteamKit2.UdpConnection.inSeqHandled">
            <summary>
            The highest sequence number we've processed.
            </summary>
        </member>
        <member name="M:SteamKit2.UdpConnection.Connect(System.Threading.Tasks.Task{System.Net.IPEndPoint},System.Int32)">
            <summary>
            Connects to the specified CM server.
            </summary>
            <param name="endPointTask">Task returning the CM server.</param>
            <param name="timeout">Timeout in milliseconds</param>
        </member>
        <member name="M:SteamKit2.UdpConnection.Disconnect">
            <summary>
            Disconnects this instance, blocking until the queue of messages is empty or the connection
            is otherwise terminated.
            </summary>
        </member>
        <member name="M:SteamKit2.UdpConnection.Send(SteamKit2.IClientMsg)">
            <summary>
            Serializes and sends the provided message to the server in as many packets as is necessary.
            </summary>
            <param name="clientMsg">The ClientMsg</param>
        </member>
        <member name="M:SteamKit2.UdpConnection.SendData(System.IO.MemoryStream)">
            <summary>
            Sends the data sequenced as a single message, splitting it into multiple parts if necessary.
            </summary>
            <param name="ms">The data to send.</param>
        </member>
        <member name="M:SteamKit2.UdpConnection.SendSequenced(SteamKit2.UdpPacket)">
            <summary>
            Sends the packet as a sequenced, reliable packet.
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:SteamKit2.UdpConnection.SendSequenced(SteamKit2.UdpPacket[])">
            <summary>
            Sends the packets as one sequenced, reliable net message.
            </summary>
            <param name="packets">The packets that make up the single net message</param>
        </member>
        <member name="M:SteamKit2.UdpConnection.SendPacket(SteamKit2.UdpPacket)">
            <summary>
            Sends a packet immediately.
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:SteamKit2.UdpConnection.SendAck">
            <summary>
            Sends a datagram Ack, used when an Ack needs to be sent but there is no data response to piggy-back on.
            </summary>
        </member>
        <member name="M:SteamKit2.UdpConnection.SendPendingMessages">
            <summary>
            Sends or resends sequenced messages, if necessary. Also responsible for throttling
            the rate at which they are sent.
            </summary>
        </member>
        <member name="M:SteamKit2.UdpConnection.ReadyMessageParts">
            <summary>
            Returns the number of message parts in the next message.
            </summary>
            <returns>Non-zero number of message parts if a message is ready to be handled, 0 otherwise</returns>
        </member>
        <member name="M:SteamKit2.UdpConnection.DispatchMessage">
            <summary>
            Dispatches up to one message to the rest of SteamKit
            </summary>
            <returns>True if a message was dispatched, false otherwise</returns>
        </member>
        <member name="M:SteamKit2.UdpConnection.NetLoop(System.Object)">
            <summary>
            Processes incoming packets, maintains connection consistency, and oversees outgoing packets.
            </summary>
        </member>
        <member name="M:SteamKit2.UdpConnection.ReceivePacket(SteamKit2.UdpPacket)">
            <summary>
            Receives the packet, performs all sanity checks and then passes it along as necessary.
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:SteamKit2.UdpConnection.ReceiveChallenge(SteamKit2.UdpPacket)">
            <summary>
            Receives the challenge and responds with a Connect request
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:SteamKit2.UdpConnection.ReceiveAccept(SteamKit2.UdpPacket)">
            <summary>
            Receives the notification of an accepted connection and sets the connection id that will be used for the
            connection's duration.
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:SteamKit2.UdpConnection.ReceiveData(SteamKit2.UdpPacket)">
            <summary>
            Receives typical data packets before dispatching them for consumption by the rest of SteamKit
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:SteamKit2.UdpConnection.SetNetEncryptionFilter(SteamKit2.INetFilterEncryption)">
            <summary>
            Sets the network encryption filter for this connection
            </summary>
            <param name="filter">filter implementing <see cref="T:SteamKit2.INetFilterEncryption"/></param>
        </member>
        <member name="T:SteamKit2.NetMsgEventArgs">
            <summary>
            Represents data that has been received over the network.
            </summary>
        </member>
        <member name="E:SteamKit2.Connection.NetMsgReceived">
            <summary>
            Occurs when a net message is recieved over the network.
            </summary>
        </member>
        <member name="M:SteamKit2.Connection.OnNetMsgReceived(SteamKit2.NetMsgEventArgs)">
            <summary>
            Raises the <see cref="E:NetMsgReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:SteamKit2.NetMsgEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:SteamKit2.Connection.CurrentEndPoint">
            <summary>
            The <see cref="T:System.Net.IPEndPoint" /> of the current connection.
            This is non-null between <see cref="E:Connected"/> and <see cref="E:Disconnected"/>, inclusive.
            </summary>
        </member>
        <member name="E:SteamKit2.Connection.Connected">
            <summary>
            Occurs when the physical connection is established.
            </summary>
        </member>
        <member name="E:SteamKit2.Connection.Disconnected">
            <summary>
            Occurs when the physical connection is broken.
            </summary>
        </member>
        <member name="M:SteamKit2.Connection.Connect(System.Threading.Tasks.Task{System.Net.IPEndPoint},System.Int32)">
            <summary>
            Connects to the specified end point.
            </summary>
            <param name="endPointTask">Task returning the end point.</param>
            <param name="timeout">Timeout in milliseconds</param>
        </member>
        <member name="M:SteamKit2.Connection.Disconnect">
            <summary>
            Disconnects this instance.
            </summary>
        </member>
        <member name="M:SteamKit2.Connection.Send(SteamKit2.IClientMsg)">
            <summary>
            Sends the specified client net message.
            </summary>
            <param name="clientMsg">The client net message.</param>
        </member>
        <member name="M:SteamKit2.Connection.GetLocalIP">
            <summary>
            Gets the local IP.
            </summary>
            <returns>The local IP.</returns>
        </member>
        <member name="M:SteamKit2.Connection.SetNetEncryptionFilter(SteamKit2.INetFilterEncryption)">
            <summary>
            Sets the network encryption filter for this connection
            </summary>
            <param name="filter">filter implementing <see cref="T:SteamKit2.INetFilterEncryption"/></param>
        </member>
        <member name="T:SteamKit2.KeyDictionary">
            <summary>
            Contains the public keys that Steam uses for each of the <see cref="T:SteamKit2.EUniverse"/>
            types.
            </summary>
        </member>
        <member name="M:SteamKit2.KeyDictionary.GetPublicKey(SteamKit2.EUniverse)">
            <summary>
            Gets the public key for the given universe.
            </summary>
            <returns>The public key.</returns>
            <param name="eUniverse">The universe.</param>
        </member>
        <member name="T:SteamKit2.RSACrypto">
            <summary>
            Handles encrypting and decrypting using the RSA public key encryption
            algorithm.
            </summary>
        </member>
        <member name="M:SteamKit2.RSACrypto.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.RSACrypto"/> class.
            </summary>
            <param name="key">The public key to encrypt with.</param>
        </member>
        <member name="M:SteamKit2.RSACrypto.Encrypt(System.Byte[])">
            <summary>
            Encrypt the specified input.
            </summary>
            <returns>The encrypted input.</returns>
            <param name="input">The input to encrypt.</param>
        </member>
        <member name="M:SteamKit2.RSACrypto.Dispose">
            <summary>
            Disposes of this class.
            </summary>
        </member>
        <member name="T:SteamKit2.CryptoHelper">
            <summary>
            Provides Crypto functions used in Steam protocols
            </summary>
        </member>
        <member name="M:SteamKit2.CryptoHelper.SHAHash(System.Byte[])">
            <summary>
            Performs an SHA1 hash of an input byte array
            </summary>
        </member>
        <member name="M:SteamKit2.CryptoHelper.AESEncrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Encrypts using AES/CBC/PKCS7 an input byte array with a given key and IV
            </summary>
        </member>
        <member name="M:SteamKit2.CryptoHelper.AESDecrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Decrypts an input byte array using AES/CBC/PKCS7 with a given key and IV
            </summary>
        </member>
        <member name="M:SteamKit2.CryptoHelper.SymmetricEncryptWithIV(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Performs an encryption using AES/CBC/PKCS7 with an input byte array and key, with a random IV prepended using AES/ECB/None
            </summary>
        </member>
        <member name="M:SteamKit2.CryptoHelper.SymmetricEncrypt(System.Byte[],System.Byte[])">
            <summary>
            Performs an encryption using AES/CBC/PKCS7 with an input byte array and key, with a random IV prepended using AES/ECB/None
            </summary>
        </member>
        <member name="M:SteamKit2.CryptoHelper.SymmetricEncryptWithHMACIV(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Performs an encryption using AES/CBC/PKCS7 with an input byte array and key, with a IV (comprised of random bytes and the HMAC-SHA1 of the random bytes and plaintext) prepended using AES/ECB/None
            </summary>
        </member>
        <member name="M:SteamKit2.CryptoHelper.SymmetricDecrypt(System.Byte[],System.Byte[])">
            <summary>
            Decrypts using AES/CBC/PKCS7 with an input byte array and key, using the random IV prepended using AES/ECB/None
            </summary>
        </member>
        <member name="M:SteamKit2.CryptoHelper.SymmetricDecryptHMACIV(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Decrypts using AES/CBC/PKCS7 with an input byte array and key, using the IV (comprised of random bytes and the HMAC-SHA1 of the random bytes and plaintext) prepended using AES/ECB/None
            </summary>
        </member>
        <member name="M:SteamKit2.CryptoHelper.SymmetricDecrypt(System.Byte[],System.Byte[],System.Byte[]@)">
            <summary>
            Decrypts using AES/CBC/PKCS7 with an input byte array and key, using the random IV prepended using AES/ECB/None
            </summary>
        </member>
        <member name="M:SteamKit2.CryptoHelper.VerifyAndDecryptPassword(System.Byte[],System.String)">
            <summary>
            Verifies and performs a symmetricdecrypt on the input using the given password as a key
            </summary>
        </member>
        <member name="M:SteamKit2.CryptoHelper.SymmetricDecryptECB(System.Byte[],System.Byte[])">
            <summary>
            Decrypts using AES/ECB/PKCS7
            </summary>
        </member>
        <member name="M:SteamKit2.CryptoHelper.CRCHash(System.Byte[])">
            <summary>
            Performs CRC32 on an input byte array using the CrcStandard.Crc32Bit parameters
            </summary>
        </member>
        <member name="M:SteamKit2.CryptoHelper.AdlerHash(System.Byte[])">
            <summary>
            Performs an Adler32 on the given input
            </summary>
        </member>
        <member name="M:SteamKit2.CryptoHelper.GenerateRandomBlock(System.Int32)">
            <summary>
            Generate an array of random bytes given the input length
            </summary>
        </member>
        <member name="T:SteamKit2.SteamID">
            <summary>
            This 64-bit structure is used for identifying various objects on the Steam network.
            </summary>
        </member>
        <member name="F:SteamKit2.SteamID.AllInstances">
            <summary>
            The account instance value when representing all instanced <see cref="T:SteamKit2.SteamID">SteamIDs</see>.
            </summary>
        </member>
        <member name="F:SteamKit2.SteamID.DesktopInstance">
            <summary>
            The account instance value for a desktop <see cref="T:SteamKit2.SteamID"/>.
            </summary>
        </member>
        <member name="F:SteamKit2.SteamID.ConsoleInstance">
            <summary>
            The account instance value for a console <see cref="T:SteamKit2.SteamID"/>.
            </summary>
        </member>
        <member name="F:SteamKit2.SteamID.WebInstance">
            <summary>
            The account instance for mobile or web based <see cref="T:SteamKit2.SteamID">SteamIDs</see>.
            </summary>
        </member>
        <member name="F:SteamKit2.SteamID.AccountIDMask">
            <summary>
            Masking value used for the account id.
            </summary>
        </member>
        <member name="F:SteamKit2.SteamID.AccountInstanceMask">
            <summary>
            Masking value used for packing chat instance flags into a <see cref="T:SteamKit2.SteamID"/>.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamID.ChatInstanceFlags">
            <summary>
            Represents various flags a chat <see cref="T:SteamKit2.SteamID"/> may have, packed into its instance.
            </summary>
        </member>
        <member name="F:SteamKit2.SteamID.ChatInstanceFlags.Clan">
            <summary>
            This flag is set for clan based chat <see cref="T:SteamKit2.SteamID">SteamIDs</see>.
            </summary>
        </member>
        <member name="F:SteamKit2.SteamID.ChatInstanceFlags.Lobby">
            <summary>
            This flag is set for lobby based chat <see cref="T:SteamKit2.SteamID">SteamIDs</see>.
            </summary>
        </member>
        <member name="F:SteamKit2.SteamID.ChatInstanceFlags.MMSLobby">
            <summary>
            This flag is set for matchmaking lobby based chat <see cref="T:SteamKit2.SteamID">SteamIDs</see>.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamID.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.SteamID"/> class.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamID.#ctor(System.UInt32,SteamKit2.EUniverse,SteamKit2.EAccountType)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.SteamID"/> class.
            </summary>
            <param name="unAccountID">The account ID.</param>
            <param name="eUniverse">The universe.</param>
            <param name="eAccountType">The account type.</param>
        </member>
        <member name="M:SteamKit2.SteamID.#ctor(System.UInt32,System.UInt32,SteamKit2.EUniverse,SteamKit2.EAccountType)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.SteamID"/> class.
            </summary>
            <param name="unAccountID">The account ID.</param>
            <param name="unInstance">The instance.</param>
            <param name="eUniverse">The universe.</param>
            <param name="eAccountType">The account type.</param>
        </member>
        <member name="M:SteamKit2.SteamID.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.SteamID"/> class.
            </summary>
            <param name="id">The 64bit integer to assign this SteamID from.</param>
        </member>
        <member name="M:SteamKit2.SteamID.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.SteamID"/> class from a Steam2 "STEAM_" rendered form.
            This constructor assumes the rendered SteamID is in the public universe.
            </summary>
            <param name="steamId">A "STEAM_" rendered form of the SteamID.</param>
        </member>
        <member name="M:SteamKit2.SteamID.#ctor(System.String,SteamKit2.EUniverse)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.SteamID"/> class from a Steam2 "STEAM_" rendered form and universe.
            </summary>
            <param name="steamId">A "STEAM_" rendered form of the SteamID.</param>
            <param name="eUniverse">The universe the SteamID belongs to.</param>
        </member>
        <member name="M:SteamKit2.SteamID.Set(System.UInt32,SteamKit2.EUniverse,SteamKit2.EAccountType)">
            <summary>
            Sets the various components of this SteamID instance.
            </summary>
            <param name="unAccountID">The account ID.</param>
            <param name="eUniverse">The universe.</param>
            <param name="eAccountType">The account type.</param>
        </member>
        <member name="M:SteamKit2.SteamID.InstancedSet(System.UInt32,System.UInt32,SteamKit2.EUniverse,SteamKit2.EAccountType)">
            <summary>
            Sets the various components of this SteamID instance.
            </summary>
            <param name="unAccountID">The account ID.</param>
            <param name="unInstance">The instance.</param>
            <param name="eUniverse">The universe.</param>
            <param name="eAccountType">The account type.</param>
        </member>
        <member name="M:SteamKit2.SteamID.SetFromString(System.String,SteamKit2.EUniverse)">
            <summary>
            Sets the various components of this SteamID from a Steam2 "STEAM_" rendered form and universe.
            </summary>
            <param name="steamId">A "STEAM_" rendered form of the SteamID.</param>
            <param name="eUniverse">The universe the SteamID belongs to.</param>
            <returns><c>true</c> if this instance was successfully assigned; otherwise, <c>false</c> if the given string was in an invalid format.</returns>
        </member>
        <member name="M:SteamKit2.SteamID.SetFromSteam3String(System.String)">
            <summary>
            Sets the various components of this SteamID from a Steam3 "[X:1:2:3]" rendered form and universe.
            </summary>
            <param name="steamId">A "[X:1:2:3]" rendered form of the SteamID.</param>
            <returns><c>true</c> if this instance was successfully assigned; otherwise, <c>false</c> if the given string was in an invalid format.</returns>
        </member>
        <member name="M:SteamKit2.SteamID.SetFromUInt64(System.UInt64)">
            <summary>
            Sets the various components of this SteamID from a 64bit integer form.
            </summary>
            <param name="ulSteamID">The 64bit integer to assign this SteamID from.</param>
        </member>
        <member name="M:SteamKit2.SteamID.ConvertToUInt64">
            <summary>
            Converts this SteamID into it's 64bit integer form.
            </summary>
            <returns>A 64bit integer representing this SteamID.</returns>
        </member>
        <member name="M:SteamKit2.SteamID.GetStaticAccountKey">
            <summary>
            Returns a static account key used for grouping accounts with differing instances.
            </summary>
            <returns>A 64bit static account key.</returns>
        </member>
        <member name="P:SteamKit2.SteamID.IsBlankAnonAccount">
            <summary>
            Gets a value indicating whether this instance is a blank anonymous account
            </summary>
            <value>
            	<c>true</c> if this instance is a blank anon account; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.SteamID.IsGameServerAccount">
            <summary>
            Gets a value indicating whether this instance is a game server account.
            </summary>
            <value>
            	<c>true</c> if this instance is a game server account; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.SteamID.IsPersistentGameServerAccount">
            <summary>
            Gets a value indicating whether this instance is a persistent game server account.
            </summary>
            <value>
            	<c>true</c> if this instance is a persistent game server account; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.SteamID.IsAnonGameServerAccount">
            <summary>
            Gets a value indicating whether this instance is an anonymous game server account.
            </summary>
            <value>
            	<c>true</c> if this instance is an anon game server account; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.SteamID.IsContentServerAccount">
            <summary>
            Gets a value indicating whether this instance is a content server account.
            </summary>
            <value>
            	<c>true</c> if this instance is a content server account; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.SteamID.IsClanAccount">
            <summary>
            Gets a value indicating whether this instance is a clan account.
            </summary>
            <value>
            	<c>true</c> if this instance is a clan account; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.SteamID.IsChatAccount">
            <summary>
            Gets a value indicating whether this instance is a chat account.
            </summary>
            <value>
            	<c>true</c> if this instance is a chat account; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.SteamID.IsLobby">
            <summary>
            Gets a value indicating whether this instance is a lobby.
            </summary>
            <value>
              <c>true</c> if this instance is a lobby; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.SteamID.IsIndividualAccount">
            <summary>
            Gets a value indicating whether this instance is an individual account.
            </summary>
            <value>
            	<c>true</c> if this instance is an individual account; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.SteamID.IsAnonAccount">
            <summary>
            Gets a value indicating whether this instance is an anonymous account.
            </summary>
            <value>
            	<c>true</c> if this instance is an anon account; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.SteamID.IsAnonUserAccount">
            <summary>
            Gets a value indicating whether this instance is an anonymous user account.
            </summary>
            <value>
            	<c>true</c> if this instance is an anon user account; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.SteamID.IsConsoleUserAccount">
            <summary>
            Gets a value indicating whether this instance is a console user account.
            </summary>
            <value>
            	<c>true</c> if this instance is a console user account; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.SteamID.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.SteamID.AccountID">
            <summary>
            Gets or sets the account id.
            </summary>
            <value>
            The account id.
            </value>
        </member>
        <member name="P:SteamKit2.SteamID.AccountInstance">
            <summary>
            Gets or sets the account instance.
            </summary>
            <value>
            The account instance.
            </value>
        </member>
        <member name="P:SteamKit2.SteamID.AccountType">
            <summary>
            Gets or sets the account type.
            </summary>
            <value>
            The account type.
            </value>
        </member>
        <member name="P:SteamKit2.SteamID.AccountUniverse">
            <summary>
            Gets or sets the account universe.
            </summary>
            <value>
            The account universe.
            </value>
        </member>
        <member name="M:SteamKit2.SteamID.Render(System.Boolean)">
            <summary>
            Renders this instance into it's Steam2 "STEAM_" or Steam3 representation.
            </summary>
            <param name="steam3">If set to <c>true</c>, the Steam3 rendering will be returned; otherwise, the Steam2 STEAM_ rendering.</param>
            <returns>
            A string Steam2 "STEAM_" representation of this SteamID, or a Steam3 representation.
            </returns>
        </member>
        <member name="M:SteamKit2.SteamID.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SteamKit2.SteamID.op_Implicit(SteamKit2.SteamID)~System.UInt64">
            <summary>
            Performs an implicit conversion from <see cref="T:SteamKit2.SteamID"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="sid">The SteamID.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SteamKit2.SteamID.op_Implicit(System.UInt64)~SteamKit2.SteamID">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:SteamKit2.SteamID"/>.
            </summary>
            <param name="id">A 64bit integer representing the SteamID.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SteamKit2.SteamID.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SteamKit2.SteamID.Equals(SteamKit2.SteamID)">
            <summary>
            Determines whether the specified <see cref="T:SteamKit2.SteamID"/> is equal to this instance.
            </summary>
            <param name="sid">The <see cref="T:SteamKit2.SteamID"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:SteamKit2.SteamID"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SteamKit2.SteamID.op_Equality(SteamKit2.SteamID,SteamKit2.SteamID)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">The left side SteamID.</param>
            <param name="b">The right side SteamID.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SteamKit2.SteamID.op_Inequality(SteamKit2.SteamID,SteamKit2.SteamID)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">The left side SteamID.</param>
            <param name="b">The right side SteamID.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SteamKit2.SteamID.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:SevenZip.DataErrorException">
            <summary>
            The exception that is thrown when an error in input stream occurs during decoding.
            </summary>
        </member>
        <member name="T:SevenZip.InvalidParamException">
            <summary>
            The exception that is thrown when the value of an argument is outside the allowable range.
            </summary>
        </member>
        <member name="M:SevenZip.ICodeProgress.SetProgress(System.Int64,System.Int64)">
            <summary>
            Callback progress.
            </summary>
            <param name="inSize">
            input size. -1 if unknown.
            </param>
            <param name="outSize">
            output size. -1 if unknown.
            </param>
        </member>
        <member name="M:SevenZip.ICoder.Code(System.IO.Stream,System.IO.Stream,System.Int64,System.Int64,SevenZip.ICodeProgress)">
            <summary>
            Codes streams.
            </summary>
            <param name="inStream">
            input Stream.
            </param>
            <param name="outStream">
            output Stream.
            </param>
            <param name="inSize">
            input Size. -1 if unknown.
            </param>
            <param name="outSize">
            output Size. -1 if unknown.
            </param>
            <param name="progress">
            callback progress reference.
            </param>
            <exception cref="T:SevenZip.DataErrorException">
            if input stream is not valid
            </exception>
        </member>
        <member name="T:SevenZip.CoderPropID">
            <summary>
            Provides the fields that represent properties idenitifiers for compressing.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.DefaultProp">
            <summary>
            Specifies default property.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.DictionarySize">
            <summary>
            Specifies size of dictionary.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.UsedMemorySize">
            <summary>
            Specifies size of memory for PPM*.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.Order">
            <summary>
            Specifies order for PPM methods.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.BlockSize">
            <summary>
            Specifies Block Size.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.PosStateBits">
            <summary>
            Specifies number of postion state bits for LZMA (0 &lt;= x &lt;= 4).
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.LitContextBits">
            <summary>
            Specifies number of literal context bits for LZMA (0 &lt;= x &lt;= 8).
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.LitPosBits">
            <summary>
            Specifies number of literal position bits for LZMA (0 &lt;= x &lt;= 4).
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.NumFastBytes">
            <summary>
            Specifies number of fast bytes for LZ*.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.MatchFinder">
            <summary>
            Specifies match finder. LZMA: "BT2", "BT4" or "BT4B".
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.MatchFinderCycles">
            <summary>
            Specifies the number of match finder cyckes.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.NumPasses">
            <summary>
            Specifies number of passes.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.Algorithm">
            <summary>
            Specifies number of algorithm.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.NumThreads">
            <summary>
            Specifies the number of threads.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.EndMarker">
            <summary>
            Specifies mode with end marker.
            </summary>
        </member>
    </members>
</doc>
