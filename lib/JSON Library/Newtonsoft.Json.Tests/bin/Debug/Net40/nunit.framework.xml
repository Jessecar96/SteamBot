<?xml version="1.0"?>
<doc>
    <assembly>
        <name>nunit.framework</name>
    </assembly>
    <members>
        <member name="T:NUnit.Framework.Constraints.SubstringConstraint">
            <summary>
            SubstringConstraint can test whether a string contains
            the expected substring.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.Constraint">
            <summary>
            The Constraint class is the base of all built-in or
            user-defined constraints in NUnit. It provides the operator
            overloads used to combine constraints.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.Constraint.UNSET">
            <summary>
            Static UnsetObject used to detect derived constraints
            failing to set the actual value.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.Constraint.caseInsensitive">
            <summary>
            If true, all string comparisons will ignore case
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.Constraint.compareAsCollection">
            <summary>
            If true, arrays will be treated as collections, allowing
            those of different dimensions to be compared
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.Constraint.tolerance">
            <summary>
            If non-zero, equality comparisons within the specified 
            tolerance will succeed.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.Constraint.compareWith">
            <summary>
            IComparer object used in comparisons for some constraints.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.Constraint.actual">
            <summary>
            The actual value being tested against a constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.Within(System.Object)">
            <summary>
            Flag the constraint to use a tolerance when determining equality.
            Currently only used for doubles and floats.
            </summary>
            <param name="tolerance">Tolerance to be used</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.Comparer(System.Collections.IComparer)">
            <summary>
            Flag the constraint to use the supplied IComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.WriteMessageTo(NUnit.Framework.MessageWriter)">
            <summary>
            Write the failure message to the MessageWriter provided
            as an argument. The default implementation simply passes
            the constraint and the actual value to the writer, which
            then displays the constraint description and the value.
            
            Constraints that need to provide additional details,
            such as where the error occured can override this.
            </summary>
            <param name="writer">The MessageWriter on which to display the message</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.WriteDescriptionTo(NUnit.Framework.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.WriteActualValueTo(NUnit.Framework.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.op_BitwiseAnd(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            This operator creates a constraint that is satisfied only if both 
            argument constraints are satisfied.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.op_BitwiseOr(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            This operator creates a constraint that is satisfied if either 
            of the argument constraints is satisfied.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.op_LogicalNot(NUnit.Framework.Constraints.Constraint)">
            <summary>
            This operator creates a constraint that is satisfied if the 
            argument constraint is not satisfied.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Constraint.IgnoreCase">
            <summary>
            Flag the constraint to ignore case and return self.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Constraint.AsCollection">
            <summary>
            Flag the constraint to compare arrays as collections
            and return self.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.Constraint.UnsetObject">
            <summary>
            Class used to detect any derived constraints
            that fail to set the actual value in their
            Matches override.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SubstringConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SubstringConstraint"/> class.
            </summary>
            <param name="expected">The expected.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.SubstringConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.SubstringConstraint.WriteDescriptionTo(NUnit.Framework.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.StartsWithConstraint">
            <summary>
            StartsWithConstraint can test whether a string starts
            with an expected substring.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.StartsWithConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StartsWithConstraint"/> class.
            </summary>
            <param name="expected">The expected string</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.StartsWithConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is matched by the actual value.
            This is a template method, which calls the IsMatch method
            of the derived class.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.StartsWithConstraint.WriteDescriptionTo(NUnit.Framework.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.EndsWithConstraint">
            <summary>
            EndsWithConstraint can test whether a string ends
            with an expected substring.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EndsWithConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EndsWithConstraint"/> class.
            </summary>
            <param name="expected">The expected string</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EndsWithConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is matched by the actual value.
            This is a template method, which calls the IsMatch method
            of the derived class.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EndsWithConstraint.WriteDescriptionTo(NUnit.Framework.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.RegexConstraint">
            <summary>
            RegexConstraint can test whether a string matches
            the pattern provided.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.RegexConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RegexConstraint"/> class.
            </summary>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.RegexConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.RegexConstraint.WriteDescriptionTo(NUnit.Framework.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.EmptyConstraint">
            <summary>
            EmptyConstraint tests a whether a string or collection is empty,
            postponing the decision about which test is applied until the
            type of the actual argument is known.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyConstraint.WriteDescriptionTo(NUnit.Framework.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintBuilder">
            <summary>
            ConstraintBuilder is used to resolve the Not and All properties,
            which serve as prefix operators for constraints. With the addition
            of an operand stack, And and Or could be supported, but we have
            left them out in favor of a simpler, more type-safe implementation.
            Use the &amp; and | operator overloads to combine constraints.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.op_Implicit(NUnit.Framework.Constraints.ConstraintBuilder)~NUnit.Framework.Constraints.Constraint">
            <summary>
            Implicitly convert ConstraintBuilder to an actual Constraint
            at the point where the syntax demands it.
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.EqualTo(System.Object)">
            <summary>
            Resolves the chain of constraints using an
            EqualConstraint as base.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.SameAs(System.Object)">
            <summary>
            Resolves the chain of constraints using a
            SameAsConstraint as base.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.LessThan(System.IComparable)">
            <summary>
            Resolves the chain of constraints using a
            LessThanConstraint as base.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.GreaterThan(System.IComparable)">
            <summary>
            Resolves the chain of constraints using a
            GreaterThanConstraint as base.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.LessThanOrEqualTo(System.IComparable)">
            <summary>
            Resolves the chain of constraints using a
            LessThanOrEqualConstraint as base.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.AtMost(System.IComparable)">
            <summary>
            Resolves the chain of constraints using a
            LessThanOrEqualConstraint as base.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.GreaterThanOrEqualTo(System.IComparable)">
            <summary>
            Resolves the chain of constraints using a
            GreaterThanOrEqualConstraint as base.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.AtLeast(System.IComparable)">
            <summary>
            Resolves the chain of constraints using a
            GreaterThanOrEqualConstraint as base.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.TypeOf(System.Type)">
            <summary>
            Resolves the chain of constraints using an
            ExactTypeConstraint as base.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.InstanceOfType(System.Type)">
            <summary>
            Resolves the chain of constraints using an
            InstanceOfTypeConstraint as base.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.AssignableFrom(System.Type)">
            <summary>
            Resolves the chain of constraints using an
            AssignableFromConstraint as base.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.Contains(System.Object)">
            <summary>
            Resolves the chain of constraints using a
            ContainsConstraint as base. This constraint
            will, in turn, make use of the appropriate
            second-level constraint, depending on the
            type of the actual argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.Member(System.Object)">
            <summary>
            Resolves the chain of constraints using a 
            CollectionContainsConstraint as base.
            </summary>
            <param name="expected">The expected object</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.StartsWith(System.String)">
            <summary>
            Resolves the chain of constraints using a
            StartsWithConstraint as base.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.EndsWith(System.String)">
            <summary>
            Resolves the chain of constraints using a
            StringEndingConstraint as base.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.Matches(System.String)">
            <summary>
            Resolves the chain of constraints using a
            StringMatchingConstraint as base.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.EquivalentTo(System.Collections.ICollection)">
            <summary>
            Resolves the chain of constraints using a
            CollectionEquivalentConstraint as base.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.CollectionContaining(System.Object)">
            <summary>
            Resolves the chain of constraints using a
            CollectionContainingConstraint as base.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.SubsetOf(System.Collections.ICollection)">
            <summary>
            Resolves the chain of constraints using a
            CollectionSubsetConstraint as base.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.Property(System.String,System.Object)">
            <summary>
            Resolves the chain of constraints using a 
            PropertyConstraint as base
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.Length(System.Int32)">
            <summary>
            Resolves the chain of constraints using a
            PropertyCOnstraint on Length as base
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.Count(System.Int32)">
            <summary>
            Resolves the chain of constraints using a
            PropertyCOnstraint on Length as base
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.Property(System.String)">
            <summary>
            Modifies the ConstraintBuilder by pushing a Prop operator on the
            ops stack and the name of the property on the opnds stack.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.Resolve(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Resolve a constraint that has been recognized by applying
            any pending operators and returning the resulting Constraint.
            </summary>
            <returns>A constraint that incorporates all pending operators</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.Null">
            <summary>
            Resolves the chain of constraints using
            EqualConstraint(null) as base.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.True">
            <summary>
            Resolves the chain of constraints using
            EqualConstraint(true) as base.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.False">
            <summary>
            Resolves the chain of constraints using
            EqualConstraint(false) as base.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.NaN">
            <summary>
            Resolves the chain of constraints using
            Is.NaN as base.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.Empty">
            <summary>
            Resolves the chain of constraints using
            Is.Empty as base.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.Unique">
            <summary>
            Resolves the chain of constraints using
            Is.Unique as base.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.Not">
            <summary>
            Modifies the ConstraintBuilder by pushing a Not operator on the stack.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.No">
            <summary>
            Modifies the ConstraintBuilder by pushing a Not operator on the stack.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.All">
            <summary>
            Modifies the ConstraintBuilder by pushing an All operator on the stack.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.Some">
            <summary>
            Modifies the ConstraintBuilder by pushing a Some operator on the stack.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.None">
            <summary>
            Modifies the constraint builder by pushing All and Not operators on the stack
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionConstraint">
            <summary>
            CollectionConstraint is the abstract base class for
            constraints that operate on collections.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.doMatch(System.Collections.ICollection)">
            <summary>
            Protected method to be implemented by derived classes
            </summary>
            <param name="collecton"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionConstraint.CollectionTally">
            <summary>
            CollectionTally counts (tallies) the number of
            occurences of each object in one or more enuerations.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.CollectionTally.#ctor(System.Collections.IEnumerable)">
            <summary>
            Construct a CollectionTally object from a collection
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.CollectionTally.CanRemove(System.Collections.IEnumerable)">
            <summary>
            Remove the counts for a collection from the tally,
            so long as their are sufficient items to remove.
            The tallies are not permitted to become negative.
            </summary>
            <param name="c">The collection to remove</param>
            <returns>True if there were enough items to remove, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.CollectionTally.AllCountsEqualTo(System.Int32)">
            <summary>
            Test whether all the counts are equal to a given value
            </summary>
            <param name="count">The value to be looked for</param>
            <returns>True if all counts are equal to the value, otherwise false</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionConstraint.CollectionTally.Item(System.Object)">
            <summary>
            Get the count of the number of times an object is present in the tally
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.UniqueItemsConstraint">
            <summary>
            UniqueItemsConstraint tests whether all the items in a 
            collection are unique.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.UniqueItemsConstraint.doMatch(System.Collections.ICollection)">
            <summary>
            Apply the item constraint to each item in the collection,
            failing if any item fails.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.UniqueItemsConstraint.WriteDescriptionTo(NUnit.Framework.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionContainsConstraint">
            <summary>
            CollectionContainsConstraint is used to test whether a collection
            contains an expected object as a member.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionContainsConstraint.#ctor(System.Object)">
            <summary>
            Construct a CollectionContainsConstraint
            </summary>
            <param name="expected"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionContainsConstraint.doMatch(System.Collections.ICollection)">
            <summary>
            Test whether the expected item is contained in the collection
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionContainsConstraint.WriteDescriptionTo(NUnit.Framework.MessageWriter)">
            <summary>
            Write a descripton of the constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionEquivalentConstraint">
            <summary>
            CollectionEquivalentCOnstraint is used to determine whether two
            collections are equivalent.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionEquivalentConstraint.#ctor(System.Collections.IEnumerable)">
            <summary>
            Construct a CollectionEquivalentConstraint
            </summary>
            <param name="expected"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionEquivalentConstraint.doMatch(System.Collections.ICollection)">
            <summary>
            Test whether two collections are equivalent
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionEquivalentConstraint.WriteDescriptionTo(NUnit.Framework.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionSubsetConstraint">
            <summary>
            CollectionSubsetConstraint is used to determine whether
            one collection is a subset of another
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionSubsetConstraint.#ctor(System.Collections.IEnumerable)">
            <summary>
            Construct a CollectionSubsetConstraint
            </summary>
            <param name="expected">The collection that the actual value is expected to be a subset of</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionSubsetConstraint.doMatch(System.Collections.ICollection)">
            <summary>
            Test whether the actual collection is a subset of 
            the expected collection provided.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionSubsetConstraint.WriteDescriptionTo(NUnit.Framework.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.EqualConstraint">
            <summary>
            EqualConstraint is able to compare an actual value with the
            expected value provided in its constructor.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:EqualConstraint"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.WriteMessageTo(NUnit.Framework.MessageWriter)">
            <summary>
            Write a failure message. Overridden to provide custom 
            failure messages for EqualConstraint.
            </summary>
            <param name="writer">The MessageWriter to write to</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.WriteDescriptionTo(NUnit.Framework.MessageWriter)">
            <summary>
            Write description of this constraint
            </summary>
            <param name="writer">The MessageWriter to write to</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.ArraysEqual(System.Array,System.Array)">
            <summary>
            Helper method to compare two arrays
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.DisplayCollectionDifferences(NUnit.Framework.MessageWriter,System.Collections.ICollection,System.Collections.ICollection,System.Int32)">
            <summary>
            Display the failure information for two collections that did not match.
            </summary>
            <param name="writer">The MessageWriter on which to display</param>
            <param name="expected">The expected collection.</param>
            <param name="actual">The actual collection</param>
            <param name="depth">The depth of this failure in a set of nested collections</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.DisplayCollectionTypesAndSizes(NUnit.Framework.MessageWriter,System.Collections.ICollection,System.Collections.ICollection,System.Int32)">
            <summary>
            Displays a single line showing the types and sizes of the expected
            and actual collections or arrays. If both are identical, the value is 
            only shown once.
            </summary>
            <param name="writer">The MessageWriter on which to display</param>
            <param name="expected">The expected collection or array</param>
            <param name="actual">The actual collection or array</param>
            <param name="indent">The indentation level for the message line</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.DisplayFailurePoint(NUnit.Framework.MessageWriter,System.Collections.ICollection,System.Collections.ICollection,System.Int32,System.Int32)">
            <summary>
            Displays a single line showing the point in the expected and actual
            arrays at which the comparison failed. If the arrays have different
            structures or dimensions, both values are shown.
            </summary>
            <param name="writer">The MessageWriter on which to display</param>
            <param name="expected">The expected array</param>
            <param name="actual">The actual array</param>
            <param name="failurePoint">Index of the failure point in the underlying collections</param>
            <param name="indent">The indentation level for the message line</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.PrefixConstraint">
            <summary>
            Abstract base class used for prefixes
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.PrefixConstraint.baseConstraint">
            <summary>
            The base constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PrefixConstraint.#ctor(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Construct given a base constraint
            </summary>
            <param name="baseConstraint"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.PrefixConstraint.PassModifiersToBase">
            <summary>
            Set all modifiers applied to the prefix into
            the base constraint before matching
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.NotConstraint">
            <summary>
            NotConstraint negates the effect of some other constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NotConstraint.#ctor(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Initializes a new instance of the <see cref="T:NotConstraint"/> class.
            </summary>
            <param name="baseConstraint">The base constraint to be negated.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.NotConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for if the base constraint fails, false if it succeeds</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.NotConstraint.WriteDescriptionTo(NUnit.Framework.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.NotConstraint.WriteActualValueTo(NUnit.Framework.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a MessageWriter.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.AllItemsConstraint">
            <summary>
            AllItemsConstraint applies another constraint to each
            item in a collection, succeeding if they all succeed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AllItemsConstraint.#ctor(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Construct an AllItemsConstraint on top of an existing constraint
            </summary>
            <param name="itemConstraint"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AllItemsConstraint.Matches(System.Object)">
            <summary>
            Apply the item constraint to each item in the collection,
            failing if any item fails.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.AllItemsConstraint.WriteDescriptionTo(NUnit.Framework.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.SomeItemsConstraint">
            <summary>
            SomeItemsConstraint applies another constraint to each
            item in a collection, succeeding if any of them succeeds.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SomeItemsConstraint.#ctor(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Construct a SomeItemsConstraint on top of an existing constraint
            </summary>
            <param name="itemConstraint"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.SomeItemsConstraint.Matches(System.Object)">
            <summary>
            Apply the item constraint to each item in the collection,
            failing if any item fails.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.SomeItemsConstraint.WriteDescriptionTo(NUnit.Framework.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.NoItemConstraint">
            <summary>
            SomeItemsConstraint applies another constraint to each
            item in a collection, succeeding if any of them succeeds.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NoItemConstraint.#ctor(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Construct a SomeItemsConstraint on top of an existing constraint
            </summary>
            <param name="itemConstraint"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.NoItemConstraint.Matches(System.Object)">
            <summary>
            Apply the item constraint to each item in the collection,
            failing if any item fails.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.NoItemConstraint.WriteDescriptionTo(NUnit.Framework.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.SameAsConstraint">
            <summary>
            SameAsConstraint tests whether an object is identical to
            the object passed to its constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SameAsConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:SameAsConstraint"/> class.
            </summary>
            <param name="expected">The expected object.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.SameAsConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.SameAsConstraint.WriteDescriptionTo(NUnit.Framework.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.TypeConstraint">
            <summary>
            TypeConstraint is the abstract base for constraints
            that take a Type as their expected value.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.TypeConstraint.expectedType">
            <summary>
            The expected Type used by the constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.TypeConstraint.#ctor(System.Type)">
            <summary>
            Construct a TypeConstraint for a given Type
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.TypeConstraint.WriteActualValueTo(NUnit.Framework.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. TypeCOnstraints override this method to write
            the name of the type.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.ExactTypeConstraint">
            <summary>
            ExactTypeConstraint is used to test that an object
            is of the exact type provided in the constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactTypeConstraint.#ctor(System.Type)">
            <summary>
            Construct an ExactTypeConstraint for a given Type
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactTypeConstraint.Matches(System.Object)">
            <summary>
            Test that an object is of the exact type specified
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactTypeConstraint.WriteDescriptionTo(NUnit.Framework.MessageWriter)">
            <summary>
            Write the description of this constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.InstanceOfTypeConstraint">
            <summary>
            InstanceOfTypeConstraint is used to test that an object
            is of the same type provided or derived from it.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.InstanceOfTypeConstraint.#ctor(System.Type)">
            <summary>
            Construct an InstanceOfTypeConstraint for the type provided
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.InstanceOfTypeConstraint.Matches(System.Object)">
            <summary>
            Test whether an object is of the specified type or a derived type
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.InstanceOfTypeConstraint.WriteDescriptionTo(NUnit.Framework.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.AssignableFromConstraint">
            <summary>
            AssignableFromConstraint is used to test that an object
            can be assigned from a given Type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AssignableFromConstraint.#ctor(System.Type)">
            <summary>
            Construct an AssignableFromConstraint for the type provided
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AssignableFromConstraint.Matches(System.Object)">
            <summary>
            Test whether an object can be assigned from the specified type
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.AssignableFromConstraint.WriteDescriptionTo(NUnit.Framework.MessageWriter)">
            <summary>
            Write a description of this constraint to a MessageWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.ComparisonConstraint">
            <summary>
            Abstract base class for constraints that compare values to
            determine if one is greater than, equal to or less than
            the other.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ComparisonConstraint.expected">
            <summary>
            The value against which a comparison is to be made
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ComparisonConstraint.ltOK">
            <summary>
            If true, less than returns success
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ComparisonConstraint.eqOK">
            <summary>
            if true, equal returns success
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ComparisonConstraint.gtOK">
            <summary>
            if true, greater than returns success
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ComparisonConstraint.predicate">
            <summary>
            The predicate used as a part of the description
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.#ctor(System.IComparable,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComparisonConstraint"/> class.
            </summary>
            <param name="value">The value against which to make a comparison.</param>
            <param name="ltOK">if set to <c>true</c> less succeeds.</param>
            <param name="eqOK">if set to <c>true</c> equal succeeds.</param>
            <param name="gtOK">if set to <c>true</c> greater succeeds.</param>
            <param name="predicate">String used in describing the constraint.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.WriteDescriptionTo(NUnit.Framework.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.GreaterThanConstraint">
            <summary>
            Tests whether a value is greater than the value supplied to its constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.GreaterThanConstraint.#ctor(System.IComparable)">
            <summary>
            Initializes a new instance of the <see cref="T:GreaterThanConstraint"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.GreaterThanOrEqualConstraint">
            <summary>
            Tests whether a value is greater than or equal to the value supplied to its constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.GreaterThanOrEqualConstraint.#ctor(System.IComparable)">
            <summary>
            Initializes a new instance of the <see cref="T:GreaterThanOrEqualConstraint"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.LessThanConstraint">
            <summary>
            Tests whether a value is less than the value supplied to its constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.LessThanConstraint.#ctor(System.IComparable)">
            <summary>
            Initializes a new instance of the <see cref="T:LessThanConstraint"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.LessThanOrEqualConstraint">
            <summary>
            Tests whether a value is less than or equal to the value supplied to its constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.LessThanOrEqualConstraint.#ctor(System.IComparable)">
            <summary>
            Initializes a new instance of the <see cref="T:LessThanOrEqualConstraint"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.ContainsConstraint">
            <summary>
            ContainsConstraint tests a whether a string contains a substring
            or a collection contains an object. It postpones the decision of
            which test to use until the type of the actual argument is known.
            This allows testing whether a string is contained in a collection
            or as a substring of another string using the same syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ContainsConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ContainsConstraint"/> class.
            </summary>
            <param name="expected">The expected.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ContainsConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ContainsConstraint.WriteDescriptionTo(NUnit.Framework.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.PropertyConstraint">
            <summary>
            Summary description for PropertyConstraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyConstraint.#ctor(System.String,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyConstraint"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="baseConstraint">The constraint to apply to the property.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyConstraint.Matches(System.Object)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyConstraint.WriteDescriptionTo(NUnit.Framework.MessageWriter)">
            <summary>
            Write the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyConstraint.WriteActualValueTo(NUnit.Framework.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.BinaryOperation">
            <summary>
            BinaryOperation is the abstract base of all constraints
            that combine two other constraints in some fashion.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.BinaryOperation.left">
            <summary>
            The first constraint being combined
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.BinaryOperation.right">
            <summary>
            The second constraint being combined
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.BinaryOperation.#ctor(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Construct a BinaryOperation from two other constraints
            </summary>
            <param name="left">The first constraint</param>
            <param name="right">The second constraint</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.AndConstraint">
            <summary>
            AndConstraint succeeds only if both members succeed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndConstraint.#ctor(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Create an AndConstraint from two other constraints
            </summary>
            <param name="left">The first constraint</param>
            <param name="right">The second constraint</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndConstraint.Matches(System.Object)">
            <summary>
            Apply both member constraints to an actual value, succeeding 
            succeeding only if both of them succeed.
            </summary>
            <param name="actual">The actual value</param>
            <returns>True if the constraints both succeeded</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndConstraint.WriteDescriptionTo(NUnit.Framework.MessageWriter)">
            <summary>
            Write a description for this contraint to a MessageWriter
            </summary>
            <param name="writer">The MessageWriter to receive the description</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.OrConstraint">
            <summary>
            OrConstraint succeeds if either member succeeds
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.OrConstraint.#ctor(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Create an OrConstraint from two other constraints
            </summary>
            <param name="left">The first constraint</param>
            <param name="right">The second constraint</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.OrConstraint.Matches(System.Object)">
            <summary>
            Apply the member constraints to an actual value, succeeding 
            succeeding as soon as one of them succeeds.
            </summary>
            <param name="actual">The actual value</param>
            <returns>True if either constraint succeeded</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.OrConstraint.WriteDescriptionTo(NUnit.Framework.MessageWriter)">
            <summary>
            Write a description for this contraint to a MessageWriter
            </summary>
            <param name="writer">The MessageWriter to receive the description</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.Numerics">
            <summary>
            The Numerics class contains common operations on numeric values.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Numerics.IsNumericType(System.Object)">
            <summary>
            Checks the type of the object, returning true if
            the object is a numeric type.
            </summary>
            <param name="obj">The object to check</param>
            <returns>true if the object is a numeric type</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Numerics.IsFloatingPointNumeric(System.Object)">
            <summary>
            Checks the type of the object, returning true if
            the object is a floating point numeric type.
            </summary>
            <param name="obj">The object to check</param>
            <returns>true if the object is a floating point numeric type</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Numerics.IsFixedPointNumeric(System.Object)">
            <summary>
            Checks the type of the object, returning true if
            the object is a fixed point numeric type.
            </summary>
            <param name="obj">The object to check</param>
            <returns>true if the object is a fixed point numeric type</returns>
        </member>
        <member name="T:NUnit.Framework.SyntaxHelpers.Is">
            <summary>
            The Is class is a helper class with properties and methods
            that supply a number of constraints used in Asserts.
            </summary>
        </member>
        <member name="F:NUnit.Framework.SyntaxHelpers.Is.Null">
            <summary>
            Is.Null returns a static constraint that tests for null
            </summary>
        </member>
        <member name="F:NUnit.Framework.SyntaxHelpers.Is.True">
            <summary>
            Is.True returns a static constraint that tests whether a value is true
            </summary>
        </member>
        <member name="F:NUnit.Framework.SyntaxHelpers.Is.False">
            <summary>
            Is.False returns a static constraint that tests whether a value is false
            </summary>
        </member>
        <member name="F:NUnit.Framework.SyntaxHelpers.Is.NaN">
            <summary>
            Is.NaN returns a static constraint that tests whether a value is an NaN
            </summary>
        </member>
        <member name="F:NUnit.Framework.SyntaxHelpers.Is.Empty">
            <summary>
            Is.Empty returns a static constraint that tests whether a string or collection is empty
            </summary>
        </member>
        <member name="F:NUnit.Framework.SyntaxHelpers.Is.Unique">
            <summary>
            Is.Unique returns a static constraint that tests whether a collection contains all unque items.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SyntaxHelpers.Is.EqualTo(System.Object)">
            <summary>
            Is.EqualTo returns a constraint that tests whether the
            actual value equals the supplied argument
            </summary>
            <param name="expected"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.SyntaxHelpers.Is.SameAs(System.Object)">
            <summary>
            Is.SameAs returns a constraint that tests whether the
            actual value is the same object as the supplied argument.
            </summary>
            <param name="expected"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.SyntaxHelpers.Is.GreaterThan(System.IComparable)">
            <summary>
            Is.GreaterThan returns a constraint that tests whether the
            actual value is greater than the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.SyntaxHelpers.Is.GreaterThanOrEqualTo(System.IComparable)">
            <summary>
            Is.GreaterThanOrEqualTo returns a constraint that tests whether the
            actual value is greater than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.SyntaxHelpers.Is.AtLeast(System.IComparable)">
            <summary>
            Is.AtLeast is a synonym for Is.GreaterThanOrEqualTo
            </summary>
        </member>
        <member name="M:NUnit.Framework.SyntaxHelpers.Is.LessThan(System.IComparable)">
            <summary>
            Is.LessThan returns a constraint that tests whether the
            actual value is less than the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.SyntaxHelpers.Is.LessThanOrEqualTo(System.IComparable)">
            <summary>
            Is.LessThanOrEqualTo returns a constraint that tests whether the
            actual value is less than or equal to the suppled argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.SyntaxHelpers.Is.AtMost(System.IComparable)">
            <summary>
            Is.AtMost is a synonym for Is.LessThanOrEqualTo
            </summary>
        </member>
        <member name="M:NUnit.Framework.SyntaxHelpers.Is.TypeOf(System.Type)">
            <summary>
            Is.TypeOf returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SyntaxHelpers.Is.InstanceOfType(System.Type)">
            <summary>
            Is.InstanceOfType returns a constraint that tests whether 
            the actual value is of the type supplied as an argument
            or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SyntaxHelpers.Is.AssignableFrom(System.Type)">
            <summary>
            Is.AssignableFrom returns a constraint that tests whether
            the actual value is assignable from the type supplied as
            an argument.
            </summary>
            <param name="expectedType"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.SyntaxHelpers.Is.EquivalentTo(System.Collections.ICollection)">
            <summary>
            Is.EquivalentTo returns a constraint that tests whether
            the actual value is a collection containing the same
            elements as the collection supplied as an arument
            </summary>
        </member>
        <member name="M:NUnit.Framework.SyntaxHelpers.Is.SubsetOf(System.Collections.ICollection)">
            <summary>
            Is.SubsetOf returns a constraint that tests whether
            the actual value is a subset of the collection 
            supplied as an arument
            </summary>
        </member>
        <member name="P:NUnit.Framework.SyntaxHelpers.Is.Not">
            <summary>
            Is.Not returns a ConstraintBuilder that negates
            the constraint that follows it.
            </summary>
        </member>
        <member name="P:NUnit.Framework.SyntaxHelpers.Is.All">
            <summary>
            Is.All returns a ConstraintBuilder, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them succeed. This property is
            a synonym for Has.AllItems.
            </summary>
        </member>
        <member name="T:NUnit.Framework.SyntaxHelpers.Iz">
            <summary>
            The Iz class is a synonym for Is intended for use in VB,
            which regards Is as a keyword.
            </summary>
        </member>
        <member name="T:NUnit.Framework.SyntaxHelpers.Text">
            <summary>
            The Text class is a helper class with properties and methods
            that supply a number of constraints used with strings.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SyntaxHelpers.Text.Contains(System.String)">
            <summary>
            Contains returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SyntaxHelpers.Text.DoesNotContain(System.String)">
            <summary>
            DoesNotContain returns a constraint that fails if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SyntaxHelpers.Text.StartsWith(System.String)">
            <summary>
            StartsWith returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SyntaxHelpers.Text.DoesNotStartWith(System.String)">
            <summary>
            DoesNotStartWith returns a constraint that fails if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SyntaxHelpers.Text.EndsWith(System.String)">
            <summary>
            EndsWith returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SyntaxHelpers.Text.DoesNotEndWith(System.String)">
            <summary>
            DoesNotEndWith returns a constraint that fails if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SyntaxHelpers.Text.Matches(System.String)">
            <summary>
            Matches returns a constraint that succeeds if the actual
            value matches the pattern supplied as an argument.
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.SyntaxHelpers.Text.DoesNotMatch(System.String)">
            <summary>
            DoesNotMatch returns a constraint that failss if the actual
            value matches the pattern supplied as an argument.
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.SyntaxHelpers.Text.All">
            <summary>
            Text.All returns a ConstraintBuilder, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them succeed.
            </summary>
        </member>
        <member name="T:NUnit.Framework.SyntaxHelpers.List">
            <summary>
            The List class is a helper class with properties and methods
            that supply a number of constraints used with lists and collections.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SyntaxHelpers.List.Map(System.Collections.ICollection)">
            <summary>
            List.Map returns a ListMapper, which can be used to map
            the original collection to another collection.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.SyntaxHelpers.ListMapper">
            <summary>
            ListMapper is used to transform a collection used as an actual argument
            producing another collection to be used in the assertion.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SyntaxHelpers.ListMapper.#ctor(System.Collections.ICollection)">
            <summary>
            Construct a ListMapper based on a collection
            </summary>
            <param name="original">The collection to be transformed</param>
        </member>
        <member name="M:NUnit.Framework.SyntaxHelpers.ListMapper.Property(System.String)">
            <summary>
            Produces a collection containing all the values of a property
            </summary>
            <param name="name">The collection of property values</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.SyntaxHelpers.Has">
            <summary>
            Summary description for HasNoPrefixB.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SyntaxHelpers.Has.Property(System.String)">
            <summary>
            Returns a new ConstraintBuilder, which will apply the
            following constraint to a named property of the object
            being tested.
            </summary>
            <param name="name">The name of the property</param>
        </member>
        <member name="M:NUnit.Framework.SyntaxHelpers.Has.Property(System.String,System.Object)">
            <summary>
            Returns a new PropertyConstraint checking for the
            existence of a particular property value.
            </summary>
            <param name="name">The name of the property to look for</param>
            <param name="expected">The expected value of the property</param>
        </member>
        <member name="M:NUnit.Framework.SyntaxHelpers.Has.Length(System.Int32)">
            <summary>
            Returns a new PropertyConstraint for the Length property
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.SyntaxHelpers.Has.Count(System.Int32)">
            <summary>
            Returns a new PropertyConstraint or the Count property
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.SyntaxHelpers.Has.Member(System.Object)">
            <summary>
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            </summary>
            <param name="expected">The expected object</param>
        </member>
        <member name="P:NUnit.Framework.SyntaxHelpers.Has.No">
            <summary>
            Has.No returns a ConstraintBuilder that negates
            the constraint that follows it.
            </summary>
        </member>
        <member name="P:NUnit.Framework.SyntaxHelpers.Has.All">
            <summary>
            Has.AllItems returns a ConstraintBuilder, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them succeed.
            </summary>
        </member>
        <member name="P:NUnit.Framework.SyntaxHelpers.Has.Some">
            <summary>
            Has.Some returns a ConstraintBuilder, which will apply
            the following constraint to all members of a collection,
            succeeding if any of them succeed. It is a synonym
            for Has.Item.
            </summary>
        </member>
        <member name="P:NUnit.Framework.SyntaxHelpers.Has.None">
            <summary>
            Has.None returns a ConstraintBuilder, which will apply
            the following constraint to all members of a collection,
            succeeding only if none of them succeed.
            </summary>
        </member>
        <member name="T:NUnit.Framework.SyntaxHelpers.Has.HasNoPrefixBuilder">
            <summary>
            Nested class that allows us to restrict the number
            of key words that may appear after Has.No.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SyntaxHelpers.Has.HasNoPrefixBuilder.Property(System.String)">
            <summary>
            Return a ConstraintBuilder conditioned to apply
            the following constraint to a property.
            </summary>
            <param name="name">The property name</param>
            <returns>A ConstraintBuilder</returns>
        </member>
        <member name="M:NUnit.Framework.SyntaxHelpers.Has.HasNoPrefixBuilder.Member(System.Object)">
            <summary>
            Return a Constraint that succeeds if the expected object is
            not contained in a collection.
            </summary>
            <param name="expected">The expected object</param>
            <returns>A Constraint</returns>
        </member>
        <member name="T:NUnit.Framework.Assert">
            <summary>
            The Assert class contains a collection of static methods that
            implement the most common assertions used in NUnit.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.#ctor">
            <summary>
            We don't actually want any instances of this object, but some people
            like to inherit from it to add other static methods. Hence, the
            protected constructor disallows any instances of this object. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.Equals(System.Object,System.Object)">
            <summary>
            The Equals method throws an AssertionException. This is done 
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.Assert.ReferenceEquals(System.Object,System.Object)">
            <summary>
            override the default ReferenceEquals to throw an AssertionException. This 
            implementation makes sure there is no mistake in calling this function 
            as part of Assert. 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsTrue(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is false</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsTrue(System.Boolean,System.String)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is false</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsTrue(System.Boolean)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsFalse(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is true</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsFalse(System.Boolean,System.String)">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is true</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsFalse(System.Boolean)">
            <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotNull(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to be displayed when the object is null</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotNull(System.Object,System.String)">
            <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to be displayed when the object is null</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotNull(System.Object)">
            <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNull(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to be displayed when the object is not null</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNull(System.Object,System.String)">
            <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to be displayed when the object is not null</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNull(System.Object)">
            <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not null <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="anObject">The object that is to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNaN(System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the double is passed is an <code>NaN</code> value.
            If the object is not <code>NaN</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="aDouble">The value that is to be tested</param>
            <param name="message">The message to be displayed when the object is not null</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNaN(System.Double,System.String)">
            <summary>
            Verifies that the double is passed is an <code>NaN</code> value.
            If the object is not <code>NaN</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="aDouble">The object that is to be tested</param>
            <param name="message">The message to be displayed when the object is not null</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNaN(System.Double)">
            <summary>
            Verifies that the double is passed is an <code>NaN</code> value.
            If the object is not <code>NaN</code> then an <see cref="T:NUnit.Framework.AssertionException"/>
            is thrown.
            </summary>
            <param name="aDouble">The object that is to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsEmpty(System.String,System.String,System.Object[])">
            <summary>
            Assert that a string is empty - that is equal to string.Empty
            </summary>
            <param name="aString">The string to be tested</param>
            <param name="message">The message to be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsEmpty(System.String,System.String)">
            <summary>
            Assert that a string is empty - that is equal to string.Emtpy
            </summary>
            <param name="aString">The string to be tested</param>
            <param name="message">The message to be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsEmpty(System.String)">
            <summary>
            Assert that a string is empty - that is equal to string.Emtpy
            </summary>
            <param name="aString">The string to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsEmpty(System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
            <param name="message">The message to be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsEmpty(System.Collections.ICollection,System.String)">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
            <param name="message">The message to be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsEmpty(System.Collections.ICollection)">
            <summary>
            Assert that an array,list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotEmpty(System.String,System.String,System.Object[])">
            <summary>
            Assert that a string is not empty - that is not equal to string.Empty
            </summary>
            <param name="aString">The string to be tested</param>
            <param name="message">The message to be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotEmpty(System.String,System.String)">
            <summary>
            Assert that a string is empty - that is equal to string.Emtpy
            </summary>
            <param name="aString">The string to be tested</param>
            <param name="message">The message to be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotEmpty(System.String)">
            <summary>
            Assert that a string is empty - that is equal to string.Emtpy
            </summary>
            <param name="aString">The string to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotEmpty(System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
            <param name="message">The message to be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotEmpty(System.Collections.ICollection,System.String)">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
            <param name="message">The message to be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotEmpty(System.Collections.ICollection)">
            <summary>
            Assert that an array,list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsAssignableFrom(System.Type,System.Object)">
            <summary>
            Asserts that an object may be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsAssignableFrom(System.Type,System.Object,System.String)">
            <summary>
            Asserts that an object may be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
            <param name="message">The messge to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsAssignableFrom(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object may be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotAssignableFrom(System.Type,System.Object)">
            <summary>
            Asserts that an object may not be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotAssignableFrom(System.Type,System.Object,System.String)">
            <summary>
            Asserts that an object may not be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
            <param name="message">The messge to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotAssignableFrom(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object may not be assigned a  value of a given Type.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsInstanceOfType(System.Type,System.Object)">
            <summary>
            Asserts that an object is an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsInstanceOfType(System.Type,System.Object,System.String)">
            <summary>
            Asserts that an object is an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
            <param name="message">A message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsInstanceOfType(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object is an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
            <param name="message">A message to display in case of failure</param>
            <param name="args">An array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotInstanceOfType(System.Type,System.Object)">
            <summary>
            Asserts that an object is not an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotInstanceOfType(System.Type,System.Object,System.String)">
            <summary>
            Asserts that an object is not an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
            <param name="message">A message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotInstanceOfType(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object is not an instance of a given type.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
            <param name="message">A message to display in case of failure</param>
            <param name="args">An array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that two ints are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that two ints are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Int32,System.Int32)">
            <summary>
            Verifies that two ints are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that two longs are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that two longs are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Int64,System.Int64)">
            <summary>
            Verifies that two longs are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Verifies that two uints are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
            Verifies that two uints are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.UInt32,System.UInt32)">
            <summary>
            Verifies that two uints are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.UInt64,System.UInt64,System.String,System.Object[])">
            <summary>
            Verifies that two ulongs are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.UInt64,System.UInt64,System.String)">
            <summary>
            Verifies that two ulongs are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.UInt64,System.UInt64)">
            <summary>
            Verifies that two ulongs are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that two decimals are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that two decimal are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Decimal,System.Decimal)">
            <summary>
            Verifies that two decimals are equal. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equals then an <see cref="T:NUnit.Framework.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equals then an <see cref="T:NUnit.Framework.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Double,System.Double)">
            <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equals then an <see cref="T:NUnit.Framework.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Single,System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that two floats are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equals then an <see cref="T:NUnit.Framework.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
            <param name="message">The message displayed upon failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Verifies that two floats are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equals then an <see cref="T:NUnit.Framework.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
            <param name="message">The message displayed upon failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Single,System.Single,System.Single)">
            <summary>
            Verifies that two floats are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If 
            they are not equals then an <see cref="T:NUnit.Framework.AssertionException"/> is
            thrown.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Verifies that two objects are equal.  Two objects are considered
            equal if both are null, or if both have the same value.  All
            non-numeric types are compared by using the <c>Equals</c> method.
            Arrays are compared by comparing each element using the same rules.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display if objects are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Object,System.Object,System.String)">
            <summary>
            Verifies that two objects are equal.  Two objects are considered
            equal if both are null, or if both have the same value.  All
            non-numeric types are compared by using the <c>Equals</c> method.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display if objects are not equal</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Object,System.Object)">
            <summary>
            Verifies that two objects are equal.  Two objects are considered
            equal if both are null, or if both have the same value.  All
            non-numeric types are compared by using the <c>Equals</c> method.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that two objects are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the two objects are the same object.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Object,System.Object,System.String)">
            <summary>
            Asserts that two objects are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the objects are the same</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Object,System.Object)">
            <summary>
            Asserts that two objects are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that two ints are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the two objects are the same object.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Asserts that two ints are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the objects are the same</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Int32,System.Int32)">
            <summary>
            Asserts that two ints are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Asserts that two longss are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the two objects are the same object.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Int64,System.Int64,System.String)">
            <summary>
            Asserts that two longs are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the objects are the same</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Int64,System.Int64)">
            <summary>
            Asserts that two longs are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Asserts that two uints are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the two objects are the same object.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
            Asserts that two uints are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the objects are the same</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.UInt32,System.UInt32)">
            <summary>
            Asserts that two uints are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.UInt64,System.UInt64,System.String,System.Object[])">
            <summary>
            Asserts that two ulongs are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the two objects are the same object.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.UInt64,System.UInt64,System.String)">
            <summary>
            Asserts that two ulongs are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the objects are the same</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.UInt64,System.UInt64)">
            <summary>
            Asserts that two ulong are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Asserts that two decimals are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the two objects are the same object.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Decimal,System.Decimal,System.String)">
            <summary>
            Asserts that two decimals are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the objects are the same</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Decimal,System.Decimal)">
            <summary>
            Asserts that two decimals are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Asserts that two floats are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the two objects are the same object.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Single,System.Single,System.String)">
            <summary>
            Asserts that two floats are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the objects are the same</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Single,System.Single)">
            <summary>
            Asserts that two floats are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Asserts that two doubles are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the two objects are the same object.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Double,System.Double,System.String)">
            <summary>
            Asserts that two doubles are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the objects are the same</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Double,System.Double)">
            <summary>
            Asserts that two doubles are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreSame(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that two objects refer to the same object. If they
            are not the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the two objects are not the same object.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreSame(System.Object,System.Object,System.String)">
            <summary>
            Asserts that two objects refer to the same object. If they
            are not the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the object is null</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreSame(System.Object,System.Object)">
            <summary>
            Asserts that two objects refer to the same object. If they
            are not the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotSame(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that two objects do not refer to the same object. If they
            are the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the two objects are the same object.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotSame(System.Object,System.Object,System.String)">
            <summary>
            Asserts that two objects do not refer to the same object. If they
            are the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to be displayed when the objects are the same</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotSame(System.Object,System.Object)">
            <summary>
            Asserts that two objects do not refer to the same object. If they
            are the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Int32,System.Int32)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.UInt32,System.UInt32,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.UInt32,System.UInt32)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Int64,System.Int64)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.UInt64,System.UInt64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.UInt64,System.UInt64,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.UInt64,System.UInt64)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Decimal,System.Decimal)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Double,System.Double,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Double,System.Double)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Single,System.Single,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Single,System.Single)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.IComparable,System.IComparable,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.IComparable,System.IComparable)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Int32,System.Int32)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.UInt32,System.UInt32,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.UInt32,System.UInt32)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Int64,System.Int64)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.UInt64,System.UInt64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.UInt64,System.UInt64,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.UInt64,System.UInt64)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Decimal,System.Decimal)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Double,System.Double,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Double,System.Double)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Single,System.Single,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Single,System.Single)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.IComparable,System.IComparable,System.String)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.IComparable,System.IComparable)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Contains(System.Object,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Asserts that an object is contained in a list.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The list to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Contains(System.Object,System.Collections.ICollection,System.String)">
            <summary>
            Asserts that an object is contained in a list.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The list to be examined</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Contains(System.Object,System.Collections.ICollection)">
            <summary>
            Asserts that an object is contained in a list.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The list to be examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Fail(System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:NUnit.Framework.AssertionException"/> with the message and arguments 
            that are passed in. This is used by the other Assert functions. 
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Fail(System.String)">
            <summary>
            Throws an <see cref="T:NUnit.Framework.AssertionException"/> with the message that is 
            passed in. This is used by the other Assert functions. 
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Fail">
            <summary>
            Throws an <see cref="T:NUnit.Framework.AssertionException"/>. 
            This is used by the other Assert functions. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.Ignore(System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:NUnit.Framework.IgnoreException"/> with the message and arguments 
            that are passed in.  This causes the test to be reported as ignored.
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Ignore(System.String)">
            <summary>
            Throws an <see cref="T:NUnit.Framework.IgnoreException"/> with the message that is 
            passed in. This causes the test to be reported as ignored. 
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Ignore">
            <summary>
            Throws an <see cref="T:NUnit.Framework.IgnoreException"/>. 
            This causes the test to be reported as ignored. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.DoAssert(NUnit.Framework.IAsserter)">
            <summary>
            NOTE: The use of asserters for extending NUnit has
            now been replaced by the use of constraints. This
            method is marked obsolete.
            
            Test the condition asserted by an asserter and throw
            an assertion exception using provided message on failure.
            </summary>
            <param name="asserter">An object that implements IAsserter</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(System.Object,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="constraint">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(System.Object,NUnit.Framework.Constraints.Constraint,System.String)">
            <summary>
            Apply a constraint to an actual value, succeedingt if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="constraint">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(System.Object,NUnit.Framework.Constraints.Constraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeedingt if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="constraint">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is false</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(System.Boolean,System.String)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is false</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(System.Boolean)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Int32,System.Int32)">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.UInt32,System.UInt32)">
            <summary>
            Verifies that the first value is greater or equal to than the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Int64,System.Int64)">
            <summary>
            Verifies that the first value is greater or equal to than the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.UInt64,System.UInt64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.UInt64,System.UInt64,System.String)">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.UInt64,System.UInt64)">
            <summary>
            Verifies that the first value is greater or equal to than the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Decimal,System.Decimal)">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Double,System.Double,System.String)">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Double,System.Double)">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Single,System.Single,System.String)">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Single,System.Single)">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.IComparable,System.IComparable,System.String)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.IComparable,System.IComparable)">
            <summary>
            Verifies that the first value is greater than the second
            value. If they are not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Int32,System.Int32)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.UInt32,System.UInt32)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Int64,System.Int64)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.UInt64,System.UInt64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.UInt64,System.UInt64,System.String)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.UInt64,System.UInt64)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Decimal,System.Decimal)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Double,System.Double,System.String)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Double,System.Double)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Single,System.Single,System.String)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Single,System.Single)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.IComparable,System.IComparable,System.String)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.IComparable,System.IComparable)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an 
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="P:NUnit.Framework.Assert.Counter">
            <summary>
            Gets the number of assertions executed so far and 
            resets the counter to zero.
            </summary>
        </member>
        <member name="T:NUnit.Framework.MessageMatch">
            <summary>
            Enumeration indicating how the expected message parameter is to be used
            </summary>
        </member>
        <member name="F:NUnit.Framework.MessageMatch.Exact">
            Expect an exact match
        </member>
        <member name="F:NUnit.Framework.MessageMatch.Contains">
            Expect a message containing the parameter string
        </member>
        <member name="F:NUnit.Framework.MessageMatch.Regex">
            Match the regular expression provided as a parameter
        </member>
        <member name="T:NUnit.Framework.ExpectedExceptionAttribute">
            <summary>
            ExpectedExceptionAttribute
            </summary>
            
        </member>
        <member name="M:NUnit.Framework.ExpectedExceptionAttribute.#ctor">
            <summary>
            Constructor for a non-specific exception
            </summary>
        </member>
        <member name="M:NUnit.Framework.ExpectedExceptionAttribute.#ctor(System.Type)">
            <summary>
            Constructor for a given type of exception
            </summary>
            <param name="exceptionType">The type of the expected exception</param>
        </member>
        <member name="M:NUnit.Framework.ExpectedExceptionAttribute.#ctor(System.String)">
            <summary>
            Constructor for a given exception name
            </summary>
            <param name="exceptionName">The full name of the expected exception</param>
        </member>
        <member name="M:NUnit.Framework.ExpectedExceptionAttribute.#ctor(System.Type,System.String)">
            <summary>
            Constructor for a given type of exception and expected message text
            </summary>
            <param name="exceptionType">The type of the expected exception</param>
            <param name="expectedMessage">The expected message text</param>
        </member>
        <member name="M:NUnit.Framework.ExpectedExceptionAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor for a given exception name and expected message text
            </summary>
            <param name="exceptionName">The full name of the expected exception</param>
            <param name="expectedMessage">The expected messge text</param>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.ExceptionType">
            <summary>
            Gets or sets the expected exception type
            </summary>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.ExceptionName">
            <summary>
            Gets or sets the full Type name of the expected exception
            </summary>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.ExpectedMessage">
            <summary>
            Gets or sets the expected message text
            </summary>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.UserMessage">
            <summary>
            Gets or sets the user message displayed in case of failure
            </summary>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.MatchType">
            <summary>
             Gets or sets the type of match to be performed on the expected message
            </summary>
        </member>
        <member name="P:NUnit.Framework.ExpectedExceptionAttribute.Handler">
            <summary>
             Gets the name of a method to be used as an exception handler
            </summary>
        </member>
        <member name="T:NUnit.Framework.CollectionAssert">
            <summary>
            A set of Assert methods operationg on one or more collections
            </summary>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.Equals(System.Object,System.Object)">
            <summary>
            The Equals method throws an AssertionException. This is done 
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.ReferenceEquals(System.Object,System.Object)">
            <summary>
            override the default ReferenceEquals to throw an AssertionException. This 
            implementation makes sure there is no mistake in calling this function 
            as part of Assert. 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.ICollection,System.Type)">
            <summary>
            Asserts that all items contained in collection are of the type specified by expectedType.
            </summary>
            <param name="collection">ICollection of objects to be considered</param>
            <param name="expectedType">System.Type that all objects in collection must be instances of</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.ICollection,System.Type,System.String)">
            <summary>
            Asserts that all items contained in collection are of the type specified by expectedType.
            </summary>
            <param name="collection">ICollection of objects to be considered</param>
            <param name="expectedType">System.Type that all objects in collection must be instances of</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.ICollection,System.Type,System.String,System.Object[])">
            <summary>
            Asserts that all items contained in collection are of the type specified by expectedType.
            </summary>
            <param name="collection">ICollection of objects to be considered</param>
            <param name="expectedType">System.Type that all objects in collection must be instances of</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreNotNull(System.Collections.ICollection)">
            <summary>
            Asserts that all items contained in collection are not equal to null.
            </summary>
            <param name="collection">ICollection of objects to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreNotNull(System.Collections.ICollection,System.String)">
            <summary>
            Asserts that all items contained in collection are not equal to null.
            </summary>
            <param name="collection">ICollection of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreNotNull(System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Asserts that all items contained in collection are not equal to null.
            </summary>
            <param name="collection">ICollection of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreUnique(System.Collections.ICollection)">
            <summary>
            Ensures that every object contained in collection exists within the collection
            once and only once.
            </summary>
            <param name="collection">ICollection of objects to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreUnique(System.Collections.ICollection,System.String)">
            <summary>
            Ensures that every object contained in collection exists within the collection
            once and only once.
            </summary>
            <param name="collection">ICollection of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreUnique(System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Ensures that every object contained in collection exists within the collection
            once and only once.
            </summary>
            <param name="collection">ICollection of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Asserts that expected and actual are exactly equal.  The collections must have the same count, 
            and contain the exact same objects in the same order.
            </summary>
            <param name="expected">The first ICollection of objects to be considered</param>
            <param name="actual">The second ICollection of objects to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer)">
            <summary>
            Asserts that expected and actual are exactly equal.  The collections must have the same count, 
            and contain the exact same objects in the same order.
            If comparer is not null then it will be used to compare the objects.
            </summary>
            <param name="expected">The first ICollection of objects to be considered</param>
            <param name="actual">The second ICollection of objects to be considered</param>
            <param name="comparer">The IComparer to use in comparing objects from each ICollection</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Asserts that expected and actual are exactly equal.  The collections must have the same count, 
            and contain the exact same objects in the same order.
            </summary>
            <param name="expected">The first ICollection of objects to be considered</param>
            <param name="actual">The second ICollection of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String)">
            <summary>
            Asserts that expected and actual are exactly equal.  The collections must have the same count, 
            and contain the exact same objects in the same order.
            If comparer is not null then it will be used to compare the objects.
            </summary>
            <param name="expected">The first ICollection of objects to be considered</param>
            <param name="actual">The second ICollection of objects to be considered</param>
            <param name="comparer">The IComparer to use in comparing objects from each ICollection</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are exactly equal.  The collections must have the same count, 
            and contain the exact same objects in the same order.
            </summary>
            <param name="expected">The first ICollection of objects to be considered</param>
            <param name="actual">The second ICollection of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are exactly equal.  The collections must have the same count, 
            and contain the exact same objects in the same order.
            If comparer is not null then it will be used to compare the objects.
            </summary>
            <param name="expected">The first ICollection of objects to be considered</param>
            <param name="actual">The second ICollection of objects to be considered</param>
            <param name="comparer">The IComparer to use in comparing objects from each ICollection</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEquivalent(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Asserts that expected and actual are equivalent, containing the same objects but the match may be in any order.
            </summary>
            <param name="expected">The first ICollection of objects to be considered</param>
            <param name="actual">The second ICollection of objects to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Asserts that expected and actual are equivalent, containing the same objects but the match may be in any order.
            </summary>
            <param name="expected">The first ICollection of objects to be considered</param>
            <param name="actual">The second ICollection of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are equivalent, containing the same objects but the match may be in any order.
            </summary>
            <param name="expected">The first ICollection of objects to be considered</param>
            <param name="actual">The second ICollection of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Asserts that expected and actual are not exactly equal.
            </summary>
            <param name="expected">The first ICollection of objects to be considered</param>
            <param name="actual">The second ICollection of objects to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer)">
            <summary>
            Asserts that expected and actual are not exactly equal.
            If comparer is not null then it will be used to compare the objects.
            </summary>
            <param name="expected">The first ICollection of objects to be considered</param>
            <param name="actual">The second ICollection of objects to be considered</param>
            <param name="comparer">The IComparer to use in comparing objects from each ICollection</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Asserts that expected and actual are not exactly equal.
            </summary>
            <param name="expected">The first ICollection of objects to be considered</param>
            <param name="actual">The second ICollection of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String)">
            <summary>
            Asserts that expected and actual are not exactly equal.
            If comparer is not null then it will be used to compare the objects.
            </summary>
            <param name="expected">The first ICollection of objects to be considered</param>
            <param name="actual">The second ICollection of objects to be considered</param>
            <param name="comparer">The IComparer to use in comparing objects from each ICollection</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are not exactly equal.
            </summary>
            <param name="expected">The first ICollection of objects to be considered</param>
            <param name="actual">The second ICollection of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are not exactly equal.
            If comparer is not null then it will be used to compare the objects.
            </summary>
            <param name="expected">The first ICollection of objects to be considered</param>
            <param name="actual">The second ICollection of objects to be considered</param>
            <param name="comparer">The IComparer to use in comparing objects from each ICollection</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEquivalent(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Asserts that expected and actual are not equivalent.
            </summary>
            <param name="expected">The first ICollection of objects to be considered</param>
            <param name="actual">The second ICollection of objects to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Asserts that expected and actual are not equivalent.
            </summary>
            <param name="expected">The first ICollection of objects to be considered</param>
            <param name="actual">The second ICollection of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are not equivalent.
            </summary>
            <param name="expected">The first ICollection of objects to be considered</param>
            <param name="actual">The second ICollection of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.Contains(System.Collections.ICollection,System.Object)">
            <summary>
            Asserts that collection contains actual as an item.
            </summary>
            <param name="collection">ICollection of objects to be considered</param>
            <param name="actual">Object to be found within collection</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.Contains(System.Collections.ICollection,System.Object,System.String)">
            <summary>
            Asserts that collection contains actual as an item.
            </summary>
            <param name="collection">ICollection of objects to be considered</param>
            <param name="actual">Object to be found within collection</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.Contains(System.Collections.ICollection,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that collection contains actual as an item.
            </summary>
            <param name="collection">ICollection of objects to be considered</param>
            <param name="actual">Object to be found within collection</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.DoesNotContain(System.Collections.ICollection,System.Object)">
            <summary>
            Asserts that collection does not contain actual as an item.
            </summary>
            <param name="collection">ICollection of objects to be considered</param>
            <param name="actual">Object that cannot exist within collection</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.DoesNotContain(System.Collections.ICollection,System.Object,System.String)">
            <summary>
            Asserts that collection does not contain actual as an item.
            </summary>
            <param name="collection">ICollection of objects to be considered</param>
            <param name="actual">Object that cannot exist within collection</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.DoesNotContain(System.Collections.ICollection,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that collection does not contain actual as an item.
            </summary>
            <param name="collection">ICollection of objects to be considered</param>
            <param name="actual">Object that cannot exist within collection</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsNotSubsetOf(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Asserts that superset is not a subject of subset.
            </summary>
            <param name="subset">The ICollection superset to be considered</param>
            <param name="superset">The ICollection subset to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsNotSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Asserts that superset is not a subject of subset.
            </summary>
            <param name="subset">The ICollection superset to be considered</param>
            <param name="superset">The ICollection subset to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsNotSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Asserts that superset is not a subject of subset.
            </summary>
            <param name="subset">The ICollection superset to be considered</param>
            <param name="superset">The ICollection subset to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsSubsetOf(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Asserts that superset is a subset of subset.
            </summary>
            <param name="subset">The ICollection superset to be considered</param>
            <param name="superset">The ICollection subset to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Asserts that superset is a subset of subset.
            </summary>
            <param name="subset">The ICollection superset to be considered</param>
            <param name="superset">The ICollection subset to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Asserts that superset is a subset of subset.
            </summary>
            <param name="subset">The ICollection superset to be considered</param>
            <param name="superset">The ICollection subset to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsEmpty(System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
            <param name="message">The message to be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsEmpty(System.Collections.ICollection,System.String)">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
            <param name="message">The message to be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsEmpty(System.Collections.ICollection)">
            <summary>
            Assert that an array,list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsNotEmpty(System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
            <param name="message">The message to be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsNotEmpty(System.Collections.ICollection,System.String)">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
            <param name="message">The message to be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsNotEmpty(System.Collections.ICollection)">
            <summary>
            Assert that an array,list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
        </member>
        <member name="T:NUnit.Framework.AbstractAsserter">
            <summary>
            NOTE: The use of asserters for extending NUnit has
            now been replaced by the use of constraints. This
            class is marked obsolete.
            
            AbstractAsserter is the base class for all asserters.
            Asserters encapsulate a condition test and generation 
            of an AssertionException with a tailored message. They
            are used by the Assert class as helper objects.
            
            User-defined asserters may be passed to the 
            Assert.DoAssert method in order to implement 
            extended asserts.
            </summary>
        </member>
        <member name="T:NUnit.Framework.IAsserter">
            <summary>
            NOTE: The use of asserters for extending NUnit has
            now been replaced by the use of constraints. This
            interface is marked obsolete.
            
            The interface implemented by an asserter. Asserters
            encapsulate a condition test and generation of an
            AssertionException with a tailored message. They
            are used by the Assert class as helper objects.
            
            User-defined asserters may be passed to the
            Assert.DoAssert method in order to implement
            extended asserts.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IAsserter.Test">
            <summary>
            Test the condition for the assertion.
            </summary>
            <returns>True if the test succeeds</returns>
        </member>
        <member name="P:NUnit.Framework.IAsserter.Message">
            <summary>
            Return the message giving the failure reason.
            The return value is unspecified if no failure
            has occured.
            </summary>
        </member>
        <member name="F:NUnit.Framework.AbstractAsserter.userMessage">
            <summary>
            The user-defined message for this asserter.
            </summary>
        </member>
        <member name="F:NUnit.Framework.AbstractAsserter.args">
            <summary>
            Arguments to use in formatting the user-defined message.
            </summary>
        </member>
        <member name="F:NUnit.Framework.AbstractAsserter.failureMessage">
            <summary>
            Our failure message object, initialized as needed
            </summary>
        </member>
        <member name="M:NUnit.Framework.AbstractAsserter.#ctor(System.String,System.Object[])">
            <summary>
            Constructs an AbstractAsserter
            </summary>
            <param name="message">The message issued upon failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.AbstractAsserter.Test">
            <summary>
            Test method to be implemented by derived types.
            Default always succeeds.
            </summary>
            <returns>True if the test succeeds</returns>
        </member>
        <member name="P:NUnit.Framework.AbstractAsserter.FailureMessage">
            <summary>
            AssertionFailureMessage object used internally
            </summary>
        </member>
        <member name="P:NUnit.Framework.AbstractAsserter.Message">
            <summary>
            Message related to a failure. If no failure has
            occured, the result is unspecified.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Assertion">
            <summary>
            The Assertion class is obsolete and has been
            replaced by the Assert class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assertion.Assert(System.String,System.Boolean)">
            <summary>
            Asserts that a condition is true. If it isn't it throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="message">The message to display is the condition
            is false</param>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assertion.Assert(System.Boolean)">
            <summary>
            Asserts that a condition is true. If it isn't it throws
            an <see cref="T:NUnit.Framework.AssertionException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assertion.AssertEquals(System.Double,System.Double,System.Double)">
            <summary>
            /// Asserts that two doubles are equal concerning a delta. If the
            expected value is infinity then the delta value is ignored.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
        </member>
        <member name="M:NUnit.Framework.Assertion.AssertEquals(System.Single,System.Single,System.Single)">
            <summary>
            /// Asserts that two singles are equal concerning a delta. If the
            expected value is infinity then the delta value is ignored.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
        </member>
        <member name="M:NUnit.Framework.Assertion.AssertEquals(System.Object,System.Object)">
            <summary>Asserts that two objects are equal. If they are not
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.</summary>
        </member>
        <member name="M:NUnit.Framework.Assertion.AssertEquals(System.Int32,System.Int32)">
            <summary>Asserts that two ints are equal. If they are not
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.</summary>
        </member>
        <member name="M:NUnit.Framework.Assertion.AssertEquals(System.String,System.Int32,System.Int32)">
            <summary>Asserts that two ints are equal. If they are not
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.</summary>
        </member>
        <member name="M:NUnit.Framework.Assertion.AssertEquals(System.String,System.Double,System.Double,System.Double)">
            <summary>Asserts that two doubles are equal concerning a delta.
            If the expected value is infinity then the delta value is ignored.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assertion.AssertEquals(System.String,System.Single,System.Single,System.Single)">
            <summary>Asserts that two floats are equal concerning a delta.
            If the expected value is infinity then the delta value is ignored.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assertion.AssertEquals(System.String,System.Object,System.Object)">
            <summary>
            Asserts that two objects are equal.  Two objects are considered
            equal if both are null, or if both have the same value.  Numeric
            types are compared via string comparision on their contents to
            avoid problems comparing values between different types.  All
            non-numeric types are compared by using the <c>Equals</c> method.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assertion.AssertNotNull(System.Object)">
            <summary>Asserts that an object isn't null.</summary>
        </member>
        <member name="M:NUnit.Framework.Assertion.AssertNotNull(System.String,System.Object)">
            <summary>Asserts that an object isn't null.</summary>
        </member>
        <member name="M:NUnit.Framework.Assertion.AssertNull(System.Object)">
            <summary>Asserts that an object is null.</summary>
        </member>
        <member name="M:NUnit.Framework.Assertion.AssertNull(System.String,System.Object)">
            <summary>Asserts that an object is null.</summary>
        </member>
        <member name="M:NUnit.Framework.Assertion.AssertSame(System.Object,System.Object)">
            <summary>Asserts that two objects refer to the same object. If they
            are not the same an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assertion.AssertSame(System.String,System.Object,System.Object)">
            <summary>Asserts that two objects refer to the same object. 
            If they are not an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assertion.Fail">
            <summary>Fails a test with no message.</summary>
        </member>
        <member name="M:NUnit.Framework.Assertion.Fail(System.String)">
            <summary>Fails a test with the given message.</summary>
        </member>
        <member name="T:NUnit.Framework.AssertionException">
            <summary>
            Thrown when an assertion failed.
            </summary>
            
        </member>
        <member name="M:NUnit.Framework.AssertionException.#ctor(System.String)">
            <param name="message">The error message that explains 
            the reason for the exception</param>
        </member>
        <member name="M:NUnit.Framework.AssertionException.#ctor(System.String,System.Exception)">
            <param name="message">The error message that explains 
            the reason for the exception</param>
            <param name="inner">The exception that caused the 
            current exception</param>
        </member>
        <member name="M:NUnit.Framework.AssertionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.AssertionFailureMessage">
            <summary>
            AssertionFailureMessage encapsulates a failure message
            issued as a result of an Assert failure.
            </summary>
        </member>
        <member name="F:NUnit.Framework.AssertionFailureMessage.PreClipLength">
            <summary>
            Number of characters before a highlighted position before
            clipping will occur.  Clipped text is replaced with an
            elipsis "..."
            </summary>
        </member>
        <member name="F:NUnit.Framework.AssertionFailureMessage.PostClipLength">
            <summary>
            Number of characters after a highlighted position before
            clipping will occur.  Clipped text is replaced with an
            elipsis "..."
            </summary>
        </member>
        <member name="F:NUnit.Framework.AssertionFailureMessage.expectedPrefix">
            <summary>
            Prefix used to start an expected value line.
            Must be same length as actualPrefix.
            </summary>
        </member>
        <member name="F:NUnit.Framework.AssertionFailureMessage.actualPrefix">
            <summary>
            Prefix used to start an actual value line.
            Must be same length as expectedPrefix.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.#ctor(System.String,System.Object[])">
            <summary>
            Construct an AssertionFailureMessage with a message
            and optional arguments.
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.#ctor">
            <summary>
            Construct an empty AssertionFailureMessage
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.WriteExpectedLine(System.String)">
            <summary>
            Add an expected value line to the message containing
            the text provided as an argument.
            </summary>
            <param name="text">Text describing what was expected.</param>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.WriteActualLine(System.String)">
            <summary>
            Add an actual value line to the message containing
            the text provided as an argument.
            </summary>
            <param name="text">Text describing the actual value.</param>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.DisplayExpectedValue(System.Object)">
            <summary>
            Add an expected value line to the message containing
            a string representation of the object provided.
            </summary>
            <param name="expected">An object representing the expected value</param>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.DisplayExpectedValue(System.Double,System.Double)">
            <summary>
            Add an expected value line to the message containing a double
            and the tolerance used in making the comparison.
            </summary>
            <param name="expected">The expected value</param>
            <param name="tolerance">The tolerance specified in the Assert</param>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.DisplayActualValue(System.Object)">
            <summary>
            Add an actual value line to the message containing
            a string representation of the object provided.
            </summary>
            <param name="actual">An object representing what was actually found</param>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.DisplayExpectedAndActual(System.Object,System.Object)">
            <summary>
            Display two lines that communicate the expected value, and the actual value
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value found</param>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.DisplayExpectedAndActual(System.Double,System.Double,System.Double)">
            <summary>
            Display two lines that communicate the expected value, the actual value and
            the tolerance used in comparing two doubles.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value found</param>
            <param name="tolerance">The tolerance specified in the Assert</param>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.DisplayPositionMarker(System.Int32)">
            <summary>
            Draws a marker under the expected/actual strings that highlights
            where in the string a mismatch occurred.
            </summary>
            <param name="iPosition">The position of the mismatch</param>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.BuildStringLengthReport(System.String,System.String)">
            <summary>
            Reports whether the string lengths are the same or different, and
            what the string lengths are.
            </summary>
            <param name="sExpected">The expected string</param>
            <param name="sActual">The actual string value</param>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.DisplayDifferences(System.Object,System.Object,System.Boolean)">
            <summary>
            Called to create additional message lines when two objects have been 
            found to be unequal.  If the inputs are strings, a special message is
            rendered that can help track down where the strings are different,
            based on differences in length, or differences in content.
            
            If the inputs are not strings, the ToString method of the objects
            is used to show what is different about them.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="caseInsensitive">True if a case-insensitive comparison is being performed</param>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.DisplayDifferencesWithTolerance(System.Double,System.Double,System.Double)">
            <summary>
            Called to create additional message lines when two doubles have been 
            found to be unequal, within the specified tolerance.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.DisplayStringDifferences(System.String,System.String,System.Boolean)">
            <summary>
            Constructs a message that can be displayed when the content of two
            strings are different, but the string lengths are the same.  The
            message will clip the strings to a reasonable length, centered
            around the first position where they are mismatched, and draw 
            a line marking the position of the difference to make comparison
            quicker.
            </summary>
            <param name="sExpected">The expected string value</param>
            <param name="sActual">The actual string value</param>
            <param name="caseInsensitive">True if a case-insensitive comparison is being performed</param>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.DisplayArrayDifferences(System.Array,System.Array,System.Int32)">
            <summary>
            Display a standard message showing the differences found between 
            two arrays that were expected to be equal.
            </summary>
            <param name="expected">The expected array value</param>
            <param name="actual">The actual array value</param>
            <param name="index">The index at which a difference was found</param>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.DisplayCollectionDifferences(System.Collections.ICollection,System.Collections.ICollection,System.Int32)">
            <summary>
            Display a standard message showing the differences found between 
            two collections that were expected to be equal.
            </summary>
            <param name="expected">The expected collection value</param>
            <param name="actual">The actual collection value</param>
            <param name="index">The index at which a difference was found</param>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.GetArrayIndicesFromCollectionIndex(System.Collections.ICollection,System.Int32)">
            <summary>
            Get an array of indices representing the point in a collection or
            array corresponding to a single int index into the collection.
            </summary>
            <param name="collection">The collection to which the indices apply</param>
            <param name="index">Index in the collection</param>
            <returns>Array of indices</returns>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.DisplayListElements(System.String,System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Displays elements from a list on a line
            </summary>
            <param name="label">Text to prefix the line with</param>
            <param name="list">The list of items to display</param>
            <param name="index">The index in the list of the first element to display</param>
            <param name="max">The maximum number of elements to display</param>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.FormatObjectForDisplay(System.Object)">
            <summary>
            Formats an object for display in a message line
            </summary>
            <param name="obj">The object to be displayed</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.InputsAreStrings(System.Object,System.Object)">
            <summary>
            Tests two objects to determine if they are strings.
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.ClipAroundPosition(System.String,System.Int32)">
            <summary>
            Renders up to M characters before, and up to N characters after
            the specified index position.  If leading or trailing text is
            clipped, and elipses "..." is added where the missing text would
            be.
            
            Clips strings to limit previous or post newline characters,
            since these mess up the comparison
            </summary>
            <param name="sString"></param>
            <param name="iPosition"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.FindMismatchPosition(System.String,System.String,System.Int32)">
            <summary>
            Shows the position two strings start to differ.  Comparison 
            starts at the start index.
            </summary>
            <param name="sExpected"></param>
            <param name="sActual"></param>
            <param name="iStart"></param>
            <returns>-1 if no mismatch found, or the index where mismatch found</returns>
        </member>
        <member name="M:NUnit.Framework.AssertionFailureMessage.ConvertWhitespace(System.String)">
            <summary>
            Turns CR, LF, or TAB into visual indicator to preserve visual marker 
            position.   This is done by replacing the '\r' into '\\' and 'r' 
            characters, and the '\n' into '\\' and 'n' characters, and '\t' into
            '\\' and 't' characters.  
            
            Thus the single character becomes two characters for display.
            </summary>
            <param name="sInput"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.CategoryAttribute">
            <summary>
            Attribute used to apply a category to a test
            </summary>
        </member>
        <member name="F:NUnit.Framework.CategoryAttribute.categoryName">
            <summary>
            The name of the category
            </summary>
        </member>
        <member name="M:NUnit.Framework.CategoryAttribute.#ctor(System.String)">
            <summary>
            Construct attribute for a given category
            </summary>
            <param name="name">The name of the category</param>
        </member>
        <member name="M:NUnit.Framework.CategoryAttribute.#ctor">
            <summary>
            Protected constructor uses the Type name as the name
            of the category.
            </summary>
        </member>
        <member name="P:NUnit.Framework.CategoryAttribute.Name">
            <summary>
            The name of the category
            </summary>
        </member>
        <member name="T:NUnit.Framework.IncludeExcludeAttribute">
            <summary>
            Abstract base for Attributes that are used to include tests
            in the test run based on environmental settings.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IncludeExcludeAttribute.#ctor">
            <summary>
            Constructor with no included items specified, for use
            with named property syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IncludeExcludeAttribute.#ctor(System.String)">
            <summary>
            Constructor taking one or more included items
            </summary>
            <param name="include">Comma-delimited list of included items</param>
        </member>
        <member name="P:NUnit.Framework.IncludeExcludeAttribute.Include">
            <summary>
            Name of the item that is needed in order for
            a test to run. Multiple itemss may be given,
            separated by a comma.
            </summary>
        </member>
        <member name="P:NUnit.Framework.IncludeExcludeAttribute.Exclude">
            <summary>
            Name of the item to be excluded. Multiple items
            may be given, separated by a comma.
            </summary>
        </member>
        <member name="P:NUnit.Framework.IncludeExcludeAttribute.Reason">
            <summary>
            The reason for including or excluding the test
            </summary>
        </member>
        <member name="T:NUnit.Framework.PlatformAttribute">
            <summary>
            PlatformAttribute is used to mark a test fixture or an
            individual method as applying to a particular platform only.
            </summary>
        </member>
        <member name="M:NUnit.Framework.PlatformAttribute.#ctor">
            <summary>
            Constructor with no platforms specified, for use
            with named property syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.PlatformAttribute.#ctor(System.String)">
            <summary>
            Constructor taking one or more platforms
            </summary>
            <param name="platforms">Comma-deliminted list of platforms</param>
        </member>
        <member name="T:NUnit.Framework.CultureAttribute">
            <summary>
            CultureAttribute is used to mark a test fixture or an
            individual method as applying to a particular Culture only.
            </summary>
        </member>
        <member name="M:NUnit.Framework.CultureAttribute.#ctor">
            <summary>
            Constructor with no cultures specified, for use
            with named property syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.CultureAttribute.#ctor(System.String)">
            <summary>
            Constructor taking one or more cultures
            </summary>
            <param name="cultures">Comma-deliminted list of cultures</param>
        </member>
        <member name="T:NUnit.Framework.MessageWriter">
            <summary>
            MessageWriter is the abstract base for classes that write
            constraint descriptions and messages in some form. The
            class has separate methods for writing various components
            of a message, allowing implementations to tailor the
            presentation as needed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.MessageWriter.#ctor">
            <summary>
            Construct a MessageWriter given a culture
            </summary>
        </member>
        <member name="M:NUnit.Framework.MessageWriter.WriteMessageLine(System.String,System.Object[])">
            <summary>
            Method to write single line  message with optional args, usually
            written to precede the general failure message.
            </summary>
            <param name="message">The message to be written</param>
            <param name="args">Any arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.MessageWriter.WriteMessageLine(System.Int32,System.String,System.Object[])">
            <summary>
            Method to write single line  message with optional args, usually
            written to precede the general failure message, at a givel 
            indentation level.
            </summary>
            <param name="level">The indentation level of the message</param>
            <param name="message">The message to be written</param>
            <param name="args">Any arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.MessageWriter.DisplayDifferences(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Display Expected and Actual lines for a constraint. This
            is called by MessageWriter's default implementation of 
            WriteMessageTo and provides the generic two-line display. 
            </summary>
            <param name="constraint">The constraint that failed</param>
        </member>
        <member name="M:NUnit.Framework.MessageWriter.DisplayDifferences(System.Object,System.Object)">
            <summary>
            Display Expected and Actual lines for given values. This
            method may be called by constraints that need more control over
            the display of actual and expected values than is provided
            by the default implementation.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value causing the failure</param>
        </member>
        <member name="M:NUnit.Framework.MessageWriter.DisplayDifferences(System.Object,System.Object,System.Object)">
            <summary>
            Display Expected and Actual lines for given values, including
            a tolerance value on the Expected line.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value causing the failure</param>
            <param name="tolerance">The tolerance within which the test was made</param>
        </member>
        <member name="M:NUnit.Framework.MessageWriter.DisplayStringDifferences(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Display the expected and actual string values on separate lines.
            If the mismatch parameter is >=0, an additional line is displayed
            line containing a caret that points to the mismatch point.
            </summary>
            <param name="expected">The expected string value</param>
            <param name="actual">The actual string value</param>
            <param name="mismatch">The point at which the strings don't match or -1</param>
            <param name="ignoreCase">If true, case is ignored in locating the point where the strings differ</param>
        </member>
        <member name="M:NUnit.Framework.MessageWriter.WriteConnector(System.String)">
            <summary>
            Writes the text for a connector.
            </summary>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:NUnit.Framework.MessageWriter.WritePredicate(System.String)">
            <summary>
            Writes the text for a predicate.
            </summary>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:NUnit.Framework.MessageWriter.WriteExpectedValue(System.Object)">
            <summary>
            Writes the text for an expected value.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="M:NUnit.Framework.MessageWriter.WriteModifier(System.String)">
            <summary>
            Writes the text for a modifier
            </summary>
            <param name="modifier">The modifier.</param>
        </member>
        <member name="M:NUnit.Framework.MessageWriter.WriteActualValue(System.Object)">
            <summary>
            Writes the text for an actual value.
            </summary>
            <param name="actual">The actual value.</param>
        </member>
        <member name="M:NUnit.Framework.MessageWriter.WriteValue(System.Object)">
            <summary>
            Writes the text for a generalized value.
            </summary>
            <param name="val">The value.</param>
        </member>
        <member name="M:NUnit.Framework.MessageWriter.WriteCollectionElements(System.Collections.ICollection,System.Int32,System.Int32)">
            <summary>
            Writes the text for a collection value,
            starting at a particular point, to a max length
            </summary>
            <param name="collection">The collection containing elements to write.</param>
            <param name="start">The starting point of the elements to write</param>
            <param name="max">The maximum number of elements to write</param>
        </member>
        <member name="P:NUnit.Framework.MessageWriter.MaxLineLength">
            <summary>
            Abstract method to get the max line length
            </summary>
        </member>
        <member name="T:NUnit.Framework.SetCultureAttribute">
            <summary>
            Summary description for SetCultureAttribute.
            </summary>
        </member>
        <member name="T:NUnit.Framework.PropertyAttribute">
            <summary>
            PropertyAttribute is used to attach information to a test as a name/value pair..
            </summary>
        </member>
        <member name="F:NUnit.Framework.PropertyAttribute.propertyName">
            <summary>
            The property name
            </summary>
        </member>
        <member name="F:NUnit.Framework.PropertyAttribute.propertyValue">
            <summary>
            The property value
            </summary>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor(System.String,System.Object)">
            <summary>
            Construct a PropertyAttribute with a name and value
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The property value</param>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor(System.Object)">
            <summary>
            Constructor for use by inherited classes that use the
            name of the type as the property name.
            </summary>
        </member>
        <member name="P:NUnit.Framework.PropertyAttribute.Name">
            <summary>
            Gets the property name
            </summary>
        </member>
        <member name="P:NUnit.Framework.PropertyAttribute.Value">
            <summary>
            Gets the property value
            </summary>
        </member>
        <member name="M:NUnit.Framework.SetCultureAttribute.#ctor(System.String)">
            <summary>
            Construct given the name of a culture
            </summary>
            <param name="culture"></param>
        </member>
        <member name="T:NUnit.Framework.TextMessageWriter">
            <summary>
            TextMessageWriter writes constraint descriptions and messages
            in displayable form as a text stream. It tailors the display
            of individual message components to form the standard message
            format of NUnit assertion failure messages.
            </summary>
        </member>
        <member name="F:NUnit.Framework.TextMessageWriter.Pfx_Expected">
            <summary>
            Prefix used for the expected value line of a message
            </summary>
        </member>
        <member name="F:NUnit.Framework.TextMessageWriter.Pfx_Actual">
            <summary>
            Prefix used for the actual value line of a message
            </summary>
        </member>
        <member name="F:NUnit.Framework.TextMessageWriter.PrefixLength">
            <summary>
            Length of a message prefix
            </summary>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.#ctor">
            <summary>
            Construct a TextMessageWriter
            </summary>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.#ctor(System.String,System.Object[])">
            <summary>
            Construct a TextMessageWriter, specifying a user message
            and optional formatting arguments.
            </summary>
            <param name="userMessage"></param>
            <param name="args"></param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteMessageLine(System.Int32,System.String,System.Object[])">
            <summary>
            Method to write single line  message with optional args, usually
            written to precede the general failure message, at a givel 
            indentation level.
            </summary>
            <param name="level">The indentation level of the message</param>
            <param name="message">The message to be written</param>
            <param name="args">Any arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.DisplayDifferences(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Display Expected and Actual lines for a constraint. This
            is called by MessageWriter's default implementation of 
            WriteMessageTo and provides the generic two-line display. 
            </summary>
            <param name="constraint">The constraint that failed</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.DisplayDifferences(System.Object,System.Object)">
            <summary>
            Display Expected and Actual lines for given values. This
            method may be called by constraints that need more control over
            the display of actual and expected values than is provided
            by the default implementation.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value causing the failure</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.DisplayDifferences(System.Object,System.Object,System.Object)">
            <summary>
            Display Expected and Actual lines for given values, including
            a tolerance value on the expected line.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value causing the failure</param>
            <param name="tolerance">The tolerance within which the test was made</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.DisplayStringDifferences(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Display the expected and actual string values on separate lines.
            If the mismatch parameter is >=0, an additional line is displayed
            line containing a caret that points to the mismatch point.
            </summary>
            <param name="expected">The expected string value</param>
            <param name="actual">The actual string value</param>
            <param name="mismatch">The point at which the strings don't match or -1</param>
            <param name="ignoreCase">If true, case is ignored in string comparisons</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteConnector(System.String)">
            <summary>
            Writes the text for a connector.
            </summary>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WritePredicate(System.String)">
            <summary>
            Writes the text for a predicate.
            </summary>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteModifier(System.String)">
            <summary>
            Write the text for a modifier.
            </summary>
            <param name="modifier">The modifier.</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteExpectedValue(System.Object)">
            <summary>
            Writes the text for an expected value.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteActualValue(System.Object)">
            <summary>
            Writes the text for an actual value.
            </summary>
            <param name="actual">The actual value.</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteValue(System.Object)">
            <summary>
            Writes the text for a generalized value.
            </summary>
            <param name="val">The value.</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteCollectionElements(System.Collections.ICollection,System.Int32,System.Int32)">
            <summary>
            Writes the text for a collection value,
            starting at a particular point, to a max length
            </summary>
            <param name="collection">The collection containing elements to write.</param>
            <param name="start">The starting point of the elements to write</param>
            <param name="max">The maximum number of elements to write</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteExpectedLine(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Write the generic 'Expected' line for a constraint
            </summary>
            <param name="constraint">The constraint that failed</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteExpectedLine(System.Object)">
            <summary>
            Write the generic 'Expected' line for a given value
            </summary>
            <param name="expected">The expected value</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteExpectedLine(System.Object,System.Object)">
            <summary>
            Write the generic 'Expected' line for a given value
            and tolerance.
            </summary>
            <param name="expected">The expected value</param>
            <param name="tolerance">The tolerance within which the test was made</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteActualLine(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Write the generic 'Actual' line for a constraint
            </summary>
            <param name="constraint">The constraint for which the actual value is to be written</param>
        </member>
        <member name="M:NUnit.Framework.TextMessageWriter.WriteActualLine(System.Object)">
            <summary>
            Write the generic 'Actual' line for a given value
            </summary>
            <param name="actual">The actual value causing a failure</param>
        </member>
        <member name="P:NUnit.Framework.TextMessageWriter.MaxLineLength">
            <summary>
            Gets the maximum line length for this writer
            </summary>
        </member>
        <member name="T:NUnit.Framework.StringAssert">
            <summary>
            Basic Asserts on strings.
            </summary>
        </member>
        <member name="M:NUnit.Framework.StringAssert.Equals(System.Object,System.Object)">
            <summary>
            The Equals method throws an AssertionException. This is done 
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.ReferenceEquals(System.Object,System.Object)">
            <summary>
            override the default ReferenceEquals to throw an AssertionException. This 
            implementation makes sure there is no mistake in calling this function 
            as part of Assert. 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.Contains(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string is found within another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.Contains(System.String,System.String,System.String)">
            <summary>
            Asserts that a string is found within another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.Contains(System.String,System.String)">
            <summary>
            Asserts that a string is found within another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.StartsWith(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string starts with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.StartsWith(System.String,System.String,System.String)">
            <summary>
            Asserts that a string starts with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.StartsWith(System.String,System.String)">
            <summary>
            Asserts that a string starts with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.EndsWith(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string ends with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.EndsWith(System.String,System.String,System.String)">
            <summary>
            Asserts that a string ends with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.EndsWith(System.String,System.String)">
            <summary>
            Asserts that a string ends with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.AreEqualIgnoringCase(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that two strings are equal, without regard to case.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The actual string</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.AreEqualIgnoringCase(System.String,System.String,System.String)">
            <summary>
            Asserts that two strings are equal, without regard to case.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The actual string</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.AreEqualIgnoringCase(System.String,System.String)">
            <summary>
            Asserts that two strings are equal, without regard to case.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The actual string</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.IsMatch(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string matches an expected regular expression pattern.
            </summary>
            <param name="expected">The expected expression</param>
            <param name="actual">The actual string</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.IsMatch(System.String,System.String,System.String)">
            <summary>
            Asserts that a string matches an expected regular expression pattern.
            </summary>
            <param name="expected">The expected expression</param>
            <param name="actual">The actual string</param>
            <param name="message">The message to display in case of failure</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.IsMatch(System.String,System.String)">
            <summary>
            Asserts that a string matches an expected regular expression pattern.
            </summary>
            <param name="expected">The expected expression</param>
            <param name="actual">The actual string</param>
        </member>
        <member name="T:NUnit.Framework.MsgUtils">
            <summary>
            Static methods used in creating messages
            </summary>
        </member>
        <member name="M:NUnit.Framework.MsgUtils.GetTypeRepresentation(System.Object)">
            <summary>
            Returns the representation of a type as used in NUnitLite.
            This is the same as Type.ToString() except for arrays,
            which are displayed with their declared sizes.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.MsgUtils.ConvertWhitespace(System.String)">
            <summary>
            Converts any control characters in a string 
            to their escaped representation.
            </summary>
            <param name="s">The string to be converted</param>
            <returns>The converted string</returns>
        </member>
        <member name="M:NUnit.Framework.MsgUtils.GetArrayIndicesAsString(System.Int32[])">
            <summary>
            Return the a string representation for a set of indices into an array
            </summary>
            <param name="indices">Array of indices for which a string is needed</param>
        </member>
        <member name="M:NUnit.Framework.MsgUtils.GetArrayIndicesFromCollectionIndex(System.Collections.ICollection,System.Int32)">
            <summary>
            Get an array of indices representing the point in a collection or
            array corresponding to a single int index into the collection.
            </summary>
            <param name="collection">The collection to which the indices apply</param>
            <param name="index">Index in the collection</param>
            <returns>Array of indices</returns>
        </member>
        <member name="M:NUnit.Framework.MsgUtils.ClipString(System.String,System.Int32,System.Int32)">
            <summary>
            Clip a string around a particular point, returning the clipped
            string with ellipses representing the removed parts
            </summary>
            <param name="s">The string to be clipped</param>
            <param name="maxStringLength">The maximum permitted length of the result string</param>
            <param name="mismatch">The point around which clipping is to occur</param>
            <returns>The clipped string</returns>
        </member>
        <member name="M:NUnit.Framework.MsgUtils.FindMismatchPosition(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Shows the position two strings start to differ.  Comparison 
            starts at the start index.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The actual string</param>
            <param name="istart">The index in the strings at which comparison should start</param>
            <param name="ignoreCase">Boolean indicating whether case should be ignored</param>
            <returns>-1 if no mismatch found, or the index where mismatch found</returns>
        </member>
        <member name="T:NUnit.Framework.AssertionHelper">
            <summary>
            AssertionHelper is an optional base class for user tests,
            allowing the use of shorter names for constraints and
            asserts and avoiding conflict with the definition of 
            <see cref="T:NUnit.Framework.SyntaxHelpers.Is"/>, from which it inherits much of its
            behavior, in certain mock object frameworks.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(System.Object,NUnit.Framework.Constraints.Constraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure. Works
            identically to <see cref="M:NUnit.Framework.Assert.That(System.Object,NUnit.Framework.Constraints.Constraint)"/>
            </summary>
            <param name="constraint">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(System.Object,NUnit.Framework.Constraints.Constraint,System.String)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure. Works
            identically to <see cref="M:NUnit.Framework.Assert.That(System.Object,NUnit.Framework.Constraints.Constraint,System.String)"/>
            </summary>
            <param name="constraint">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(System.Object,NUnit.Framework.Constraints.Constraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure. Works
            identically to <see cref="M:NUnit.Framework.Assert.That(System.Object,NUnit.Framework.Constraints.Constraint,System.String,System.Object[])"/>
            </summary>
            <param name="constraint">A Constraint to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>. Works Identically to 
            <see cref="M:NUnit.Framework.Assert.That(System.Boolean,System.String,System.Object[])"/>.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is false</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(System.Boolean,System.String)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>. Works Identically to 
            <see cref="M:NUnit.Framework.Assert.That(System.Boolean,System.String)"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is false</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(System.Boolean)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>. Works Identically to <see cref="M:NUnit.Framework.Assert.That(System.Boolean)"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Map(System.Collections.ICollection)">
            <summary>
            Returns a ListMapper based on a collection.
            </summary>
            <param name="original">The original collection</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.FileAssert">
            <summary>
            Summary description for FileAssert.
            </summary>
        </member>
        <member name="M:NUnit.Framework.FileAssert.Equals(System.Object,System.Object)">
            <summary>
            The Equals method throws an AssertionException. This is done 
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.ReferenceEquals(System.Object,System.Object)">
            <summary>
            override the default ReferenceEquals to throw an AssertionException. This 
            implementation makes sure there is no mistake in calling this function 
            as part of Assert. 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.#ctor">
            <summary>
            We don't actually want any instances of this object, but some people
            like to inherit from it to add other static methods. Hence, the
            protected constructor disallows any instances of this object. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreEqual(System.IO.Stream,System.IO.Stream,System.String,System.Object[])">
            <summary>
            Verifies that two Streams are equal.  Two Streams are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected Stream</param>
            <param name="actual">The actual Stream</param>
            <param name="message">The message to display if Streams are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreEqual(System.IO.Stream,System.IO.Stream,System.String)">
            <summary>
            Verifies that two Streams are equal.  Two Streams are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected Stream</param>
            <param name="actual">The actual Stream</param>
            <param name="message">The message to display if objects are not equal</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreEqual(System.IO.Stream,System.IO.Stream)">
            <summary>
            Verifies that two Streams are equal.  Two Streams are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected Stream</param>
            <param name="actual">The actual Stream</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreEqual(System.IO.FileInfo,System.IO.FileInfo,System.String,System.Object[])">
            <summary>
            Verifies that two files are equal.  Two files are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A file containing the value that is expected</param>
            <param name="actual">A file containing the actual value</param>
            <param name="message">The message to display if Streams are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreEqual(System.IO.FileInfo,System.IO.FileInfo,System.String)">
            <summary>
            Verifies that two files are equal.  Two files are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A file containing the value that is expected</param>
            <param name="actual">A file containing the actual value</param>
            <param name="message">The message to display if objects are not equal</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreEqual(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Verifies that two files are equal.  Two files are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A file containing the value that is expected</param>
            <param name="actual">A file containing the actual value</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreEqual(System.String,System.String,System.String,System.Object[])">
            <summary>
            Verifies that two files are equal.  Two files are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The path to a file containing the value that is expected</param>
            <param name="actual">The path to a file containing the actual value</param>
            <param name="message">The message to display if Streams are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreEqual(System.String,System.String,System.String)">
            <summary>
            Verifies that two files are equal.  Two files are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The path to a file containing the value that is expected</param>
            <param name="actual">The path to a file containing the actual value</param>
            <param name="message">The message to display if objects are not equal</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreEqual(System.String,System.String)">
            <summary>
            Verifies that two files are equal.  Two files are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The path to a file containing the value that is expected</param>
            <param name="actual">The path to a file containing the actual value</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreNotEqual(System.IO.Stream,System.IO.Stream,System.String,System.Object[])">
            <summary>
            Asserts that two Streams are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected Stream</param>
            <param name="actual">The actual Stream</param>
            <param name="message">The message to be displayed when the two Stream are the same.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreNotEqual(System.IO.Stream,System.IO.Stream,System.String)">
            <summary>
            Asserts that two Streams are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected Stream</param>
            <param name="actual">The actual Stream</param>
            <param name="message">The message to be displayed when the Streams are the same.</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreNotEqual(System.IO.Stream,System.IO.Stream)">
            <summary>
            Asserts that two Streams are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected Stream</param>
            <param name="actual">The actual Stream</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreNotEqual(System.IO.FileInfo,System.IO.FileInfo,System.String,System.Object[])">
            <summary>
            Asserts that two files are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A file containing the value that is expected</param>
            <param name="actual">A file containing the actual value</param>
            <param name="message">The message to display if Streams are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreNotEqual(System.IO.FileInfo,System.IO.FileInfo,System.String)">
            <summary>
            Asserts that two files are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A file containing the value that is expected</param>
            <param name="actual">A file containing the actual value</param>
            <param name="message">The message to display if objects are not equal</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreNotEqual(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Asserts that two files are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A file containing the value that is expected</param>
            <param name="actual">A file containing the actual value</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreNotEqual(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that two files are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The path to a file containing the value that is expected</param>
            <param name="actual">The path to a file containing the actual value</param>
            <param name="message">The message to display if Streams are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreNotEqual(System.String,System.String,System.String)">
            <summary>
            Asserts that two files are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The path to a file containing the value that is expected</param>
            <param name="actual">The path to a file containing the actual value</param>
            <param name="message">The message to display if objects are not equal</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreNotEqual(System.String,System.String)">
            <summary>
            Asserts that two files are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The path to a file containing the value that is expected</param>
            <param name="actual">The path to a file containing the actual value</param>
        </member>
        <member name="T:NUnit.Framework.IgnoreException">
            <summary>
            Thrown when an assertion failed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IgnoreException.#ctor(System.String)">
            <param name="message"></param>
        </member>
        <member name="M:NUnit.Framework.IgnoreException.#ctor(System.String,System.Exception)">
            <param name="message">The error message that explains 
            the reason for the exception</param>
            <param name="inner">The exception that caused the 
            current exception</param>
        </member>
        <member name="M:NUnit.Framework.IgnoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestCase">
            <summary>
            Obsolete class, formerly used to identify tests through
            inheritance. Avoid using this class for new tests.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestCase.SetUp">
            <summary>
            Method called immediately before running the test.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestCase.TearDown">
            <summary>
            Method Called immediately after running the test. It is
            guaranteed to be called, even if an exception is thrown. 
            </summary>
        </member>
        <member name="T:NUnit.Framework.SetUpAttribute">
            <summary>
            Attribute used to mark a class that contains one-time SetUp 
            and/or TearDown methods that apply to all the tests in a
            namespace or an assembly.
            </summary>
        </member>
        <member name="T:NUnit.Framework.SetUpFixtureAttribute">
            <summary>
            SetUpFixtureAttribute is used to identify a SetUpFixture
            </summary>
        </member>
        <member name="T:NUnit.Framework.SuiteAttribute">
            <summary>
            Attribute used to mark a static (shared in VB) property
            that returns a list of tests.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TearDownAttribute">
            <summary>
            Attribute used to identify a method that is called 
            immediately after each test is run. The method is 
            guaranteed to be called, even if an exception is thrown.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestAttribute">
            <summary>
            Adding this attribute to a method within a <seealso cref="T:NUnit.Framework.TestFixtureAttribute"/> 
            class makes the method callable from the NUnit test runner. There is a property 
            called Description which is optional which you can provide a more detailed test
            description. This class cannot be inherited.
            </summary>
            
            <example>
            [TestFixture]
            public class Fixture
            {
              [Test]
              public void MethodToTest()
              {}
              
              [Test(Description = "more detailed description")]
              publc void TestDescriptionMethod()
              {}
            }
            </example>
            
        </member>
        <member name="P:NUnit.Framework.TestAttribute.Description">
            <summary>
            Descriptive text for this test
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestFixtureAttribute">
            <example>
            [TestFixture]
            public class ExampleClass 
            {}
            </example>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Description">
            <summary>
            Descriptive text for this fixture
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestFixtureSetUpAttribute">
            <summary>
            Attribute used to identify a method that is 
            called before any tests in a fixture are run.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestFixtureTearDownAttribute">
            <summary>
            Attribute used to identify a method that is called after
            all the tests in a fixture have run. The method is 
            guaranteed to be called, even if an exception is thrown.
            </summary>
        </member>
        <member name="T:NUnit.Framework.IgnoreAttribute">
            <summary>
            Attribute used to mark a test that is to be ignored.
            Ignored tests result in a warning message when the
            tests are run.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IgnoreAttribute.#ctor">
            <summary>
            Constructs the attribute without giving a reason 
            for ignoring the test.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IgnoreAttribute.#ctor(System.String)">
            <summary>
            Constructs the attribute giving a reason for ignoring the test
            </summary>
            <param name="reason">The reason for ignoring the test</param>
        </member>
        <member name="P:NUnit.Framework.IgnoreAttribute.Reason">
            <summary>
            The reason for ignoring a test
            </summary>
        </member>
        <member name="T:NUnit.Framework.ExplicitAttribute">
            <summary>
            ExplicitAttribute marks a test or test fixture so that it will
            only be run if explicitly executed from the gui or command line
            or if it is included by use of a filter. The test will not be
            run simply because an enclosing suite is run.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ExplicitAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.ExplicitAttribute.#ctor(System.String)">
            <summary>
            Constructor with a reason
            </summary>
            <param name="reason">The reason test is marked explicit</param>
        </member>
        <member name="P:NUnit.Framework.ExplicitAttribute.Reason">
            <summary>
            The reason test is marked explicit
            </summary>
        </member>
        <member name="T:NUnit.Framework.DescriptionAttribute">
            <summary>
            Attribute used to provide descriptive text about a 
            test case or fixture.
            </summary>
        </member>
        <member name="M:NUnit.Framework.DescriptionAttribute.#ctor(System.String)">
            <summary>
            Construct the attribute
            </summary>
            <param name="description">Text describing the test</param>
        </member>
        <member name="P:NUnit.Framework.DescriptionAttribute.Description">
            <summary>
            Gets the test description
            </summary>
        </member>
        <member name="T:NUnit.Framework.IExpectException">
            <summary>
            Interface implemented by a user fixture in order to
            validate any expected exceptions. It is only called
            for test methods marked with the ExpectedException
            attribute.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IExpectException.HandleException(System.Exception)">
            <summary>
            Method to handle an expected exception
            </summary>
            <param name="ex">The exception to be handled</param>
        </member>
    </members>
</doc>
