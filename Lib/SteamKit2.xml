<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SteamKit2</name>
    </assembly>
    <members>
        <member name="T:SteamKit2.ClientMsgProtobuf`1">
            <summary>
            Represents a protobuf backed client message.
            </summary>
            <typeparam name="BodyType">The body type of this message.</typeparam>
        </member>
        <member name="T:SteamKit2.MsgBase`1">
            <summary>
            This is the abstract base class for all available client messages.
            It's used to maintain packet payloads and provide a header for all client messages.
            </summary>
            <typeparam name="HdrType">The header type for this client message.</typeparam>
        </member>
        <member name="T:SteamKit2.MsgBase">
            <summary>
            This class provides a payload backing to client messages.
            </summary>
        </member>
        <member name="M:SteamKit2.MsgBase.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.MsgBase"/> class.
            </summary>
            <param name="payloadReserve">The number of bytes to initialize the payload capacity to.</param>
        </member>
        <member name="M:SteamKit2.MsgBase.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks within the payload to the specified offset.
            </summary>
            <param name="offset">The offset in the payload to seek to.</param>
            <param name="loc">The origin to seek from.</param>
            <returns>The new position within the stream, calculated by combining the initial reference point and the offset.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.Write(System.Byte)">
            <summary>
            Writes a single unsigned byte to the message payload.
            </summary>
            <param name="data">The unsigned byte.</param>
        </member>
        <member name="M:SteamKit2.MsgBase.Write(System.SByte)">
            <summary>
            Writes a single signed byte to the message payload.
            </summary>
            <param name="data">The signed byte.</param>
        </member>
        <member name="M:SteamKit2.MsgBase.Write(System.Byte[])">
            <summary>
            Writes the specified byte array to the message payload.
            </summary>
            <param name="data">The byte array.</param>
        </member>
        <member name="M:SteamKit2.MsgBase.Write(System.Int16)">
            <summary>
            Writes a single 16bit short to the message payload.
            </summary>
            <param name="data">The short.</param>
        </member>
        <member name="M:SteamKit2.MsgBase.Write(System.UInt16)">
            <summary>
            Writes a single unsigned 16bit short to the message payload.
            </summary>
            <param name="data">The unsigned short.</param>
        </member>
        <member name="M:SteamKit2.MsgBase.Write(System.Int32)">
            <summary>
            Writes a single 32bit integer to the message payload.
            </summary>
            <param name="data">The integer.</param>
        </member>
        <member name="M:SteamKit2.MsgBase.Write(System.UInt32)">
            <summary>
            Writes a single unsigned 32bit integer to the message payload.
            </summary>
            <param name="data">The unsigned integer.</param>
        </member>
        <member name="M:SteamKit2.MsgBase.Write(System.Int64)">
            <summary>
            Writes a single 64bit long to the message payload.
            </summary>
            <param name="data">The long.</param>
        </member>
        <member name="M:SteamKit2.MsgBase.Write(System.UInt64)">
            <summary>
            Writes a single unsigned 64bit long to the message payload.
            </summary>
            <param name="data">The unsigned long.</param>
        </member>
        <member name="M:SteamKit2.MsgBase.Write(System.Single)">
            <summary>
            Writes a single 32bit float to the message payload.
            </summary>
            <param name="data">The float.</param>
        </member>
        <member name="M:SteamKit2.MsgBase.Write(System.Double)">
            <summary>
            Writes a single 64bit double to the message payload.
            </summary>
            <param name="data">The double.</param>
        </member>
        <member name="M:SteamKit2.MsgBase.Write(System.String)">
            <summary>
            Writes the specified string to the message payload using default encoding.
            This function does not write a terminating null character.
            </summary>
            <param name="data">The string to write.</param>
        </member>
        <member name="M:SteamKit2.MsgBase.Write(System.String,System.Text.Encoding)">
            <summary>
            Writes the specified string to the message payload using the specified encoding.
            This function does not write a terminating null character.
            </summary>
            <param name="data">The string to write.</param>
            <param name="encoding">The encoding to use.</param>
        </member>
        <member name="M:SteamKit2.MsgBase.WriteNullTermString(System.String)">
            <summary>
            Writes the secified string and a null terminator to the message payload using default encoding.
            </summary>
            <param name="data">The string to write.</param>
        </member>
        <member name="M:SteamKit2.MsgBase.WriteNullTermString(System.String,System.Text.Encoding)">
            <summary>
            Writes the specified string and a null terminator to the message payload using the specified encoding.
            </summary>
            <param name="data">The string to write.</param>
            <param name="encoding">The encoding to use.</param>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadInt8">
            <summary>
            Reads a single signed byte from the message payload.
            </summary>
            <returns>The signed byte.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadSByte">
            <summary>
            Reads a single signed byte from the message payload.
            </summary>
            <returns>The signed byte.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadUInt8">
            <summary>
            Reads a single unsigned byte from the message payload.
            </summary>
            <returns>The unsigned byte.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadByte">
            <summary>
            Reads a single unsigned byte from the message payload.
            </summary>
            <returns>The unsigned byte.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadBytes(System.Int32)">
            <summary>
            Reads a number of bytes from the message payload.
            </summary>
            <param name="numBytes">The number of bytes to read.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadInt16">
            <summary>
            Reads a single 16bit short from the message payload.
            </summary>
            <returns>The short.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadShort">
            <summary>
            Reads a single 16bit short from the message payload.
            </summary>
            <returns>The short.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadUInt16">
            <summary>
            Reads a single unsigned 16bit short from the message payload.
            </summary>
            <returns>The unsigned short.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadUShort">
            <summary>
            Reads a single unsigned 16bit short from the message payload.
            </summary>
            <returns>The unsigned short.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadInt32">
            <summary>
            Reads a single 32bit integer from the message payload.
            </summary>
            <returns>The integer.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadInt">
            <summary>
            Reads a single 32bit integer from the message payload.
            </summary>
            <returns>The integer.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadUInt32">
            <summary>
            Reads a single unsigned 32bit integer from the message payload.
            </summary>
            <returns>The unsigned integer.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadUInt">
            <summary>
            Reads a single unsigned 32bit integer from the message payload.
            </summary>
            <returns>The unsigned integer.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadInt64">
            <summary>
            Reads a single 64bit long from the message payload.
            </summary>
            <returns>The long.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadLong">
            <summary>
            Reads a single 64bit long from the message payload.
            </summary>
            <returns>The long.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadUInt64">
            <summary>
            Reads a single unsigned 64bit long from the message payload.
            </summary>
            <returns>The unsigned long.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadULong">
            <summary>
            Reads a single unsigned 64bit long from the message payload.
            </summary>
            <returns>The unsigned long.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadSingle">
            <summary>
            Reads a single 32bit float from the message payload.
            </summary>
            <returns>The float.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadFloat">
            <summary>
            Reads a single 32bit float from the message payload.
            </summary>
            <returns>The float.</returns>
        </member>
        <member name="M:SteamKit2.MsgBase.ReadDouble">
            <summary>
            Reads a single 64bit double from the message payload.
            </summary>
            <returns>The double.</returns>
        </member>
        <member name="P:SteamKit2.MsgBase.Payload">
            <summary>
            Returns a <see cref="T:System.IO.MemoryStream"/> which is the backing stream for client message payload data.
            </summary>
        </member>
        <member name="T:SteamKit2.IClientMsg">
            <summary>
            Represents a unified interface into client messages.
            </summary>
        </member>
        <member name="M:SteamKit2.IClientMsg.Serialize">
            <summary>
            Serializes this client message instance to a byte array.
            </summary>
            <returns>Data representing a client message.</returns>
        </member>
        <member name="M:SteamKit2.IClientMsg.Deserialize(System.Byte[])">
            <summary>
            Initializes this client message by deserializing the specified data.
            </summary>
            <param name="data">The data representing a client message.</param>
        </member>
        <member name="P:SteamKit2.IClientMsg.IsProto">
            <summary>
            Gets a value indicating whether this client message is protobuf backed.
            </summary>
            <value>
              <c>true</c> if this instance is protobuf backed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.IClientMsg.MsgType">
            <summary>
            Gets the network message type of this client message.
            </summary>
            <value>
            The message type.
            </value>
        </member>
        <member name="P:SteamKit2.IClientMsg.SessionID">
            <summary>
            Gets or sets the session id for this client message.
            </summary>
            <value>
            The session id.
            </value>
        </member>
        <member name="P:SteamKit2.IClientMsg.SteamID">
            <summary>
            Gets or sets the <see cref="P:SteamKit2.IClientMsg.SteamID"/> for this client message.
            </summary>
            <value>
            The <see cref="P:SteamKit2.IClientMsg.SteamID"/>.
            </value>
        </member>
        <member name="P:SteamKit2.IClientMsg.TargetJobID">
            <summary>
            Gets or sets the target job id for this client message.
            </summary>
            <value>
            The target job id.
            </value>
        </member>
        <member name="P:SteamKit2.IClientMsg.SourceJobID">
            <summary>
            Gets or sets the source job id for this client message.
            </summary>
            <value>
            The source job id.
            </value>
        </member>
        <member name="M:SteamKit2.MsgBase`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.MsgBase`1"/> class.
            </summary>
            <param name="payloadReserve">The number of bytes to initialize the payload capacity to.</param>
        </member>
        <member name="M:SteamKit2.MsgBase`1.Serialize">
            <summary>
            Serializes this client message instance to a byte array.
            </summary>
            <returns>
            Data representing a client message.
            </returns>
        </member>
        <member name="M:SteamKit2.MsgBase`1.Deserialize(System.Byte[])">
            <summary>
            Initializes this client message by deserializing the specified data.
            </summary>
            <param name="data">The data representing a client message.</param>
        </member>
        <member name="P:SteamKit2.MsgBase`1.IsProto">
            <summary>
            Gets a value indicating whether this client message is protobuf backed.
            </summary>
            <value>
            	<c>true</c> if this instance is protobuf backed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.MsgBase`1.MsgType">
            <summary>
            Gets the network message type of this client message.
            </summary>
            <value>
            The network message type.
            </value>
        </member>
        <member name="P:SteamKit2.MsgBase`1.SessionID">
            <summary>
            Gets or sets the session id for this client message.
            </summary>
            <value>
            The session id.
            </value>
        </member>
        <member name="P:SteamKit2.MsgBase`1.SteamID">
            <summary>
            Gets or sets the <see cref="P:SteamKit2.MsgBase`1.SteamID"/> for this client message.
            </summary>
            <value>
            The <see cref="P:SteamKit2.MsgBase`1.SteamID"/>.
            </value>
        </member>
        <member name="P:SteamKit2.MsgBase`1.TargetJobID">
            <summary>
            Gets or sets the target job id for this client message.
            </summary>
            <value>
            The target job id.
            </value>
        </member>
        <member name="P:SteamKit2.MsgBase`1.SourceJobID">
            <summary>
            Gets or sets the source job id for this client message.
            </summary>
            <value>
            The source job id.
            </value>
        </member>
        <member name="P:SteamKit2.MsgBase`1.Header">
            <summary>
            Gets the header for this message type. 
            </summary>
        </member>
        <member name="M:SteamKit2.ClientMsgProtobuf`1.#ctor(SteamKit2.EMsg,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.ClientMsgProtobuf`1"/> class.
            This is a client send constructor.
            </summary>
            <param name="eMsg">The network message type this client message represents.</param>
            <param name="payloadReserve">The number of bytes to initialize the payload capacity to.</param>
        </member>
        <member name="M:SteamKit2.ClientMsgProtobuf`1.#ctor(SteamKit2.EMsg,SteamKit2.MsgBase{SteamKit2.Internal.MsgHdrProtoBuf},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.ClientMsgProtobuf`1"/> class.
            This a reply constructor.
            </summary>
            <param name="eMsg">The network message type this client message represents.</param>
            <param name="msg">The message that this instance is a reply for.</param>
            <param name="payloadReserve">The number of bytes to initialize the payload capacity to.</param>
        </member>
        <member name="M:SteamKit2.ClientMsgProtobuf`1.#ctor(SteamKit2.IPacketMsg)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.ClientMsgProtobuf`1"/> class.
            This is a recieve constructor.
            </summary>
            <param name="msg">The packet message to build this client message from.</param>
        </member>
        <member name="M:SteamKit2.ClientMsgProtobuf`1.Serialize">
            <summary>
            Serializes this client message instance to a byte array.
            </summary>
            <returns>
            Data representing a client message.
            </returns>
        </member>
        <member name="M:SteamKit2.ClientMsgProtobuf`1.Deserialize(System.Byte[])">
            <summary>
            Initializes this client message by deserializing the specified data.
            </summary>
            <param name="data">The data representing a client message.</param>
        </member>
        <member name="P:SteamKit2.ClientMsgProtobuf`1.IsProto">
            <summary>
            Gets a value indicating whether this client message is protobuf backed.
            Client messages of this type are always protobuf backed.
            </summary>
            <value>
            	<c>true</c> if this instance is protobuf backed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.ClientMsgProtobuf`1.MsgType">
            <summary>
            Gets the network message type of this client message.
            </summary>
            <value>
            The network message type.
            </value>
        </member>
        <member name="P:SteamKit2.ClientMsgProtobuf`1.SessionID">
            <summary>
            Gets or sets the session id for this client message.
            </summary>
            <value>
            The session id.
            </value>
        </member>
        <member name="P:SteamKit2.ClientMsgProtobuf`1.SteamID">
            <summary>
            Gets or sets the <see cref="P:SteamKit2.ClientMsgProtobuf`1.SteamID"/> for this client message.
            </summary>
            <value>
            The <see cref="P:SteamKit2.ClientMsgProtobuf`1.SteamID"/>.
            </value>
        </member>
        <member name="P:SteamKit2.ClientMsgProtobuf`1.TargetJobID">
            <summary>
            Gets or sets the target job id for this client message.
            </summary>
            <value>
            The target job id.
            </value>
        </member>
        <member name="P:SteamKit2.ClientMsgProtobuf`1.SourceJobID">
            <summary>
            Gets or sets the source job id for this client message.
            </summary>
            <value>
            The source job id.
            </value>
        </member>
        <member name="P:SteamKit2.ClientMsgProtobuf`1.ProtoHeader">
            <summary>
            Shorthand accessor for the protobuf header.
            </summary>
        </member>
        <member name="P:SteamKit2.ClientMsgProtobuf`1.Body">
            <summary>
            Gets the body structure of this message.
            </summary>
        </member>
        <member name="T:SteamKit2.ClientMsg`1">
            <summary>
            Represents a struct backed client message.
            </summary>
            <typeparam name="BodyType">The body type of this message.</typeparam>
        </member>
        <member name="M:SteamKit2.ClientMsg`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.ClientMsg`1"/> class.
            This is a client send constructor.
            </summary>
            <param name="payloadReserve">The number of bytes to initialize the payload capacity to.</param>
        </member>
        <member name="M:SteamKit2.ClientMsg`1.#ctor(SteamKit2.MsgBase{SteamKit2.Internal.ExtendedClientMsgHdr},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.ClientMsg`1"/> class.
            This a reply constructor.
            </summary>
            <param name="msg">The message that this instance is a reply for.</param>
            <param name="payloadReserve">The number of bytes to initialize the payload capacity to.</param>
        </member>
        <member name="M:SteamKit2.ClientMsg`1.#ctor(SteamKit2.IPacketMsg)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.ClientMsg`1"/> class.
            This is a recieve constructor.
            </summary>
            <param name="msg">The packet message to build this client message from.</param>
        </member>
        <member name="M:SteamKit2.ClientMsg`1.Serialize">
            <summary>
            Serializes this client message instance to a byte array.
            </summary>
            <returns>
            Data representing a client message.
            </returns>
        </member>
        <member name="M:SteamKit2.ClientMsg`1.Deserialize(System.Byte[])">
            <summary>
            Initializes this client message by deserializing the specified data.
            </summary>
            <param name="data">The data representing a client message.</param>
        </member>
        <member name="P:SteamKit2.ClientMsg`1.IsProto">
            <summary>
            Gets a value indicating whether this client message is protobuf backed.
            </summary>
            <value>
            	<c>true</c> if this instance is protobuf backed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.ClientMsg`1.MsgType">
            <summary>
            Gets the network message type of this client message.
            </summary>
            <value>
            The network message type.
            </value>
        </member>
        <member name="P:SteamKit2.ClientMsg`1.SessionID">
            <summary>
            Gets or sets the session id for this client message.
            </summary>
            <value>
            The session id.
            </value>
        </member>
        <member name="P:SteamKit2.ClientMsg`1.SteamID">
            <summary>
            Gets or sets the <see cref="P:SteamKit2.ClientMsg`1.SteamID"/> for this client message.
            </summary>
            <value>
            The <see cref="P:SteamKit2.ClientMsg`1.SteamID"/>.
            </value>
        </member>
        <member name="P:SteamKit2.ClientMsg`1.TargetJobID">
            <summary>
            Gets or sets the target job id for this client message.
            </summary>
            <value>
            The target job id.
            </value>
        </member>
        <member name="P:SteamKit2.ClientMsg`1.SourceJobID">
            <summary>
            Gets or sets the source job id for this client message.
            </summary>
            <value>
            The source job id.
            </value>
        </member>
        <member name="P:SteamKit2.ClientMsg`1.Body">
            <summary>
            Gets the body structure of this message.
            </summary>
        </member>
        <member name="T:SteamKit2.Msg`1">
            <summary>
            Represents a struct backed message without session or client info.
            </summary>
            <typeparam name="BodyType">The body type of this message.</typeparam>
        </member>
        <member name="M:SteamKit2.Msg`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.Msg`1"/> class.
            This is a client send constructor.
            </summary>
            <param name="payloadReserve">The number of bytes to initialize the payload capacity to.</param>
        </member>
        <member name="M:SteamKit2.Msg`1.#ctor(SteamKit2.MsgBase{SteamKit2.Internal.MsgHdr},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.Msg`1"/> class.
            This a reply constructor.
            </summary>
            <param name="msg">The message that this instance is a reply for.</param>
            <param name="payloadReserve">The number of bytes to initialize the payload capacity to.</param>
        </member>
        <member name="M:SteamKit2.Msg`1.#ctor(SteamKit2.IPacketMsg)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.Msg`1"/> class.
            This is a recieve constructor.
            </summary>
            <param name="msg">The packet message to build this client message from.</param>
        </member>
        <member name="M:SteamKit2.Msg`1.Serialize">
            <summary>
            Serializes this client message instance to a byte array.
            </summary>
            <returns>
            Data representing a client message.
            </returns>
        </member>
        <member name="M:SteamKit2.Msg`1.Deserialize(System.Byte[])">
            <summary>
            Initializes this client message by deserializing the specified data.
            </summary>
            <param name="data">The data representing a client message.</param>
        </member>
        <member name="P:SteamKit2.Msg`1.IsProto">
            <summary>
            Gets a value indicating whether this client message is protobuf backed.
            </summary>
            <value>
            	<c>true</c> if this instance is protobuf backed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.Msg`1.MsgType">
            <summary>
            Gets the network message type of this client message.
            </summary>
            <value>
            The network message type.
            </value>
        </member>
        <member name="P:SteamKit2.Msg`1.SessionID">
            <summary>
            Gets or sets the session id for this client message.
            This type of client message does not support session ids
            </summary>
            <value>
            The session id.
            </value>
        </member>
        <member name="P:SteamKit2.Msg`1.SteamID">
            <summary>
            Gets or sets the <see cref="P:SteamKit2.Msg`1.SteamID"/> for this client message.
            This type of client message goes not support <see cref="P:SteamKit2.Msg`1.SteamID">SteamIDs</see>.
            </summary>
            <value>
            The <see cref="P:SteamKit2.Msg`1.SteamID"/>.
            </value>
        </member>
        <member name="P:SteamKit2.Msg`1.TargetJobID">
            <summary>
            Gets or sets the target job id for this client message.
            </summary>
            <value>
            The target job id.
            </value>
        </member>
        <member name="P:SteamKit2.Msg`1.SourceJobID">
            <summary>
            Gets or sets the source job id for this client message.
            </summary>
            <value>
            The source job id.
            </value>
        </member>
        <member name="P:SteamKit2.Msg`1.Body">
            <summary>
            Gets the structure body of the message.
            </summary>
        </member>
        <member name="T:SteamKit2.GC.IClientGCMsg">
            <summary>
            Represents a unified interface into client messages.
            </summary>
        </member>
        <member name="M:SteamKit2.GC.IClientGCMsg.Serialize">
            <summary>
            Serializes this client message instance to a byte array.
            </summary>
            <returns>Data representing a client message.</returns>
        </member>
        <member name="M:SteamKit2.GC.IClientGCMsg.Deserialize(System.Byte[])">
            <summary>
            Initializes this client message by deserializing the specified data.
            </summary>
            <param name="data">The data representing a client message.</param>
        </member>
        <member name="P:SteamKit2.GC.IClientGCMsg.IsProto">
            <summary>
            Gets a value indicating whether this client message is protobuf backed.
            </summary>
            <value>
              <c>true</c> if this instance is protobuf backed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.GC.IClientGCMsg.MsgType">
            <summary>
            Gets the network message type of this client message.
            </summary>
            <value>
            The message type.
            </value>
        </member>
        <member name="P:SteamKit2.GC.IClientGCMsg.TargetJobID">
            <summary>
            Gets or sets the target job id for this client message.
            </summary>
            <value>
            The target job id.
            </value>
        </member>
        <member name="P:SteamKit2.GC.IClientGCMsg.SourceJobID">
            <summary>
            Gets or sets the source job id for this client message.
            </summary>
            <value>
            The source job id.
            </value>
        </member>
        <member name="T:SteamKit2.GC.GCMsgBase`1">
            <summary>
            This is the abstract base class for all available game coordinator messages.
            It's used to maintain packet payloads and provide a header for all gc messages.
            </summary>
            <typeparam name="HdrType">The header type for this gc message.</typeparam>
        </member>
        <member name="M:SteamKit2.GC.GCMsgBase`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.GC.GCMsgBase`1"/> class.
            </summary>
            <param name="payloadReserve">The number of bytes to initialize the payload capacity to.</param>
        </member>
        <member name="M:SteamKit2.GC.GCMsgBase`1.Serialize">
            <summary>
            Serializes this gc message instance to a byte array.
            </summary>
            <returns>
            Data representing a gc message.
            </returns>
        </member>
        <member name="M:SteamKit2.GC.GCMsgBase`1.Deserialize(System.Byte[])">
            <summary>
            Initializes this gc message by deserializing the specified data.
            </summary>
            <param name="data">The data representing a gc message.</param>
        </member>
        <member name="P:SteamKit2.GC.GCMsgBase`1.IsProto">
            <summary>
            Gets a value indicating whether this gc message is protobuf backed.
            </summary>
            <value>
            	<c>true</c> if this instance is protobuf backed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.GC.GCMsgBase`1.MsgType">
            <summary>
            Gets the network message type of this gc message.
            </summary>
            <value>
            The network message type.
            </value>
        </member>
        <member name="P:SteamKit2.GC.GCMsgBase`1.TargetJobID">
            <summary>
            Gets or sets the target job id for this gc message.
            </summary>
            <value>
            The target job id.
            </value>
        </member>
        <member name="P:SteamKit2.GC.GCMsgBase`1.SourceJobID">
            <summary>
            Gets or sets the source job id for this gc message.
            </summary>
            <value>
            The source job id.
            </value>
        </member>
        <member name="P:SteamKit2.GC.GCMsgBase`1.Header">
            <summary>
            Gets the header for this message type. 
            </summary>
        </member>
        <member name="T:SteamKit2.GC.ClientGCMsgProtobuf`1">
            <summary>
            Represents a protobuf backed game coordinator message.
            </summary>
            <typeparam name="BodyType">The body type of this message.</typeparam>
        </member>
        <member name="M:SteamKit2.GC.ClientGCMsgProtobuf`1.#ctor(System.UInt32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.GC.ClientGCMsgProtobuf`1"/> class.
            This is a client send constructor.
            </summary>
            <param name="eMsg">The network message type this gc message represents.</param>
            <param name="payloadReserve">The number of bytes to initialize the payload capacity to.</param>
        </member>
        <member name="M:SteamKit2.GC.ClientGCMsgProtobuf`1.#ctor(System.UInt32,SteamKit2.GC.GCMsgBase{SteamKit2.Internal.MsgGCHdrProtoBuf},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.GC.ClientGCMsgProtobuf`1"/> class.
            This a reply constructor.
            </summary>
            <param name="eMsg">The network message type this gc message represents.</param>
            <param name="msg">The message that this instance is a reply for.</param>
            <param name="payloadReserve">The number of bytes to initialize the payload capacity to.</param>
        </member>
        <member name="M:SteamKit2.GC.ClientGCMsgProtobuf`1.#ctor(SteamKit2.GC.IPacketGCMsg)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.GC.ClientGCMsgProtobuf`1"/> class.
            This is a recieve constructor.
            </summary>
            <param name="msg">The packet message to build this gc message from.</param>
        </member>
        <member name="M:SteamKit2.GC.ClientGCMsgProtobuf`1.Serialize">
            <summary>
            Serializes this gc message instance to a byte array.
            </summary>
            <returns>
            Data representing a gc message.
            </returns>
        </member>
        <member name="M:SteamKit2.GC.ClientGCMsgProtobuf`1.Deserialize(System.Byte[])">
            <summary>
            Initializes this gc message by deserializing the specified data.
            </summary>
            <param name="data">The data representing a gc message.</param>
        </member>
        <member name="P:SteamKit2.GC.ClientGCMsgProtobuf`1.IsProto">
            <summary>
            Gets a value indicating whether this gc message is protobuf backed.
            Client messages of this type are always protobuf backed.
            </summary>
            <value>
            	<c>true</c> if this instance is protobuf backed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.GC.ClientGCMsgProtobuf`1.MsgType">
            <summary>
            Gets the network message type of this gc message.
            </summary>
            <value>
            The network message type.
            </value>
        </member>
        <member name="P:SteamKit2.GC.ClientGCMsgProtobuf`1.TargetJobID">
            <summary>
            Gets or sets the target job id for this gc message.
            </summary>
            <value>
            The target job id.
            </value>
        </member>
        <member name="P:SteamKit2.GC.ClientGCMsgProtobuf`1.SourceJobID">
            <summary>
            Gets or sets the source job id for this gc message.
            </summary>
            <value>
            The source job id.
            </value>
        </member>
        <member name="P:SteamKit2.GC.ClientGCMsgProtobuf`1.ProtoHeader">
            <summary>
            Shorthand accessor for the protobuf header.
            </summary>
        </member>
        <member name="P:SteamKit2.GC.ClientGCMsgProtobuf`1.Body">
            <summary>
            Gets the body structure of this message.
            </summary>
        </member>
        <member name="T:SteamKit2.GC.ClientGCMsg`1">
            <summary>
            Represents a struct backed game coordinator message.
            </summary>
            <typeparam name="BodyType">The body type of this message.</typeparam>
        </member>
        <member name="M:SteamKit2.GC.ClientGCMsg`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.GC.ClientGCMsg`1"/> class.
            This is a client send constructor.
            </summary>
            <param name="payloadReserve">The number of bytes to initialize the payload capacity to.</param>
        </member>
        <member name="M:SteamKit2.GC.ClientGCMsg`1.#ctor(SteamKit2.GC.GCMsgBase{SteamKit2.Internal.MsgGCHdr},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.GC.ClientGCMsg`1"/> class.
            This a reply constructor.
            </summary>
            <param name="msg">The message that this instance is a reply for.</param>
            <param name="payloadReserve">The number of bytes to initialize the payload capacity to.</param>
        </member>
        <member name="M:SteamKit2.GC.ClientGCMsg`1.#ctor(SteamKit2.GC.IPacketGCMsg)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.GC.ClientGCMsg`1"/> class.
            This is a recieve constructor.
            </summary>
            <param name="msg">The packet message to build this gc message from.</param>
        </member>
        <member name="M:SteamKit2.GC.ClientGCMsg`1.Serialize">
            <summary>
            Serializes this gc message instance to a byte array.
            </summary>
            <returns>
            Data representing a client message.
            </returns>
        </member>
        <member name="M:SteamKit2.GC.ClientGCMsg`1.Deserialize(System.Byte[])">
            <summary>
            Initializes this gc message by deserializing the specified data.
            </summary>
            <param name="data">The data representing a client message.</param>
        </member>
        <member name="P:SteamKit2.GC.ClientGCMsg`1.IsProto">
            <summary>
            Gets a value indicating whether this gc message is protobuf backed.
            </summary>
            <value>
            	<c>true</c> if this instance is protobuf backed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.GC.ClientGCMsg`1.MsgType">
            <summary>
            Gets the network message type of this gc message.
            </summary>
            <value>
            The network message type.
            </value>
        </member>
        <member name="P:SteamKit2.GC.ClientGCMsg`1.TargetJobID">
            <summary>
            Gets or sets the target job id for this gc message.
            </summary>
            <value>
            The target job id.
            </value>
        </member>
        <member name="P:SteamKit2.GC.ClientGCMsg`1.SourceJobID">
            <summary>
            Gets or sets the source job id for this gc message.
            </summary>
            <value>
            The source job id.
            </value>
        </member>
        <member name="P:SteamKit2.GC.ClientGCMsg`1.Body">
            <summary>
            Gets the body structure of this message.
            </summary>
        </member>
        <member name="T:SteamKit2.GC.IPacketGCMsg">
            <summary>
            Represents a simple unified interface into game coordinator messages recieved from the network.
            This is contrasted with <see cref="T:SteamKit2.GC.IClientGCMsg"/> in that this interface is packet body agnostic
            and only allows simple access into the header. This interface is also immutable, and the underlying
            data cannot be modified.
            </summary>
        </member>
        <member name="M:SteamKit2.GC.IPacketGCMsg.GetData">
            <summary>
            Gets the underlying data that represents this client message.
            </summary>
            <returns>The data.</returns>
        </member>
        <member name="P:SteamKit2.GC.IPacketGCMsg.IsProto">
            <summary>
            Gets a value indicating whether this packet message is protobuf backed.
            </summary>
            <value>
              <c>true</c> if this instance is protobuf backed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.GC.IPacketGCMsg.MsgType">
            <summary>
            Gets the network message type of this packet message.
            </summary>
            <value>
            The message type.
            </value>
        </member>
        <member name="P:SteamKit2.GC.IPacketGCMsg.TargetJobID">
            <summary>
            Gets the target job id for this packet message.
            </summary>
            <value>
            The target job id.
            </value>
        </member>
        <member name="P:SteamKit2.GC.IPacketGCMsg.SourceJobID">
            <summary>
            Gets the source job id for this packet message.
            </summary>
            <value>
            The source job id.
            </value>
        </member>
        <member name="T:SteamKit2.GC.PacketClientGCMsgProtobuf">
            <summary>
            Represents a protobuf backed packet message.
            </summary>
        </member>
        <member name="M:SteamKit2.GC.PacketClientGCMsgProtobuf.#ctor(System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.GC.PacketClientGCMsgProtobuf"/> class.
            </summary>
            <param name="eMsg">The network message type for this packet message.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:SteamKit2.GC.PacketClientGCMsgProtobuf.GetData">
            <summary>
            Gets the underlying data that represents this client message.
            </summary>
            <returns>The data.</returns>
        </member>
        <member name="P:SteamKit2.GC.PacketClientGCMsgProtobuf.IsProto">
            <summary>
            Gets a value indicating whether this packet message is protobuf backed.
            This type of message is always protobuf backed.
            </summary>
            <value>
            	<c>true</c> if this instance is protobuf backed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.GC.PacketClientGCMsgProtobuf.MsgType">
            <summary>
            Gets the network message type of this packet message.
            </summary>
            <value>
            The message type.
            </value>
        </member>
        <member name="P:SteamKit2.GC.PacketClientGCMsgProtobuf.TargetJobID">
            <summary>
            Gets the target job id for this packet message.
            </summary>
            <value>
            The target job id.
            </value>
        </member>
        <member name="P:SteamKit2.GC.PacketClientGCMsgProtobuf.SourceJobID">
            <summary>
            Gets the source job id for this packet message.
            </summary>
            <value>
            The source job id.
            </value>
        </member>
        <member name="T:SteamKit2.GC.PacketClientGCMsg">
            <summary>
            Represents a packet message with extended header information.
            </summary>
        </member>
        <member name="M:SteamKit2.GC.PacketClientGCMsg.#ctor(System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.GC.PacketClientGCMsg"/> class.
            </summary>
            <param name="eMsg">The network message type for this packet message.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:SteamKit2.GC.PacketClientGCMsg.GetData">
            <summary>
            Gets the underlying data that represents this packet message.
            </summary>
            <returns>The data.</returns>
        </member>
        <member name="P:SteamKit2.GC.PacketClientGCMsg.IsProto">
            <summary>
            Gets a value indicating whether this packet message is protobuf backed.
            This type of message is never protobuf backed.
            </summary>
            <value>
            	<c>true</c> if this instance is protobuf backed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.GC.PacketClientGCMsg.MsgType">
            <summary>
            Gets the network message type of this packet message.
            </summary>
            <value>
            The message type.
            </value>
        </member>
        <member name="P:SteamKit2.GC.PacketClientGCMsg.TargetJobID">
            <summary>
            Gets the target job id for this packet message.
            </summary>
            <value>
            The target job id.
            </value>
        </member>
        <member name="P:SteamKit2.GC.PacketClientGCMsg.SourceJobID">
            <summary>
            Gets the source job id for this packet message.
            </summary>
            <value>
            The source job id.
            </value>
        </member>
        <member name="T:SteamKit2.IPacketMsg">
            <summary>
            Represents a simple unified interface into client messages recieved from the network.
            This is contrasted with <see cref="T:SteamKit2.IClientMsg"/> in that this interface is packet body agnostic
            and only allows simple access into the header. This interface is also immutable, and the underlying
            data cannot be modified.
            </summary>
        </member>
        <member name="M:SteamKit2.IPacketMsg.GetData">
            <summary>
            Gets the underlying data that represents this client message.
            </summary>
            <returns>The data.</returns>
        </member>
        <member name="P:SteamKit2.IPacketMsg.IsProto">
            <summary>
            Gets a value indicating whether this packet message is protobuf backed.
            </summary>
            <value>
              <c>true</c> if this instance is protobuf backed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.IPacketMsg.MsgType">
            <summary>
            Gets the network message type of this packet message.
            </summary>
            <value>
            The message type.
            </value>
        </member>
        <member name="P:SteamKit2.IPacketMsg.TargetJobID">
            <summary>
            Gets the target job id for this packet message.
            </summary>
            <value>
            The target job id.
            </value>
        </member>
        <member name="P:SteamKit2.IPacketMsg.SourceJobID">
            <summary>
            Gets the source job id for this packet message.
            </summary>
            <value>
            The source job id.
            </value>
        </member>
        <member name="T:SteamKit2.PacketClientMsgProtobuf">
            <summary>
            Represents a protobuf backed packet message.
            </summary>
        </member>
        <member name="M:SteamKit2.PacketClientMsgProtobuf.#ctor(SteamKit2.EMsg,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.PacketClientMsgProtobuf"/> class.
            </summary>
            <param name="eMsg">The network message type for this packet message.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:SteamKit2.PacketClientMsgProtobuf.GetData">
            <summary>
            Gets the underlying data that represents this client message.
            </summary>
            <returns>The data.</returns>
        </member>
        <member name="P:SteamKit2.PacketClientMsgProtobuf.IsProto">
            <summary>
            Gets a value indicating whether this packet message is protobuf backed.
            This type of message is always protobuf backed.
            </summary>
            <value>
            	<c>true</c> if this instance is protobuf backed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.PacketClientMsgProtobuf.MsgType">
            <summary>
            Gets the network message type of this packet message.
            </summary>
            <value>
            The message type.
            </value>
        </member>
        <member name="P:SteamKit2.PacketClientMsgProtobuf.TargetJobID">
            <summary>
            Gets the target job id for this packet message.
            </summary>
            <value>
            The target job id.
            </value>
        </member>
        <member name="P:SteamKit2.PacketClientMsgProtobuf.SourceJobID">
            <summary>
            Gets the source job id for this packet message.
            </summary>
            <value>
            The source job id.
            </value>
        </member>
        <member name="T:SteamKit2.PacketClientMsg">
            <summary>
            Represents a packet message with extended header information.
            </summary>
        </member>
        <member name="M:SteamKit2.PacketClientMsg.#ctor(SteamKit2.EMsg,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.PacketClientMsg"/> class.
            </summary>
            <param name="eMsg">The network message type for this packet message.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:SteamKit2.PacketClientMsg.GetData">
            <summary>
            Gets the underlying data that represents this client message.
            </summary>
            <returns>The data.</returns>
        </member>
        <member name="P:SteamKit2.PacketClientMsg.IsProto">
            <summary>
            Gets a value indicating whether this packet message is protobuf backed.
            This type of message is never protobuf backed.
            </summary>
            <value>
            	<c>true</c> if this instance is protobuf backed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.PacketClientMsg.MsgType">
            <summary>
            Gets the network message type of this packet message.
            </summary>
            <value>
            The message type.
            </value>
        </member>
        <member name="P:SteamKit2.PacketClientMsg.TargetJobID">
            <summary>
            Gets the target job id for this packet message.
            </summary>
            <value>
            The target job id.
            </value>
        </member>
        <member name="P:SteamKit2.PacketClientMsg.SourceJobID">
            <summary>
            Gets the source job id for this packet message.
            </summary>
            <value>
            The source job id.
            </value>
        </member>
        <member name="T:SteamKit2.PacketMsg">
            <summary>
            Represents a packet message with basic header information.
            </summary>
        </member>
        <member name="M:SteamKit2.PacketMsg.#ctor(SteamKit2.EMsg,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.PacketMsg"/> class.
            </summary>
            <param name="eMsg">The network message type for this packet message.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:SteamKit2.PacketMsg.GetData">
            <summary>
            Gets the underlying data that represents this client message.
            </summary>
            <returns>The data.</returns>
        </member>
        <member name="P:SteamKit2.PacketMsg.IsProto">
            <summary>
            Gets a value indicating whether this packet message is protobuf backed.
            This type of message is never protobuf backed.
            </summary>
            <value>
            	<c>true</c> if this instance is protobuf backed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.PacketMsg.MsgType">
            <summary>
            Gets the network message type of this packet message.
            </summary>
            <value>
            The message type.
            </value>
        </member>
        <member name="P:SteamKit2.PacketMsg.TargetJobID">
            <summary>
            Gets the target job id for this packet message.
            </summary>
            <value>
            The target job id.
            </value>
        </member>
        <member name="P:SteamKit2.PacketMsg.SourceJobID">
            <summary>
            Gets the source job id for this packet message.
            </summary>
            <value>
            The source job id.
            </value>
        </member>
        <member name="T:SteamKit2.Blob.BlobFieldAttribute">
            <summary>
            Attribute that holds the key for a Blob field
            </summary>
        </member>
        <member name="M:SteamKit2.Blob.BlobFieldAttribute.#ctor(System.String)">
            <summary>
            Constructs a field key with a string
            </summary>
            <param name="key">Key string</param>
        </member>
        <member name="M:SteamKit2.Blob.BlobFieldAttribute.#ctor(System.Int32)">
            <summary>
            Constructs a field key with an integer
            </summary>
            <param name="key">Integer key</param>
        </member>
        <member name="P:SteamKit2.Blob.BlobFieldAttribute.ByteKey">
            <summary>
            Byte Key represented by this field
            </summary>
        </member>
        <member name="P:SteamKit2.Blob.BlobFieldAttribute.PeekIntKey">
            <summary>
            Peekable int key for this field
            </summary>
        </member>
        <member name="T:SteamKit2.Blob.BlobReader">
            <summary>
            BlobReader that sequentially reads a blob
            </summary>
        </member>
        <member name="M:SteamKit2.Blob.BlobReader.CreateFrom(System.String)">
            <summary>
            Create a new BlobReader from a file path
            </summary>
            <param name="fileName">Path to blob</param>
            <returns></returns>
        </member>
        <member name="M:SteamKit2.Blob.BlobReader.CreateFrom(System.IO.Stream)">
            <summary>
            Create a BlobReader from a Stream. Does not take ownership of the Stream.
            </summary>
            <param name="inputSteam">Source</param>
            <returns></returns>
        </member>
        <member name="M:SteamKit2.Blob.BlobReader.Dispose">
            <summary>
            Dispose the BlobReader, releasing any Streams allocated.
            </summary>
        </member>
        <member name="M:SteamKit2.Blob.BlobReader.ReadFieldHeader">
            <summary>
            Read the next Field in the blob
            </summary>
        </member>
        <member name="M:SteamKit2.Blob.BlobReader.ReadFieldBlob">
            <summary>
            Reads a field as a Blob
            </summary>
            <returns>Blob Reader</returns>
        </member>
        <member name="M:SteamKit2.Blob.BlobReader.SkipField">
            <summary>
            Skip over a field, discarding the contents of a field
            </summary>
        </member>
        <member name="M:SteamKit2.Blob.BlobReader.SkipSpare">
            <summary>
            Skip over the spare, discarding the contents
            </summary>
        </member>
        <member name="P:SteamKit2.Blob.BlobReader.CacheState">
            <summary>
            Cache state of the blob being read
            </summary>
        </member>
        <member name="P:SteamKit2.Blob.BlobReader.ProcessCode">
            <summary>
            Process code of the blob being read
            </summary>
        </member>
        <member name="P:SteamKit2.Blob.BlobReader.BytesAvailable">
            <summary>
            Current bytes available to be read
            </summary>
        </member>
        <member name="P:SteamKit2.Blob.BlobReader.SpareAvailable">
            <summary>
            Current spare bytes available to be read
            </summary>
        </member>
        <member name="P:SteamKit2.Blob.BlobReader.FieldKeyBytes">
            <summary>
            Size of the Field Key currently being processed
            </summary>
        </member>
        <member name="P:SteamKit2.Blob.BlobReader.FieldDataBytes">
            <summary>
            Size of the Field Data currently being processed
            </summary>
        </member>
        <member name="P:SteamKit2.Blob.BlobReader.ByteKey">
            <summary>
            Byte buffer of the Field Key
            </summary>
        </member>
        <member name="P:SteamKit2.Blob.BlobReader.PeekIntKey">
            <summary>
            Peekable int of the Field Key
            </summary>
        </member>
        <member name="T:SteamKit2.Blob.BlobReader.InvalidBlobException">
            <summary>
            Exception for a Blob that cannot be parsed
            </summary>
        </member>
        <member name="T:SteamKit2.Blob.EAutoPreprocessCode">
            <summary>
            Gets the preprocess code of the blob.
            </summary>
        </member>
        <member name="F:SteamKit2.Blob.EAutoPreprocessCode.eAutoPreprocessCodePlaintext">
            <summary>
            The blob data was not preprocessed.
            </summary>
        </member>
        <member name="F:SteamKit2.Blob.EAutoPreprocessCode.eAutoPreprocessCodeCompressed">
            <summary>
            The blob data was compressed.
            </summary>
        </member>
        <member name="F:SteamKit2.Blob.EAutoPreprocessCode.eAutoPreprocessCodeEncrypted">
            <summary>
            The blob data was encrypted.
            </summary>
        </member>
        <member name="T:SteamKit2.Blob.ECacheState">
            <summary>
            Gets the cache state of the blob.
            </summary>
        </member>
        <member name="F:SteamKit2.Blob.ECacheState.eCacheEmpty">
            <summary>
            The cache is empty.
            </summary>
        </member>
        <member name="F:SteamKit2.Blob.ECacheState.eCachedMallocedPreprocessedVersion">
            <summary>
            The cache is a preprocessed version.
            </summary>
        </member>
        <member name="F:SteamKit2.Blob.ECacheState.eCachedMallocedPlaintextVersion">
            <summary>
            The cache is a plaintext version.
            </summary>
        </member>
        <member name="F:SteamKit2.Blob.ECacheState.eCachePtrIsCopyOnWritePreprocessedVersion">
            <summary>
            The cache is a preprocessed version.
            </summary>
        </member>
        <member name="F:SteamKit2.Blob.ECacheState.eCachePtrIsCopyOnWritePlaintextVersion">
            <summary>
            The cache is a plaintext version.
            </summary>
        </member>
        <member name="T:SteamKit2.Blob.BlobUnhandledTypeException">
            <summary>
            Exception class for a type that can't be parsed
            </summary>
        </member>
        <member name="T:SteamKit2.Blob.BlobTypedReader">
            <summary>
            Blob reader that builds a type model
            </summary>
        </member>
        <member name="M:SteamKit2.Blob.BlobTypedReader.DeserializeSlow(SteamKit2.Blob.BlobReader,System.Type)">
            <summary>
            Deserialize a blob into a type. Does not JIT
            </summary>
            <param name="reader">Blob reader</param>
            <param name="type">Target type</param>
            <returns>Type model</returns>
        </member>
        <member name="M:SteamKit2.Blob.BlobTypedReader.Deserialize(SteamKit2.Blob.BlobReader,System.Type)">
            <summary>
            Deserialize a blob into a type
            </summary>
            <param name="reader">Blob reader</param>
            <param name="type">Target type</param>
            <returns>Type model</returns>
        </member>
        <member name="T:SteamKit2.CDNClient">
            <summary>
            Represents a client able to connect to the Steam3 CDN and download games on the new content system.
            </summary>
        </member>
        <member name="M:SteamKit2.CDNClient.#ctor(SteamKit2.CDNClient.ClientEndPoint,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.CDNClient"/> class.
            </summary>
            <param name="cdnServer">The CDN server to connect to.</param>
            <param name="appticket">The appticket of the app this instance is for.</param>
        </member>
        <member name="M:SteamKit2.CDNClient.#ctor(SteamKit2.CDNClient.ClientEndPoint,System.UInt32,SteamKit2.SteamID)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.CDNClient"/> class without an application ticket.
            </summary>
            <param name="cdnServer">The CDN server to connect to.</param>
            <param name="steamID">The SteamID of the current user.</param>
            <param name="depotID">Depot ID being requested.</param>
        </member>
        <member name="M:SteamKit2.CDNClient.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:SteamKit2.CDNClient"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:SteamKit2.CDNClient.PointTo(SteamKit2.CDNClient.ClientEndPoint)">
            <summary>
            Points this <see cref="T:SteamKit2.CDNClient"/> instance to another server.
            </summary>
            <param name="ep">The endpoint.</param>
        </member>
        <member name="M:SteamKit2.CDNClient.Connect">
            <summary>
            Connects this instance to the server.
            </summary>
            <returns><c>true</c> if the connection was a success; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SteamKit2.CDNClient.DownloadDepotManifest(System.Int32,System.UInt64)">
            <summary>
            Downloads the depot manifest for the given depot and manifest.
            </summary>
            <param name="depotid">The depotid.</param>
            <param name="manifestid">The manifestid.</param>
            <returns>A <see cref="T:SteamKit2.DepotManifest"/> instance on success; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:SteamKit2.CDNClient.DownloadDepotChunk(System.Int32,System.String)">
            <summary>
            Downloads the specified depot chunk from the content server.
            </summary>
            <param name="depotid">The DepotID of the chunk to download.</param>
            <param name="chunkid">The the ID of the chunk to download.</param>
            <returns></returns>
        </member>
        <member name="M:SteamKit2.CDNClient.ProcessChunk(System.Byte[],System.Byte[])">
            <summary>
            Processes a chunk by decrypting and decompressing it.
            </summary>
            <param name="chunk">The chunk to process.</param>
            <param name="depotkey">The AES encryption key to use when decrypting the chunk.</param>
            <returns>The processed chunk.</returns>
        </member>
        <member name="M:SteamKit2.CDNClient.FetchServerList(SteamKit2.CDNClient.ClientEndPoint,System.Int32)">
            <summary>
            Fetches a server list from the given content server for the provided CellID.
            </summary>
            <param name="csServer">The server to request a server list from.</param>
            <param name="cellID">The CellID.</param>
            <returns>A list of content servers.</returns>
        </member>
        <member name="T:SteamKit2.CDNClient.ClientEndPoint">
            <summary>
            Represents the endpoint of a Steam3 content server.
            </summary>
        </member>
        <member name="M:SteamKit2.CDNClient.ClientEndPoint.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.CDNClient.ClientEndPoint"/> class.
            </summary>
            <param name="host">The server host.</param>
            <param name="port">The server port.</param>
            <param name="type">The server type.</param>
        </member>
        <member name="P:SteamKit2.CDNClient.ClientEndPoint.Host">
            <summary>
            Gets the server host.
            </summary>
        </member>
        <member name="P:SteamKit2.CDNClient.ClientEndPoint.Port">
            <summary>
            Gets the server port.
            </summary>
        </member>
        <member name="P:SteamKit2.CDNClient.ClientEndPoint.Type">
            <summary>
            Gets the server type.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamCloud">
            <summary>
            This handler is used for interacting with remote storage and user generated content.
            </summary>
        </member>
        <member name="T:SteamKit2.ClientMsgHandler">
            <summary>
            This class implements the base requirements every message handler should inherit from.
            </summary>
        </member>
        <member name="M:SteamKit2.ClientMsgHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.ClientMsgHandler"/> class.
            </summary>
        </member>
        <member name="M:SteamKit2.ClientMsgHandler.HandleMsg(SteamKit2.IPacketMsg)">
            <summary>
            Handles a client message. This should not be called directly.
            </summary>
            <param name="packetMsg">The packet message that contains the data.</param>
        </member>
        <member name="P:SteamKit2.ClientMsgHandler.Client">
            <summary>
            Gets the underlying <see cref="T:SteamKit2.SteamClient"/> for use in sending replies.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamCloud.RequestUGCDetails(SteamKit2.UGCHandle)">
            <summary>
            Requests details for a specific item of user generated content from the Steam servers.
            Results are returned in a <see cref="T:SteamKit2.SteamCloud.UGCDetailsCallback"/> from a <see cref="T:SteamKit2.SteamClient.JobCallback`1"/>.
            </summary>
            <param name="ugcId">The unique user generated content id.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamClient.JobCallback`1"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamCloud.HandleMsg(SteamKit2.IPacketMsg)">
            <summary>
            Handles a client message. This should not be called directly.
            </summary>
            <param name="packetMsg">The packet message that contains the data.</param>
        </member>
        <member name="T:SteamKit2.SteamCloud.UGCDetailsCallback">
            <summary>
            This callback is recieved in response to calling <see cref="M:SteamKit2.SteamCloud.RequestUGCDetails(SteamKit2.UGCHandle)"/>.
            </summary>
        </member>
        <member name="T:SteamKit2.CallbackMsg">
            <summary>
            Represents the base object all callbacks are based off.
            </summary>
        </member>
        <member name="M:SteamKit2.CallbackMsg.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.CallbackMsg"/> class.
            </summary>
        </member>
        <member name="M:SteamKit2.CallbackMsg.IsType``1">
            <summary>
            Determines whether this callback is a certain type.
            </summary>
            <typeparam name="T">The type to check against.</typeparam>
            <returns>
            	<c>true</c> if this callback is the type specified; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SteamKit2.CallbackMsg.Handle``1(System.Action{``0})">
            <summary>
            Invokes the specified handler delegate if the callback matches the type parameter.
            </summary>
            <typeparam name="T">The type to check against.</typeparam>
            <param name="handler">The handler to invoke.</param>
            <exception cref="T:System.ArgumentNullException">
            <c>handler</c> is null.
            </exception>
        </member>
        <member name="P:SteamKit2.SteamCloud.UGCDetailsCallback.Result">
            <summary>
            Gets the result of the request.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamCloud.UGCDetailsCallback.AppID">
            <summary>
            Gets the App ID the UGC is for.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamCloud.UGCDetailsCallback.Creator">
            <summary>
            Gets the SteamID of the UGC's creator.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamCloud.UGCDetailsCallback.URL">
            <summary>
            Gets the URL that the content is located at.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamCloud.UGCDetailsCallback.FileName">
            <summary>
            Gets the name of the file.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamCloud.UGCDetailsCallback.FileSize">
            <summary>
            Gets the size of the file.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamGameServer">
            <summary>
            This handler is used for interacting with the Steam network as a game server.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamGameServer.LogOn(SteamKit2.SteamGameServer.LogOnDetails)">
            <summary>
            Logs onto the Steam network as a persistent game server.
            The client should already have been connected at this point.
            Results are return in a <see cref="T:SteamKit2.SteamUser.LoggedOnCallback"/>.
            </summary>
            <param name="details">The details to use for logging on.</param>
            <exception cref="T:System.ArgumentNullException">No logon details were provided.</exception>
            <exception cref="T:System.ArgumentException">Username or password are not set within <paramref name="details"/>.</exception>
        </member>
        <member name="M:SteamKit2.SteamGameServer.LogOnAnonymous(System.UInt32)">
            <summary>
            Logs the client into the Steam3 network as an anonymous game server.
            The client should already have been connected at this point.
            Results are returned in a <see cref="T:SteamKit2.SteamUser.LoggedOnCallback"/>.
            </summary>
            <param name="appId">The AppID served by this game server, or 0 for the default.</param>
        </member>
        <member name="M:SteamKit2.SteamGameServer.LogOff">
            <summary>
            Logs the game server off of the Steam3 network.
            This method does not disconnect the client.
            Results are returned in a <see cref="T:SteamKit2.SteamUser.LoggedOffCallback"/>.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamGameServer.HandleMsg(SteamKit2.IPacketMsg)">
            <summary>
            Handles a client message. This should not be called directly.
            </summary>
            <param name="packetMsg">The packet message that contains the data.</param>
        </member>
        <member name="T:SteamKit2.SteamGameServer.StatusReplyCallback">
            <summary>
            This callback is fired when the game server receives a status reply.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamGameServer.StatusReplyCallback.IsSecure">
            <summary>
            Gets a value indicating whether this game server is VAC secure.
            </summary>
            <value>
            	<c>true</c> if this server is VAC secure; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SteamKit2.SteamGameServer.TicketAuthCallback">
            <summary>
            This callback is fired when ticket authentication has completed.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamGameServer.TicketAuthCallback.SteamID">
            <summary>
            Gets the SteamID the ticket auth completed for.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamGameServer.TicketAuthCallback.GameID">
            <summary>
            Gets the GameID the ticket was for.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamGameServer.TicketAuthCallback.State">
            <summary>
            Gets the authentication state.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamGameServer.TicketAuthCallback.AuthSessionResponse">
            <summary>
            Gets the auth session response.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamGameServer.TicketAuthCallback.TicketCRC">
            <summary>
            Gets the ticket CRC.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamGameServer.TicketAuthCallback.TicketSequence">
            <summary>
            Gets the ticket sequence.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamGameServer.LogOnDetails">
            <summary>
            Represents the details required to log into Steam3 as a game server.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamGameServer.LogOnDetails.Username">
            <summary>
            Gets or sets the username.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamGameServer.LogOnDetails.Password">
            <summary>
            Gets or sets the password.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamGameServer.LogOnDetails.AppID">
            <summary>
            Gets or sets the AppID this gameserver will serve.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamGameCoordinator">
            <summary>
            This handler handles all game coordinator messaging.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamGameCoordinator.Send(SteamKit2.GC.IClientGCMsg,System.UInt32)">
            <summary>
            Sends a game coordinator message for a specific appid.
            </summary>
            <param name="msg">The GC message to send.</param>
            <param name="appId">The app id of the game coordinator to send to.</param>
        </member>
        <member name="M:SteamKit2.SteamGameCoordinator.Send(System.Byte[],System.UInt32)">
            <summary>
            Sends a game coordinator message for a specific appid.
            </summary>
            <param name="data">The data to send. This should be a serialized GC message.</param>
            <param name="appId">The app id of the game coordinator to send to.</param>
        </member>
        <member name="M:SteamKit2.SteamGameCoordinator.HandleMsg(SteamKit2.IPacketMsg)">
            <summary>
            Handles a client message. This should not be called directly.
            </summary>
            <param name="packetMsg">The packet message that contains the data.</param>
        </member>
        <member name="T:SteamKit2.SteamGameCoordinator.MessageCallback">
            <summary>
            This callback is fired when a game coordinator message is recieved from the network.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamGameCoordinator.MessageCallback.EMsg">
            <summary>
            Gets the game coordinator message type.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamGameCoordinator.MessageCallback.AppID">
            <summary>
            Gets the AppID of the game coordinator the message is from.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamGameCoordinator.MessageCallback.IsProto">
            <summary>
            Gets a value indicating whether this message is protobuf'd.
            </summary>
            <value>
              <c>true</c> if this instance is protobuf'd; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.SteamGameCoordinator.MessageCallback.Message">
            <summary>
            Gets the actual message.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamGameCoordinator.MessageCallback.Payload">
            <summary>
            Gets the raw message.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamMasterServer">
            <summary>
            This handler is used for requesting server list details from Steam.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamMasterServer.ServerQuery(SteamKit2.SteamMasterServer.QueryDetails)">
            <summary>
            Requests a list of servers from the Steam game master server.
            Results are returned in a <see cref="T:SteamKit2.SteamMasterServer.QueryCallback"/> from a <see cref="T:SteamKit2.SteamClient.JobCallback`1"/>.
            </summary>
            <param name="details">The details for the request.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamClient.JobCallback`1"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamMasterServer.HandleMsg(SteamKit2.IPacketMsg)">
            <summary>
            Handles a client message. This should not be called directly.
            </summary>
            <param name="packetMsg">The packet message that contains the data.</param>
        </member>
        <member name="T:SteamKit2.SteamMasterServer.QueryCallback">
            <summary>
            This callback is received in response to calling <see cref="M:SteamKit2.SteamMasterServer.ServerQuery(SteamKit2.SteamMasterServer.QueryDetails)"/>.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamMasterServer.QueryCallback.Servers">
            <summary>
            Gets the list of servers.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamMasterServer.QueryCallback.Server">
            <summary>
            Represents a single server.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamMasterServer.QueryCallback.Server.EndPoint">
            <summary>
            Gets the IP endpoint of the server.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamMasterServer.QueryCallback.Server.AuthedPlayers">
            <summary>
            Gets the number of Steam authenticated players on this server.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamMasterServer.QueryDetails">
            <summary>
            Details used when performing a server list query.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamMasterServer.QueryDetails.AppID">
            <summary>
            Gets or sets the AppID used when querying servers.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamMasterServer.QueryDetails.Filter">
            <summary>
            Gets or sets the filter used for querying the master server.
            Check https://developer.valvesoftware.com/wiki/Master_Server_Query_Protocol for details on how the filter is structured.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamMasterServer.QueryDetails.Region">
            <summary>
            Gets or sets the region that servers will be returned from.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamMasterServer.QueryDetails.GeoLocatedIP">
            <summary>
            Gets or sets the IP address that will be GeoIP located.
            This is done to return servers closer to this location.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamMasterServer.QueryDetails.MaxServers">
            <summary>
            Gets or sets the maximum number of servers to return.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamTrading">
            <summary>
            This handler is used for initializing Steam trades with other clients.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamTrading.Trade(SteamKit2.SteamID)">
            <summary>
            Proposes a trade to another client.
            </summary>
            <param name="user">The client to trade.</param>
        </member>
        <member name="M:SteamKit2.SteamTrading.RespondToTrade(System.UInt32,System.Boolean)">
            <summary>
            Responds to a trade proposal.
            </summary>
            <param name="tradeId">The trade id of the received proposal.</param>
            <param name="acceptTrade">if set to <c>true</c>, the trade will be accepted.</param>
        </member>
        <member name="M:SteamKit2.SteamTrading.CancelTrade(SteamKit2.SteamID)">
            <summary>
            Cancels an already sent trade proposal.
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="M:SteamKit2.SteamTrading.HandleMsg(SteamKit2.IPacketMsg)">
            <summary>
            Handles a client message. This should not be called directly.
            </summary>
            <param name="packetMsg">The packet message that contains the data.</param>
        </member>
        <member name="T:SteamKit2.SteamTrading.TradeProposedCallback">
            <summary>
            This callback is fired when this client receives a trade proposal.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamTrading.TradeProposedCallback.TradeID">
            <summary>
            Gets the Trade ID of his proposal, used for replying.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamTrading.TradeProposedCallback.OtherClient">
            <summary>
            Gets the SteamID of the client that sent the proposal.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamTrading.TradeProposedCallback.OtherName">
            <summary>
            Gets the persona name of the client that sent the proposal.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamTrading.TradeResultCallback">
            <summary>
            This callback is fired when this client receives the response from a trade proposal.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamTrading.TradeResultCallback.TradeID">
            <summary>
            Gets the Trade ID that this result is for.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamTrading.TradeResultCallback.Response">
            <summary>
            Gets the response of the trade proposal.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamTrading.TradeResultCallback.OtherClient">
            <summary>
            Gets the SteamID of the client that responded to the proposal.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamTrading.SessionStartCallback">
            <summary>
            This callback is fired when a trading session has started.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamTrading.SessionStartCallback.OtherClient">
            <summary>
            Gets the SteamID of the client that this the trading session has started with.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamWorkshop">
            <summary>
            This handler is used for requesting files published on the Steam Workshop.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamWorkshop.RequestPublishedFileDetails(SteamKit2.PublishedFileID)">
            <summary>
            Requests details for a given published workshop file.
            Results are returned in a <see cref="T:SteamKit2.SteamWorkshop.PublishedFileDetailsCallback"/> from a <see cref="T:SteamKit2.SteamClient.JobCallback`1"/>.
            </summary>
            <param name="publishedFileId">The file ID being requested.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamClient.JobCallback`1"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamWorkshop.EnumerateUserPublishedFiles(SteamKit2.SteamWorkshop.EnumerationUserDetails)">
            <summary>
            Enumerates the list of published files for the current logged in user.
            Results are returned in a <see cref="T:SteamKit2.SteamWorkshop.UserPublishedFilesCallback"/> from a <see cref="T:SteamKit2.SteamClient.JobCallback`1"/>.
            </summary>
            <param name="details">The specific details of the request.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamClient.JobCallback`1"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamWorkshop.EnumerateUserSubscribedFiles(SteamKit2.SteamWorkshop.EnumerationUserDetails)">
            <summary>
            Enumerates the list of subscribed files for the current logged in user.
            Results are returned in a <see cref="T:SteamKit2.SteamWorkshop.UserSubscribedFilesCallback"/> from a <see cref="T:SteamKit2.SteamClient.JobCallback`1"/>.
            </summary>
            <param name="details">The specific details of the request.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamClient.JobCallback`1"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamWorkshop.EnumeratePublishedFilesByUserAction(SteamKit2.SteamWorkshop.EnumerationUserDetails)">
            <summary>
            Enumerates the list of published files for the current logged in user based on user action.
            Results are returned in a <see cref="T:SteamKit2.SteamWorkshop.UserActionPublishedFilesCallback"/> from a <see cref="T:SteamKit2.SteamClient.JobCallback`1"/>.
            </summary>
            <param name="details">The specific details of the request.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamClient.JobCallback`1"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamWorkshop.EnumeratePublishedFiles(SteamKit2.SteamWorkshop.EnumerationDetails)">
            <summary>
            Enumerates the list of all published files on the Steam workshop.
            Results are returned in a <see cref="T:SteamKit2.SteamWorkshop.PublishedFilesCallback"/> from a <see cref="T:SteamKit2.SteamClient.JobCallback`1"/>.
            </summary>
            <param name="details">The specific details of the request.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamClient.JobCallback`1"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamWorkshop.HandleMsg(SteamKit2.IPacketMsg)">
            <summary>
            Handles a client message. This should not be called directly.
            </summary>
            <param name="packetMsg">The packet message that contains the data.</param>
        </member>
        <member name="T:SteamKit2.SteamWorkshop.PublishedFileDetailsCallback">
            <summary>
            This callback is received in response to calling <see cref="M:SteamKit2.SteamWorkshop.RequestPublishedFileDetails(SteamKit2.PublishedFileID)"/>.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.PublishedFileDetailsCallback.Result">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.PublishedFileDetailsCallback.FileID">
            <summary>
            Gets the file ID.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.PublishedFileDetailsCallback.Creator">
            <summary>
            Gets the SteamID of the creator of this file.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.PublishedFileDetailsCallback.CreatorAppID">
            <summary>
            Gets the AppID used during creation.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.PublishedFileDetailsCallback.ConsumerAppID">
            <summary>
            Gets the AppID used during consumption.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.PublishedFileDetailsCallback.FileUGC">
            <summary>
            Gets the handle for the UGC file this published file represents.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.PublishedFileDetailsCallback.PreviewFileUGC">
            <summary>
            Gets the handle for the UGC preview file this published file represents, normally an image or thumbnail.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.PublishedFileDetailsCallback.Title">
            <summary>
            Gets the title.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.PublishedFileDetailsCallback.Description">
            <summary>
            Gets the description.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.PublishedFileDetailsCallback.CreationTime">
            <summary>
            Gets the creation time.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.PublishedFileDetailsCallback.UpdateTime">
            <summary>
            Gets the last update time.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.PublishedFileDetailsCallback.Visiblity">
            <summary>
            Gets the visiblity of this file.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.PublishedFileDetailsCallback.IsBanned">
            <summary>
            Gets a value indicating whether this instance is banned.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.PublishedFileDetailsCallback.Tags">
            <summary>
            Gets the tags associated with this file.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.PublishedFileDetailsCallback.FileName">
            <summary>
            Gets the name of the file.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.PublishedFileDetailsCallback.FileSize">
            <summary>
            Gets the size of the file.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.PublishedFileDetailsCallback.PreviewFileSize">
            <summary>
            Gets the size of the preview file.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.PublishedFileDetailsCallback.URL">
            <summary>
            Gets the URL.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamWorkshop.PublishedFilesCallback">
            <summary>
            This callback is received in response to calling <see cref="M:SteamKit2.SteamWorkshop.EnumeratePublishedFiles(SteamKit2.SteamWorkshop.EnumerationDetails)"/>.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.PublishedFilesCallback.Result">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.PublishedFilesCallback.Files">
            <summary>
            Gets the list of enumerated files.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.PublishedFilesCallback.TotalResults">
            <summary>
            Gets the count of total results.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamWorkshop.PublishedFilesCallback.File">
            <summary>
            Represents the details of a single published file.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.PublishedFilesCallback.File.FileID">
            <summary>
            Gets the file ID.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.PublishedFilesCallback.File.Reports">
            <summary>
            Gets the number of reports for this file.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.PublishedFilesCallback.File.Score">
            <summary>
            Gets the score of this file, based on up and down votes.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.PublishedFilesCallback.File.UpVotes">
            <summary>
            Gets the total count of up votes.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.PublishedFilesCallback.File.DownVotes">
            <summary>
            Gets the total count of down votes.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamWorkshop.UserPublishedFilesCallback">
            <summary>
            This callback is received in response to calling <see cref="M:SteamKit2.SteamWorkshop.EnumerateUserPublishedFiles(SteamKit2.SteamWorkshop.EnumerationUserDetails)"/>.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.UserPublishedFilesCallback.Result">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.UserPublishedFilesCallback.Files">
            <summary>
            Gets the list of enumerated files.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.UserPublishedFilesCallback.TotalResults">
            <summary>
            Gets the count of total results.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamWorkshop.UserPublishedFilesCallback.File">
            <summary>
            Represents the details of a single published file.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.UserPublishedFilesCallback.File.FileID">
            <summary>
            Gets the file ID.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamWorkshop.UserSubscribedFilesCallback">
            <summary>
            This callback is received in response to calling <see cref="M:SteamKit2.SteamWorkshop.EnumerateUserPublishedFiles(SteamKit2.SteamWorkshop.EnumerationUserDetails)"/>.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.UserSubscribedFilesCallback.Result">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.UserSubscribedFilesCallback.Files">
            <summary>
            Gets the list of enumerated files.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.UserSubscribedFilesCallback.TotalResults">
            <summary>
            Gets the count of total results.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamWorkshop.UserSubscribedFilesCallback.File">
            <summary>
            Represents the details of a single published file.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.UserSubscribedFilesCallback.File.FileID">
            <summary>
            Gets the file ID.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.UserSubscribedFilesCallback.File.TimeSubscribed">
            <summary>
            Gets the time this file was subscribed to.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamWorkshop.UserActionPublishedFilesCallback">
            <summary>
            This callback is received in response to calling <see cref="M:SteamKit2.SteamWorkshop.EnumeratePublishedFilesByUserAction(SteamKit2.SteamWorkshop.EnumerationUserDetails)"/>.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.UserActionPublishedFilesCallback.Result">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.UserActionPublishedFilesCallback.Files">
            <summary>
            Gets the list of enumerated files.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.UserActionPublishedFilesCallback.TotalResults">
            <summary>
            Gets the count of total results.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamWorkshop.UserActionPublishedFilesCallback.File">
            <summary>
            Represents the details of a single published file.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.UserActionPublishedFilesCallback.File.FileID">
            <summary>
            Gets the file ID.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.UserActionPublishedFilesCallback.File.Timestamp">
            <summary>
            Gets the timestamp of this file.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamWorkshop.EnumerationUserDetails">
            <summary>
            Represents the details of an enumeration request used for the local user's files.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.EnumerationUserDetails.AppID">
            <summary>
            Gets or sets the AppID of the workshop to enumerate.
            </summary>
            <value>
            The AppID.
            </value>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.EnumerationUserDetails.SortOrder">
            <summary>
            Gets or sets the sort order.
            This value is only used by <see cref="M:SteamKit2.SteamWorkshop.EnumerateUserPublishedFiles(SteamKit2.SteamWorkshop.EnumerationUserDetails)"/>.
            </summary>
            <value>
            The sort order.
            </value>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.EnumerationUserDetails.StartIndex">
            <summary>
            Gets or sets the start index.
            </summary>
            <value>
            The start index.
            </value>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.EnumerationUserDetails.UserAction">
            <summary>
            Gets or sets the user action to filter by.
            This value is only used by <see cref="M:SteamKit2.SteamWorkshop.EnumeratePublishedFilesByUserAction(SteamKit2.SteamWorkshop.EnumerationUserDetails)"/>.
            </summary>
            <value>
            The user action.
            </value>
        </member>
        <member name="T:SteamKit2.SteamWorkshop.EnumerationDetails">
            <summary>
            Represents the details of an enumeration request for all published files.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamWorkshop.EnumerationDetails.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.SteamWorkshop.EnumerationDetails"/> class.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.EnumerationDetails.AppID">
            <summary>
            Gets or sets the AppID of the workshop to enumerate.
            </summary>
            <value>
            The AppID.
            </value>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.EnumerationDetails.Type">
            <summary>
            Gets or sets the type of the enumeration.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.EnumerationDetails.StartIndex">
            <summary>
            Gets or sets the start index.
            </summary>
            <value>
            The start index.
            </value>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.EnumerationDetails.Days">
            <summary>
            Gets or sets the days.
            </summary>
            <value>
            The days.
            </value>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.EnumerationDetails.Count">
            <summary>
            Gets or sets the number of results to return.
            </summary>
            <value>
            The number of results.
            </value>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.EnumerationDetails.Tags">
            <summary>
            Gets the list of tags to enumerate.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamWorkshop.EnumerationDetails.UserTags">
            <summary>
            Gets the list of user tags to enumerate.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamUserStats">
            <summary>
            This handler handles Steam user statistic related actions.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamUserStats.GetNumberOfCurrentPlayers(SteamKit2.GameID)">
            <summary>
            Retrieves the number of current players or a given <see cref="T:SteamKit2.GameID"/>.
            Results are returned in a <see cref="T:SteamKit2.SteamUserStats.NumberOfPlayersCallback"/> from a <see cref="T:SteamKit2.SteamClient.JobCallback`1"/>.
            </summary>
            <param name="gameId">The GameID to request the number of players for.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamClient.JobCallback`1"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamUserStats.HandleMsg(SteamKit2.IPacketMsg)">
            <summary>
            Handles a client message. This should not be called directly.
            </summary>
            <param name="packetMsg">The <see cref="T:SteamKit2.IPacketMsg"/> instance containing the event data.</param>
        </member>
        <member name="T:SteamKit2.SteamUserStats.NumberOfPlayersCallback">
            <summary>
            This callback is fired in response to <see cref="M:SteamKit2.SteamUserStats.GetNumberOfCurrentPlayers(SteamKit2.GameID)"/>.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUserStats.NumberOfPlayersCallback.Result">
            <summary>
            Gets the result of the request.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUserStats.NumberOfPlayersCallback.NumPlayers">
            <summary>
            Gets the current number of players according to Steam.
            </summary>
        </member>
        <member name="T:SteamKit2.Internal.CallbackBase">
            <summary>
            This is the base class for the utility <see cref="T:SteamKit2.Callback`1"/> class.
            This is for internal use only, and shouldn't be used directly.
            </summary>
        </member>
        <member name="T:SteamKit2.Callback`1">
            <summary>
            This utility class is used for binding a callback to a function.
            </summary>
            <typeparam name="TCall">The callback type this instance will handle.</typeparam>
        </member>
        <member name="M:SteamKit2.Callback`1.#ctor(System.Action{`0},SteamKit2.CallbackManager)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.Callback`1"/> class.
            </summary>
            <param name="func">The function to call when a callback of type TCall arrives.</param>
            <param name="mgr">The <see cref="T:SteamKit2.CallbackManager"/> that is responsible for the routing of callbacks to this handler, or null if the callback will be registered manually.</param>
        </member>
        <member name="M:SteamKit2.Callback`1.AttachTo(SteamKit2.CallbackManager)">
            <summary>
            Attaches the specified <see cref="T:SteamKit2.CallbackManager"/> to this handler.
            </summary>
            <param name="mgr">The manager to attach.</param>
        </member>
        <member name="M:SteamKit2.Callback`1.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:SteamKit2.Callback`1"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:SteamKit2.Callback`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            This function will unregister the callback.
            </summary>
        </member>
        <member name="P:SteamKit2.Callback`1.OnRun">
            <summary>
            Gets or sets the function to call when a callback of type TCall arrives.
            </summary>
        </member>
        <member name="T:SteamKit2.JobCallback`1">
            <summary>
            This utility class is used for binding job callbacks to functions.
            </summary>
            <typeparam name="TCall">The callback type this instance will handle.</typeparam>
        </member>
        <member name="M:SteamKit2.JobCallback`1.#ctor(System.Action{`0,SteamKit2.JobID},SteamKit2.CallbackManager,SteamKit2.JobID)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.JobCallback`1"/> class.
            </summary>
            <param name="func">The function to call when a job based callback of type TCall arrives.</param>
            <param name="mgr">The <see cref="T:SteamKit2.CallbackManager"/> that is responsible for the routing of callbacks to this handler, or <c>null</c> if the callback will be manually registered.</param>
            <param name="jobID">The Job ID this callback will handle, or <c>JobID.Invalid</c> to handle all job callbacks of type <c>TCall</c>.</param>
        </member>
        <member name="M:SteamKit2.JobCallback`1.#ctor(System.Action{`0,SteamKit2.JobID},SteamKit2.CallbackManager)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.JobCallback`1"/> class.
            </summary>
            <param name="func">The function to call when a job based callback of type TCall arrives.</param>
            <param name="mgr">The <see cref="T:SteamKit2.CallbackManager"/> that is responsible for the routing of callbacks to this handler, or <c>null</c> if the callback will be manually registered.</param>
        </member>
        <member name="P:SteamKit2.JobCallback`1.JobID">
            <summary>
            Gets or sets the job ID this callback will handle.
            Setting this field to the maximum value of a ulong will unbind this handler,
            allowing all callbacks of type TCall to be handled.
            </summary>
        </member>
        <member name="P:SteamKit2.JobCallback`1.OnRun">
            <summary>
            Gets or sets the function to call when a job based callback of type TCall arrives.
            </summary>
        </member>
        <member name="P:SteamKit2.JobCallback`1.Completed">
            <summary>
            Gets a value indicating whether this <see cref="T:SteamKit2.JobCallback`1"/> is completed.
            Completion is defined as the callback for the given job id being received and handled.
            </summary>
            <value>
              <c>true</c> if completed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SteamKit2.CallbackManager">
            <summary>
            This class is a utility for routing callbacks to function calls.
            In order to bind callbacks to functions, an instance of this class must be created for the
            <see cref="T:SteamKit2.SteamClient"/> instance that will be posting callbacks.
            </summary>
        </member>
        <member name="M:SteamKit2.CallbackManager.#ctor(SteamKit2.SteamClient)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.CallbackManager"/> class.
            </summary>
            <param name="client">The <see cref="T:SteamKit2.SteamClient"/> instance to handle the callbacks of.</param>
        </member>
        <member name="M:SteamKit2.CallbackManager.RunCallbacks">
            <summary>
            Runs a single queued callback.
            If no callback is queued, this method will instantly return.
            </summary>
        </member>
        <member name="M:SteamKit2.CallbackManager.RunWaitCallbacks(System.TimeSpan)">
            <summary>
            Blocks the current thread to run a single queued callback.
            If no callback is queued, the method will block for the given timeout.
            </summary>
            <param name="timeout">The length of time to block.</param>
        </member>
        <member name="M:SteamKit2.CallbackManager.RunWaitCallbacks">
            <summary>
            Blocks the current thread to run a single queued callback.
            If no callback is queued, the method will block until one is posted.
            </summary>
        </member>
        <member name="M:SteamKit2.CallbackManager.Register(SteamKit2.Internal.CallbackBase)">
            <summary>
            Manually registers the specified callback handler.
            This is generally not required, as a handler will register itself when it is created.
            If the specified callback is already registered, no exception is thrown.
            </summary>
            <param name="call">The callback handler to register.</param>
        </member>
        <member name="M:SteamKit2.CallbackManager.Unregister(SteamKit2.Internal.CallbackBase)">
            <summary>
            Unregisters the specified callback handler.
            This is generally not required, as a handler will unregister itself when disposed or finalized.
            If the specified callback isn't registered, no exception is thrown.
            </summary>
            <param name="call">The callback handler to unregister.</param>
        </member>
        <member name="T:SteamKit2.WebAPI">
            <summary>
            Utility class for interacting with the Steam Web API.
            </summary>
        </member>
        <member name="M:SteamKit2.WebAPI.GetInterface(System.String,System.String)">
            <summary>
            Retreives a dynamic handler capable of interacting with the specified interface on the Web API.
            </summary>
            <param name="iface">The interface to retrieve a handler for.</param>
            <param name="apiKey">An optional API key to be used for authorized requests.</param>
            <returns>A dynamic <see cref="T:SteamKit2.WebAPI.Interface"/> object to interact with the Web API.</returns>
        </member>
        <member name="T:SteamKit2.WebAPI.Interface">
            <summary>
            Represents a single interface that exists within the Web API.
            This is a dynamic object that allows function calls to interfaces with minimal code.
            </summary>
        </member>
        <member name="M:SteamKit2.WebAPI.Interface.Call(System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Boolean)">
            <summary>
            Manually calls the specified Web API function with the provided details.
            </summary>
            <param name="func">The function name to call.</param>
            <param name="version">The version of the function to call.</param>
            <param name="args">A dictionary of string key value pairs representing arguments to be passed to the API.</param>
            <param name="method">The http request method. Either "POST" or "GET".</param>
            <param name="secure">if set to <c>true</c> this method will be called through the secure API.</param>
            <returns>A <see cref="T:SteamKit2.KeyValue"/> object representing the results of the Web API call.</returns>
            <exception cref="T:System.ArgumentNullException">The function name or request method provided were <c>null</c>.</exception>
            <exception cref="T:System.Net.WebException">An network error occurred when performing the request.</exception>
            <exception cref="T:System.IO.InvalidDataException">An error occured when parsing the response from the WebAPI.</exception>
        </member>
        <member name="M:SteamKit2.WebAPI.Interface.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SteamKit2.WebAPI.Interface.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that invoke a member.
            Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can
            override this method to specify dynamic behavior for operations such as calling a method.
            This method should not be called directly, it is  called through dynamic method calls.
            </summary>
            <param name="binder">
            Provides information about the dynamic operation.
            The binder.Name property provides the name of the member on which the dynamic operation is performed.
            For example, for the statement sampleObject.SampleMethod(100), where sampleObject is an instance of the
            class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleMethod".
            The binder.IgnoreCase property specifies whether the member name is case-sensitive.
            </param>
            <param name="args">
            The arguments that are passed to the object member during the invoke operation. For example,
            for the statement sampleObject.SampleMethod(100), where sampleObject is derived from the
            <see cref="T:System.Dynamic.DynamicObject"/> class, the first argument to <paramref name="args"/> is equal to 100.
            </param>
            <param name="result">The result of the member invocation.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time
            binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Dynamic method is called with non-named argument.
            All parameters must be passed as name arguments to API calls.
            - or -
            The dynamic method name was not in the correct format.
            All API function calls must be in the format 'FunctionName###' where the optional ###'s represent a version number.
            </exception>
            <exception cref="T:System.ArgumentException">
            The reserved named parameter 'secure' was not a boolean value.
            This parameter is used when requests must go through the secure API.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The function version number specified was out of range.
            </exception>
        </member>
        <member name="T:SteamKit2.Steam2ChecksumData">
            <summary>
            Represents file checksum data for Steam2 manifests.
            </summary>
        </member>
        <member name="M:SteamKit2.Steam2ChecksumData.GetFileChecksums(System.Int32)">
            <summary>
            Gets checksums for the given FileID.
            </summary>
            <param name="FileID">The FileID.</param>
            <returns>A list of checksums for the given file.</returns>
        </member>
        <member name="T:SteamKit2.JobID">
            <summary>
            Represents an identifier of a network task known as a job.
            </summary>
        </member>
        <member name="T:SteamKit2.UInt64Handle">
            <summary>
            The base class used for wrapping common ulong types, to introduce type safety and distinguish between common types.
            </summary>
        </member>
        <member name="M:SteamKit2.UInt64Handle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.UInt64Handle"/> class.
            </summary>
        </member>
        <member name="M:SteamKit2.UInt64Handle.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.UInt64Handle"/> class.
            </summary>
            <param name="value">The value to initialize this handle to.</param>
        </member>
        <member name="M:SteamKit2.UInt64Handle.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SteamKit2.UInt64Handle.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SteamKit2.UInt64Handle.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SteamKit2.UInt64Handle.Equals(SteamKit2.UInt64Handle)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="P:SteamKit2.UInt64Handle.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="F:SteamKit2.JobID.Invalid">
            <summary>
            Represents an invalid JobID.
            </summary>
        </member>
        <member name="M:SteamKit2.JobID.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.JobID"/> class.
            </summary>
            <param name="jobId">The job ID.</param>
        </member>
        <member name="M:SteamKit2.JobID.op_Implicit(SteamKit2.JobID)~System.UInt64">
            <summary>
            Performs an implicit conversion from <see cref="T:SteamKit2.JobID"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="job">The job ID.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SteamKit2.JobID.op_Implicit(System.UInt64)~SteamKit2.JobID">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:SteamKit2.JobID"/>.
            </summary>
            <param name="jobId">The job ID.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SteamKit2.JobID.op_Equality(SteamKit2.JobID,SteamKit2.JobID)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">The first job ID.</param>
            <param name="b">The second job ID.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SteamKit2.JobID.op_Inequality(SteamKit2.JobID,SteamKit2.JobID)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">The first job ID.</param>
            <param name="b">The second job ID.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:SteamKit2.DepotManifest">
            <summary>
            Represents a Steam3 depot manifest.
            </summary>
        </member>
        <member name="M:SteamKit2.DepotManifest.DecryptFilenames(System.Byte[])">
            <summary>
            Attempts to decrypts file names with the given encryption key.
            </summary>
            <param name="encryptionKey">The encryption key.</param>
            <returns><c>true</c> if the file names were successfully decrypted; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:SteamKit2.DepotManifest.Files">
            <summary>
            Gets the list of files within this manifest.
            </summary>
        </member>
        <member name="P:SteamKit2.DepotManifest.FilenamesEncrypted">
            <summary>
            Gets a value indicating whether filenames within this depot are encrypted.
            </summary>
            <value>
              <c>true</c> if the filenames are encrypted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SteamKit2.DepotManifest.ChunkData">
            <summary>
            Represents a single chunk within a file.
            </summary>
        </member>
        <member name="P:SteamKit2.DepotManifest.ChunkData.ChunkID">
            <summary>
            Gets the SHA-1 hash chunk id.
            </summary>
        </member>
        <member name="P:SteamKit2.DepotManifest.ChunkData.Checksum">
            <summary>
            Gets the expected Adler32 checksum of this chunk.
            </summary>
        </member>
        <member name="P:SteamKit2.DepotManifest.ChunkData.Offset">
            <summary>
            Gets the chunk offset.
            </summary>
        </member>
        <member name="P:SteamKit2.DepotManifest.ChunkData.CompressedLength">
            <summary>
            Gets the compressed length of this chunk.
            </summary>
        </member>
        <member name="P:SteamKit2.DepotManifest.ChunkData.UncompressedLength">
            <summary>
            Gets the decompressed length of this chunk.
            </summary>
        </member>
        <member name="T:SteamKit2.DepotManifest.FileData">
            <summary>
            Represents a single file within a manifest.
            </summary>
        </member>
        <member name="P:SteamKit2.DepotManifest.FileData.FileName">
            <summary>
            Gets the name of the file.
            </summary>
        </member>
        <member name="P:SteamKit2.DepotManifest.FileData.Chunks">
            <summary>
            Gets the chunks that this file is composed of.
            </summary>
        </member>
        <member name="P:SteamKit2.DepotManifest.FileData.Flags">
            <summary>
            Gets the file flags
            </summary>
        </member>
        <member name="P:SteamKit2.DepotManifest.FileData.TotalSize">
            <summary>
            Gets the total size of this file.
            </summary>
        </member>
        <member name="P:SteamKit2.DepotManifest.FileData.FileHash">
            <summary>
            Gets the hash of this file.
            </summary>
        </member>
        <member name="T:SteamKit2.MicroTime">
            <summary>
            This class holds the 64-bit representation of time using ticks expressed as microseconds
            </summary>
        </member>
        <member name="M:SteamKit2.MicroTime.#ctor">
            <summary>
            Constructs a MicroTime representing a time of 0
            </summary>
        </member>
        <member name="M:SteamKit2.MicroTime.#ctor(System.UInt64)">
            <summary>
            Constructs a MicroTime from an input time in microseconds
            </summary>
        </member>
        <member name="M:SteamKit2.MicroTime.#ctor(System.DateTime)">
            <summary>
            Constructs a MicroTime from an input DateTime
            </summary>
        </member>
        <member name="M:SteamKit2.MicroTime.op_Implicit(SteamKit2.MicroTime)~System.UInt64">
            <summary>
            Implicit conversion of MicroTime to ulong representing the time in microseconds
            </summary>
        </member>
        <member name="M:SteamKit2.MicroTime.op_Implicit(System.UInt64)~SteamKit2.MicroTime">
            <summary>
            Implicit conversion of ulong representing the time in microseconds to a MicroTime
            </summary>
        </member>
        <member name="M:SteamKit2.MicroTime.ToTicks">
            <summary>
            Returns MicroTime as ticks (one tick is 100 nanoseconds)
            </summary>
        </member>
        <member name="M:SteamKit2.MicroTime.ToDateTimeUTC">
            <summary>
            Returns a DateTime as a UTC datetime
            </summary>
        </member>
        <member name="M:SteamKit2.MicroTime.ToDateTimeLocal">
            <summary>
            Returns a DateTime as the local datetime
            </summary>
        </member>
        <member name="M:SteamKit2.MicroTime.ToUnixTime">
            <summary>
            Returns a unix timestamp
            </summary>
        </member>
        <member name="M:SteamKit2.MicroTime.ToString">
            <summary>
            Returns the MicroTime formatted as a string
            </summary>
        </member>
        <member name="M:SteamKit2.MicroTime.CompareTo(System.UInt64)">
            <summary>
            Compares MicroTime for equality
            </summary>
        </member>
        <member name="M:SteamKit2.MicroTime.Equals(System.UInt64)">
            <summary>
            Compares MicroTime for equality
            </summary>
        </member>
        <member name="M:SteamKit2.MicroTime.Deserialize(System.Byte[])">
            <summary>
            Deserialize a MicroTime from an input byte array
            </summary>
        </member>
        <member name="M:SteamKit2.MicroTime.Serialize">
            <summary>
            Serialize a MicroTime to a byte array
            </summary>
        </member>
        <member name="P:SteamKit2.MicroTime.Now">
            <summary>
            Returns the MiroTime of the current local time
            </summary>
        </member>
        <member name="P:SteamKit2.MicroTime.UtcNow">
            <summary>
            Returns the MiroTime of the current UTC time
            </summary>
        </member>
        <member name="T:SteamKit2.Steam2Ticket">
            <summary>
            Represents a Steam2 authentication ticket container used for downloading authenticated content from Steam2 servers.
            </summary>
        </member>
        <member name="P:SteamKit2.Steam2Ticket.Magic">
            <summary>
            Gets the magic of the container.
            </summary>
        </member>
        <member name="P:SteamKit2.Steam2Ticket.Length">
            <summary>
            Gets the length, in bytes, of the container.
            </summary>
        </member>
        <member name="P:SteamKit2.Steam2Ticket.Entries">
            <summary>
            Gets the <see cref="T:SteamKit2.Steam2Ticket.Entry">entries</see> within this container.
            </summary>
        </member>
        <member name="T:SteamKit2.Steam2Ticket.Entry">
            <summary>
            Represents a single data entry within the ticket container.
            </summary>
        </member>
        <member name="P:SteamKit2.Steam2Ticket.Entry.Magic">
            <summary>
            Gets the magic.
            </summary>
        </member>
        <member name="P:SteamKit2.Steam2Ticket.Entry.Index">
            <summary>
            Gets the index of this entry.
            </summary>
        </member>
        <member name="P:SteamKit2.Steam2Ticket.Entry.Data">
            <summary>
            Gets the data of this entry.
            </summary>
        </member>
        <member name="T:SteamKit2.UGCHandle">
            <summary>
            Represents a single unique handle to a piece of User Generated Content.
            </summary>
        </member>
        <member name="M:SteamKit2.UGCHandle.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.UGCHandle"/> class.
            </summary>
            <param name="ugcId">The ugc handle id.</param>
        </member>
        <member name="M:SteamKit2.UGCHandle.op_Implicit(SteamKit2.UGCHandle)~System.UInt64">
            <summary>
            Performs an implicit conversion from <see cref="T:SteamKit2.UGCHandle"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="ugc">The UGC handle.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SteamKit2.UGCHandle.op_Implicit(System.UInt64)~SteamKit2.UGCHandle">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:SteamKit2.UGCHandle"/>.
            </summary>
            <param name="ugcId">The ugc id.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SteamKit2.UGCHandle.op_Equality(SteamKit2.UGCHandle,SteamKit2.UGCHandle)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">The first handle.</param>
            <param name="b">The second handle.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SteamKit2.UGCHandle.op_Inequality(SteamKit2.UGCHandle,SteamKit2.UGCHandle)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">The first handle.</param>
            <param name="b">The second handle.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:SteamKit2.PublishedFileID">
            <summary>
            Represents a handle to a published file on the Steam workshop.
            </summary>
        </member>
        <member name="M:SteamKit2.PublishedFileID.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.PublishedFileID"/> class.
            </summary>
            <param name="fileId">The file id.</param>
        </member>
        <member name="M:SteamKit2.PublishedFileID.op_Implicit(SteamKit2.PublishedFileID)~System.UInt64">
            <summary>
            Performs an implicit conversion from <see cref="T:SteamKit2.PublishedFileID"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="file">The published file.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SteamKit2.PublishedFileID.op_Implicit(System.UInt64)~SteamKit2.PublishedFileID">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:SteamKit2.PublishedFileID"/>.
            </summary>
            <param name="fileId">The file id.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SteamKit2.PublishedFileID.op_Equality(SteamKit2.PublishedFileID,SteamKit2.PublishedFileID)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">The first published file.</param>
            <param name="b">The second published file.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SteamKit2.PublishedFileID.op_Inequality(SteamKit2.PublishedFileID,SteamKit2.PublishedFileID)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">The first published file.</param>
            <param name="b">The second published file.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:SteamKit2.BinaryWriterEx">
            <summary>
            Helper class that allows writing binary data to a stream.
            </summary>
        </member>
        <member name="M:SteamKit2.BinaryWriterEx.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.BinaryWriterEx"/> class.
            </summary>
            <param name="swapEndianness">if set to <c>true</c>, perform an endian swap when writing basic types.</param>
        </member>
        <member name="M:SteamKit2.BinaryWriterEx.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.BinaryWriterEx"/> class.
            </summary>
            <param name="capacity">The initial size of the internal array in bytes.</param>
            <param name="swapEndianness">if set to <c>true</c>, perform an endian swap when writing basic types.</param>
        </member>
        <member name="M:SteamKit2.BinaryWriterEx.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.BinaryWriterEx"/> class.
            </summary>
            <param name="stream">The output stream.</param>
            <param name="swapEndianness">if set to <c>true</c>, perform an endian swap when writing basic types.</param>
        </member>
        <member name="M:SteamKit2.BinaryWriterEx.op_Implicit(SteamKit2.BinaryWriterEx)~System.IO.Stream">
            <summary>
            Performs an implicit conversion from <see cref="T:SteamKit2.BinaryWriterEx"/> to <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="bw">The <see cref="T:SteamKit2.BinaryWriterEx"/>.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SteamKit2.BinaryWriterEx.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.BinaryWriter"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:SteamKit2.BinaryWriterEx.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:SteamKit2.BinaryWriterEx.Write(System.Int16)">
            <summary>
            Writes a two-byte signed integer to the current stream and advances the stream position by two bytes.
            </summary>
            <param name="value">The two-byte signed integer to write.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
              
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
        </member>
        <member name="M:SteamKit2.BinaryWriterEx.Write(System.Int32)">
            <summary>
            Writes a four-byte signed integer to the current stream and advances the stream position by four bytes.
            </summary>
            <param name="value">The four-byte signed integer to write.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
              
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
        </member>
        <member name="M:SteamKit2.BinaryWriterEx.Write(System.Int64)">
            <summary>
            Writes an eight-byte signed integer to the current stream and advances the stream position by eight bytes.
            </summary>
            <param name="value">The eight-byte signed integer to write.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
              
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
        </member>
        <member name="M:SteamKit2.BinaryWriterEx.Write(System.UInt16)">
            <summary>
            Writes a two-byte unsigned integer to the current stream and advances the stream position by two bytes.
            </summary>
            <param name="value">The two-byte unsigned integer to write.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
              
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
        </member>
        <member name="M:SteamKit2.BinaryWriterEx.Write(System.UInt32)">
            <summary>
            Writes a four-byte unsigned integer to the current stream and advances the stream position by four bytes.
            </summary>
            <param name="value">The four-byte unsigned integer to write.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
              
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
        </member>
        <member name="M:SteamKit2.BinaryWriterEx.Write(System.UInt64)">
            <summary>
            Writes an eight-byte unsigned integer to the current stream and advances the stream position by eight bytes.
            </summary>
            <param name="value">The eight-byte unsigned integer to write.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
              
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
        </member>
        <member name="M:SteamKit2.BinaryWriterEx.Write(System.Type,System.Object)">
            <summary>
            Attempts to marshal the given type and data into a byte array, and write it to the stream.
            </summary>
            <param name="dataType">The <see cref="T:System.Type"/> of the data.</param>
            <param name="data">The object that will be marshaled into the stream.</param>
        </member>
        <member name="M:SteamKit2.BinaryWriterEx.WriteType``1(``0)">
            <summary>
            Attempts to marshal the given type and data into a byte array, and write it to the stream.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the data.</typeparam>
            <param name="data">The object that will be marshaled into the stream.</param>
        </member>
        <member name="M:SteamKit2.BinaryWriterEx.ToArray">
            <summary>
            Writes the stream contents to a byte array, regardless of the <see cref="P:SteamKit2.BinaryWriterEx.Position"/> property.
            </summary>
            <returns>A new byte array.</returns>
        </member>
        <member name="M:SteamKit2.BinaryWriterEx.Write(System.String)">
            <summary>
            Writes the specified string to the stream using default encoding.
            This function does not write a terminating null character.
            </summary>
            <param name="data">The string to write.</param>
        </member>
        <member name="M:SteamKit2.BinaryWriterEx.Write(System.String,System.Text.Encoding)">
            <summary>
            Writes the specified string to the stream using the specified encoding.
            This function does not write a terminating null character.
            </summary>
            <param name="data">The string to write.</param>
            <param name="encoding">The encoding to use when writing the string.</param>
        </member>
        <member name="M:SteamKit2.BinaryWriterEx.WriteNullTermString(System.String)">
            <summary>
            Writes the secified string and a null terminator to the stream using default encoding.
            </summary>
            <param name="data">The string to write.</param>
        </member>
        <member name="M:SteamKit2.BinaryWriterEx.WriteNullTermString(System.String,System.Text.Encoding)">
            <summary>
            Writes the specified string and a null terminator to the stream using the specified encoding.
            </summary>
            <param name="data">The string to write.</param>
            <param name="encoding">The encoding to use when writing the string.</param>
        </member>
        <member name="P:SteamKit2.BinaryWriterEx.SwapEndianness">
            <summary>
            Gets or sets a value indicating whether to swap endianness when writing basic types.
            </summary>
            <value>
              <c>true</c> if to swap endianness when writing basic types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.BinaryWriterEx.Length">
            <summary>
            gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:SteamKit2.BinaryWriterEx.Position">
            <summary>
            Gets the position within the current stream.
            </summary>
        </member>
        <member name="M:SteamKit2.UdpPacket.#ctor(System.IO.MemoryStream)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.UdpPacket"/> class with
            information from the memory stream.
            
            Header is populated from the MemoryStream
            </summary>
            <param name="ms">The stream containing the packet and it's payload data.</param>
        </member>
        <member name="M:SteamKit2.UdpPacket.#ctor(SteamKit2.EUdpPacketType)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.UdpPacket"/> class, with
            no payload.
            
            Header must be populated manually.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:SteamKit2.UdpPacket.#ctor(SteamKit2.EUdpPacketType,System.IO.MemoryStream)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.UdpPacket"/> class, of the
            specified type containing the specified payload.
            
            Header must be populated manually.
            </summary>
            <param name="type">The type.</param>
            <param name="payload">The payload.</param>
        </member>
        <member name="M:SteamKit2.UdpPacket.#ctor(SteamKit2.EUdpPacketType,System.IO.MemoryStream,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.UdpPacket"/> class, of the
            specified type containing the first 'length' bytes of specified payload.
            
            Header must be populated manually.
            </summary>
            <param name="type">The type.</param>
            <param name="payload">The payload.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:SteamKit2.UdpPacket.SetPayload(System.IO.MemoryStream)">
            <summary>
            Sets the payload
            </summary>
            <param name="ms">The payload to copy.</param>
        </member>
        <member name="M:SteamKit2.UdpPacket.SetPayload(System.IO.MemoryStream,System.Int64)">
            <summary>
            Sets the payload.
            </summary>
            <param name="ms">The payload.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:SteamKit2.UdpPacket.GetData">
            <summary>
            Serializes the UdpPacket.
            </summary>
            <returns>The serialized packet.</returns>
        </member>
        <member name="P:SteamKit2.UdpPacket.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SteamKit2.Steam2Exception">
            <summary>
            Represents an exception that can occur when doing Steam2 actions.
            </summary>
        </member>
        <member name="M:SteamKit2.Steam2Exception.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.Steam2Exception"/> class.
            </summary>
        </member>
        <member name="M:SteamKit2.Steam2Exception.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.Steam2Exception"/> class.
            </summary>
            <param name="msg">The message.</param>
        </member>
        <member name="M:SteamKit2.Steam2Exception.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.Steam2Exception"/> class.
            </summary>
            <param name="msg">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:SteamKit2.ContentServerClient">
            <summary>
            Represents a client that is capable of connecting to a Steam2 content server.
            </summary>
        </member>
        <member name="T:SteamKit2.ServerClient">
            <summary>
            This is the root client class used to provide all the functionality required to connect to Steam2 servers.
            </summary>
        </member>
        <member name="M:SteamKit2.ServerClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.ServerClient"/> class.
            </summary>
        </member>
        <member name="M:SteamKit2.ServerClient.Connect(System.Net.IPEndPoint)">
            <summary>
            Connects to the specified end point.
            </summary>
            <param name="endPoint">The end point.</param>
        </member>
        <member name="M:SteamKit2.ServerClient.Disconnect">
            <summary>
            Disconnects this instance.
            </summary>
        </member>
        <member name="M:SteamKit2.ServerClient.SendCommand(System.Byte,System.Object[])">
            <summary>
            Sends a command to the connected server.
            The return value of this function does not signify command success, only if the command was sent.
            </summary>
            <param name="command">The command type to send.</param>
            <param name="args">The arguments to send.</param>
            <returns>True if the command was sent; otherwise, false.</returns>
        </member>
        <member name="M:SteamKit2.ServerClient.HandshakeServer(SteamKit2.ESteam2ServerType)">
            <summary>
            Performs a handshake with the server.
            </summary>
            <param name="type">The expected server type the client is handshaking with.</param>
            <returns>True if the handshake succeeded; otherwise false.</returns>
        </member>
        <member name="P:SteamKit2.ServerClient.Socket">
            <summary>
            Gets the socket of the client.
            </summary>
            <value>The socket.</value>
        </member>
        <member name="P:SteamKit2.ServerClient.EndPoint">
            <summary>
            Gets the remote endpoint of the client.
            </summary>
            <value>The end point.</value>
        </member>
        <member name="P:SteamKit2.ServerClient.IsConnected">
            <summary>
            Gets whether or not the client is connected.
            </summary>
            <value>True if connected, otherwise false.</value>
        </member>
        <member name="P:SteamKit2.ServerClient.ConnectionTimeout">
            <summary>
            Gets the length of time a connection will attempt to establish before timing out. The default timeout is 30 seconds.
            </summary>
            <value>The connection timeout.</value>
        </member>
        <member name="M:SteamKit2.ContentServerClient.OpenStorage(System.UInt32,System.UInt32,System.UInt32,SteamKit2.ContentServerClient.Credentials,System.Boolean)">
            <summary>
            Opens a storage session with the storage server.
            </summary>
            <param name="depotId">The depot id.</param>
            <param name="depotVersion">The depot version.</param>
            <param name="cellId">The cell id.</param>
            <param name="credentials">The credentials.</param>
            <param name="doHandshake">Whether or not to send the handshake and reopen cell</param>
            <returns>A new StorageSession object for the session.</returns>
        </member>
        <member name="M:SteamKit2.ContentServerClient.OpenStorage(System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Opens a storage session with the storage server.
            </summary>
            <param name="depotId">The depot id.</param>
            <param name="depotVersion">The depot version.</param>
            <param name="cellId">The cell id.</param>
            <param name="doHandshake">Whether or not to send the handshake and reopen cell</param>
            <returns>A new StorageSession object for the session.</returns>
        </member>
        <member name="M:SteamKit2.ContentServerClient.OpenStorage(System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Opens a storage session with the storage server.
            </summary>
            <param name="depotId">The depot id.</param>
            <param name="depotVersion">The depot version.</param>
            <param name="doHandshake">Whether or not to send the handshake and reopen cell</param>
            <returns>A new StorageSession object for the session.</returns>
        </member>
        <member name="M:SteamKit2.ContentServerClient.OpenPackage(System.UInt32)">
            <summary>
            Opens a package session with the package server.
            </summary>
            <param name="cellId">The cell id.</param>
            <returns>A new PackageSession object for the session.</returns>
        </member>
        <member name="M:SteamKit2.ContentServerClient.GetCellID">
            <summary>
            Requests the cell ID of the currently connected content server.
            </summary>
            <returns>The cell ID of the server.</returns>
        </member>
        <member name="T:SteamKit2.ContentServerClient.Credentials">
            <summary>
            These credentials must be supplied when attempting to open a storage session for a depot which requires it.
            </summary>
        </member>
        <member name="P:SteamKit2.ContentServerClient.Credentials.Steam2Ticket">
            <summary>
            Gets or sets the Steam2 ServerTGT.
            </summary>
            <value>The ServerTGT.</value>
        </member>
        <member name="P:SteamKit2.ContentServerClient.Credentials.SessionToken">
            <summary>
            Gets or sets the Steam3 session token.
            </summary>
            <value>The session token.</value>
        </member>
        <member name="P:SteamKit2.ContentServerClient.Credentials.AppTicket">
            <summary>
            Gets or sets the Steam3 app ticket for the app being requested.
            </summary>
            <value>The app ticket.</value>
        </member>
        <member name="T:SteamKit2.ContentServerClient.StorageSession">
            <summary>
            This represents a storage session with a storage server, used to download game content.
            </summary>
        </member>
        <member name="M:SteamKit2.ContentServerClient.StorageSession.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SteamKit2.ContentServerClient.StorageSession.DownloadManifest">
            <summary>
            Downloads the <see cref="T:SteamKit2.Steam2Manifest"/> which contains metadata representing the files within the depot.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SteamKit2.ContentServerClient.StorageSession.DownloadChecksums">
            <summary>
            Downloads the <see cref="T:SteamKit2.Steam2ChecksumData"/> for this depot.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SteamKit2.ContentServerClient.StorageSession.DownloadUpdates(System.UInt32)">
            <summary>
            Downloads a list of updated FileIDs since the given version.
            </summary>
            <param name="oldVersion">The old version to compare to.</param>
            <returns>A list of FileIDs that have been updated.</returns>
        </member>
        <member name="M:SteamKit2.ContentServerClient.StorageSession.DownloadFileToStream(SteamKit2.Steam2Manifest.Node,System.IO.Stream,SteamKit2.ContentServerClient.StorageSession.DownloadPriority,System.Byte[])">
            <summary>
            Downloads a specific file from the Steam servers to the specified Stream.
            </summary>
            <param name="file">The file to download, given from the manifest.</param>
            <param name="downloadStream">The stream to which file data should be written.</param>
            <param name="priority">The download priority.</param>
            <param name="cryptKey">The AES encryption key used for any encrypted files.</param>
            <returns>A byte array representing the file.</returns>
        </member>
        <member name="M:SteamKit2.ContentServerClient.StorageSession.DownloadFile(SteamKit2.Steam2Manifest.Node,SteamKit2.ContentServerClient.StorageSession.DownloadPriority,System.Byte[])">
            <summary>
            Downloads a specific file from the Steam servers.
            </summary>
            <param name="file">The file to download, given from the manifest.</param>
            <param name="priority">The download priority.</param>
            <param name="cryptKey">The AES encryption key used for any encrypted files.</param>
            <returns>A byte array representing the file.</returns>
        </member>
        <member name="P:SteamKit2.ContentServerClient.StorageSession.DepotID">
            <summary>
            Gets the depot ID this session instance is for.
            </summary>
        </member>
        <member name="P:SteamKit2.ContentServerClient.StorageSession.DepotVersion">
            <summary>
            Gets the depot version this session instance is for.
            </summary>
        </member>
        <member name="T:SteamKit2.ContentServerClient.StorageSession.DownloadPriority">
            <summary>
            The priority setting for a file download.
            </summary>
        </member>
        <member name="F:SteamKit2.ContentServerClient.StorageSession.DownloadPriority.Low">
            <summary>
            Low priority.
            </summary>
        </member>
        <member name="F:SteamKit2.ContentServerClient.StorageSession.DownloadPriority.Medium">
            <summary>
            Medium priority.
            </summary>
        </member>
        <member name="F:SteamKit2.ContentServerClient.StorageSession.DownloadPriority.High">
            <summary>
            High priority.
            </summary>
        </member>
        <member name="T:SteamKit2.ContentServerClient.StorageSession.FileMode">
            <summary>
            Represents the state of a file within a depot.
            </summary>
        </member>
        <member name="F:SteamKit2.ContentServerClient.StorageSession.FileMode.None">
            <summary>
            No special handling is required.
            </summary>
        </member>
        <member name="F:SteamKit2.ContentServerClient.StorageSession.FileMode.Compressed">
            <summary>
            This file is compressed.
            </summary>
        </member>
        <member name="F:SteamKit2.ContentServerClient.StorageSession.FileMode.EncryptedAndCompressed">
            <summary>
            This file is compressed and encrypted.
            </summary>
        </member>
        <member name="F:SteamKit2.ContentServerClient.StorageSession.FileMode.Encrypted">
            <summary>
            This file is encrypted.
            </summary>
        </member>
        <member name="T:SteamKit2.ContentServerClient.PackageSession">
            <summary>
            This represents a storage session with a package server, used to download client updates.
            </summary>
        </member>
        <member name="M:SteamKit2.ContentServerClient.PackageSession.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SteamKit2.ContentServerClient.PackageSession.DownloadPackage(System.String)">
            <summary>
            Downloads the specified package file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>A byte array representing the file.</returns>
        </member>
        <member name="P:SteamKit2.ContentServerClient.PackageSession.CellID">
            <summary>
            Gets or sets the cell ID.
            </summary>
            <value>The cell ID.</value>
        </member>
        <member name="T:SteamKit2.ContentServer">
            <summary>
            Represents the public facing information of a Steam2 content server.
            </summary>
        </member>
        <member name="P:SteamKit2.ContentServer.Load">
            <summary>
            Gets the load value of the content server.
            </summary>
        </member>
        <member name="P:SteamKit2.ContentServer.PackageServer">
            <summary>
            Gets the <see cref="T:System.Net.IPEndPoint"/> of the package server.
            </summary>
        </member>
        <member name="P:SteamKit2.ContentServer.StorageServer">
            <summary>
            Gets the <see cref="T:System.Net.IPEndPoint"/> of the storage server.
            </summary>
        </member>
        <member name="T:SteamKit2.ContentServerDSClient">
            <summary>
            This client is capable of connecting to the content server directory server.
            This directory server is used for the sole purpose of getting a list of content servers.
            </summary>
        </member>
        <member name="T:SteamKit2.DSClient">
            <summary>
            Represents a client capable of connecting to a generic Directory Server.
            </summary>
        </member>
        <member name="M:SteamKit2.DSClient.GetServerList(SteamKit2.ESteam2ServerType)">
            <summary>
            Gets the server list for a specific server type.
            </summary>
            <param name="type">The server type.</param>
            <returns>A list of servers on success; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:SteamKit2.ContentServerDSClient.GetContentServerList">
            <summary>
            Gets a list of all currently active content servers.
            </summary>
            <returns>A list of servers on success; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:SteamKit2.ContentServerDSClient.GetContentServerList(System.UInt32,System.UInt32,System.UInt32,System.UInt16)">
            <summary>
            Gets a list of content servers that provide specific content.
            </summary>
            <param name="depotId">The depot ID of the content you wish to request.</param>
            <param name="depotVersion">The version ID of the content you wish to request.</param>
            <param name="cellid">A cell ID of the preferred server.</param>
            <param name="maxServers">The maximum number of servers to request.</param>
            <returns>
            A list of servers on success; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="T:SteamKit2.SteamApps">
            <summary>
            This handler is used for interacting with apps and packages on the Steam network.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamApps.GetAppOwnershipTicket(System.UInt32)">
            <summary>
            Requests an app ownership ticket for the specified AppID.
            Results are returned in a <see cref="T:SteamKit2.SteamApps.AppOwnershipTicketCallback"/> callback.
            </summary>
            <param name="appid">The appid to request the ownership ticket of.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamClient.JobCallback`1"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamApps.GetAppInfo(SteamKit2.SteamApps.AppDetails,System.Boolean)">
            <summary>
            Requests app information for a single app. Use the overload for requesting information on a batch of apps.
            Results are returned in a <see cref="T:SteamKit2.SteamApps.AppInfoCallback"/> callback.
            </summary>
            <param name="app">The app to request information for.</param>
            <param name="supportsBatches">if set to <c>true</c>, the request supports batches.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamClient.JobCallback`1"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamApps.GetAppInfo(System.UInt32,System.Boolean)">
            <summary>
            Requests app information for a single app. Use the overload for requesting information on a batch of apps.
            Results are returned in a <see cref="T:SteamKit2.SteamApps.AppInfoCallback"/> callback.
            </summary>
            <param name="app">The app to request information for.</param>
            <param name="supportsBatches">if set to <c>true</c>, the request supports batches.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamClient.JobCallback`1"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamApps.GetAppInfo(System.Collections.Generic.IEnumerable{System.UInt32},System.Boolean)">
            <summary>
            Requests app information for a list of apps.
            Results are returned in a <see cref="T:SteamKit2.SteamApps.AppInfoCallback"/> callback.
            </summary>
            <param name="apps">The apps to request information for.</param>
            <param name="supportsBatches">if set to <c>true</c>, the request supports batches.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamClient.JobCallback`1"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamApps.GetAppInfo(System.Collections.Generic.IEnumerable{SteamKit2.SteamApps.AppDetails},System.Boolean)">
            <summary>
            Requests app information for a list of apps.
            Results are returned in a <see cref="T:SteamKit2.SteamApps.AppInfoCallback"/> callback.
            </summary>
            <param name="apps">The apps to request information for.</param>
            <param name="supportsBatches">if set to <c>true</c>, the request supports batches.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamClient.JobCallback`1"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamApps.GetPackageInfo(System.UInt32,System.Boolean)">
            <summary>
            Requests package information for a single package. Use the overload for requesting information on a batch of packages.
            Results are returned in a <see cref="T:SteamKit2.SteamApps.PackageInfoCallback"/> callback.
            </summary>
            <param name="packageId">The package id to request information for.</param>
            <param name="metaDataOnly">if set to <c>true</c>, request metadata only.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamClient.JobCallback`1"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamApps.GetPackageInfo(System.Collections.Generic.IEnumerable{System.UInt32},System.Boolean)">
            <summary>
            Requests package information for a list of packages.
            Results are returned in a <see cref="T:SteamKit2.SteamApps.PackageInfoCallback"/> callback.
            </summary>
            <param name="packageId">The packages to request information for.</param>
            <param name="metaDataOnly">if set to <c>true</c> to request metadata only.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamClient.JobCallback`1"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamApps.GetAppChanges(System.UInt32,System.Boolean)">
            <summary>
            Requests a list of app changes since the last provided change number value.
            Results are returned in a <see cref="T:SteamKit2.SteamApps.AppChangesCallback"/> callback.
            </summary>
            <param name="lastChangeNumber">The last change number value.</param>
            <param name="sendChangelist">if set to <c>true</c>, request a change list.</param>
        </member>
        <member name="M:SteamKit2.SteamApps.GetDepotDecryptionKey(System.UInt32,System.UInt32)">
            <summary>
            Request the depot decryption key for a specified DepotID.
            Results are returned in a <see cref="T:SteamKit2.SteamApps.DepotKeyCallback"/> callback.
            </summary>
            <param name="depotid">The DepotID to request a decryption key for.</param>
            <param name="appid">The AppID to request the decryption key for.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamClient.JobCallback`1"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamApps.PICSGetAccessTokens(System.Collections.Generic.IEnumerable{System.UInt32},System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Request PICS access tokens for a list of app ids and package ids
            Results are returned in a <see cref="T:SteamKit2.SteamApps.PICSTokensCallback"/> callback.
            </summary>
            <param name="appIds">List of app ids to request access tokens for.</param>
            <param name="packageIds">List of package ids to request access tokens for.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamClient.JobCallback`1"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamApps.PICSGetChangesSince(System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Request changes for apps and packages since a given change number
            Results are returned in a <see cref="T:SteamKit2.SteamApps.PICSChangesCallback"/> callback.
            </summary>
            <param name="lastChangeNumber">Last change number seen.</param>
            <param name="sendAppChangelist">Whether to send app changes.</param>
            <param name="sendPackageChangelist">Whether to send package changes.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamClient.JobCallback`1"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamApps.PICSGetProductInfo(System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Boolean,System.Boolean)">
            <summary>
            Request product information for an app or package
            Results are returned in a <see cref="T:SteamKit2.SteamApps.PICSProductInfoCallback"/> callback.
            </summary>
            <param name="app">App id requested.</param>
            <param name="package">Package id requested.</param>
            <param name="onlyPublic">Whether to send only public information.</param>
            <param name="metaDataOnly">Whether to send only meta data.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamClient.JobCallback`1"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamApps.PICSGetProductInfo(System.Collections.Generic.IEnumerable{System.UInt32},System.Collections.Generic.IEnumerable{System.UInt32},System.Boolean,System.Boolean)">
            <summary>
            Request product information for a list of apps or packages
            Results are returned in a <see cref="T:SteamKit2.SteamApps.PICSProductInfoCallback"/> callback.
            </summary>
            <param name="apps">List of app ids requested.</param>
            <param name="packages">List of package ids requested.</param>
            <param name="onlyPublic">Whether to send only public information.</param>
            <param name="metaDataOnly">Whether to send only meta data.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamClient.JobCallback`1"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamApps.PICSGetProductInfo(System.Collections.Generic.IEnumerable{SteamKit2.SteamApps.PICSRequest},System.Collections.Generic.IEnumerable{SteamKit2.SteamApps.PICSRequest},System.Boolean)">
            <summary>
            Request product information for a list of apps or packages
            Results are returned in a <see cref="T:SteamKit2.SteamApps.PICSProductInfoCallback"/> callback.
            </summary>
            <param name="apps">List of <see cref="T:SteamKit2.SteamApps.PICSRequest"/> requests for apps.</param>
            <param name="packages">List of <see cref="T:SteamKit2.SteamApps.PICSRequest"/> requests for packages.</param>
            <param name="metaDataOnly">Whether to send only meta data.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamClient.JobCallback`1"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamApps.HandleMsg(SteamKit2.IPacketMsg)">
            <summary>
            Handles a client message. This should not be called directly.
            </summary>
            <param name="packetMsg">The packet message that contains the data.</param>
        </member>
        <member name="T:SteamKit2.SteamApps.LicenseListCallback">
            <summary>
            This callback is fired during logon, informing the client of it's available licenses.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.LicenseListCallback.Result">
            <summary>
            Gets the result of the message.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:SteamKit2.SteamApps.LicenseListCallback.LicenseList">
            <summary>
            Gets the license list.
            </summary>
            <value>The license list.</value>
        </member>
        <member name="T:SteamKit2.SteamApps.LicenseListCallback.License">
            <summary>
            Represents a granted license (steam3 subscription) for one or more games.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.LicenseListCallback.License.PackageID">
            <summary>
            Gets the package ID used to identify the license.
            </summary>
            <value>The package ID.</value>
        </member>
        <member name="P:SteamKit2.SteamApps.LicenseListCallback.License.LastChangeNumber">
            <summary>
            Gets the last change number for this license.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.LicenseListCallback.License.TimeCreated">
            <summary>
            Gets the time the license was created.
            </summary>
            <value>The time created.</value>
        </member>
        <member name="P:SteamKit2.SteamApps.LicenseListCallback.License.TimeNextProcess">
            <summary>
            Gets the next process time for the license.
            </summary>
            <value>The next process time.</value>
        </member>
        <member name="P:SteamKit2.SteamApps.LicenseListCallback.License.MinuteLimit">
            <summary>
            Gets the minute limit of the license.
            </summary>
            <value>The minute limit.</value>
        </member>
        <member name="P:SteamKit2.SteamApps.LicenseListCallback.License.MinutesUsed">
            <summary>
            Gets the minutes used of the license.
            </summary>
            <value>The minutes used.</value>
        </member>
        <member name="P:SteamKit2.SteamApps.LicenseListCallback.License.PaymentMethod">
            <summary>
            Gets the payment method used when the license was created.
            </summary>
            <value>The payment method.</value>
        </member>
        <member name="P:SteamKit2.SteamApps.LicenseListCallback.License.LicenseFlags">
            <summary>
            Gets the license flags.
            </summary>
            <value>The license flags.</value>
        </member>
        <member name="P:SteamKit2.SteamApps.LicenseListCallback.License.PurchaseCountryCode">
            <summary>
            Gets the two letter country code where the license was purchased.
            </summary>
            <value>The purchase country code.</value>
        </member>
        <member name="P:SteamKit2.SteamApps.LicenseListCallback.License.LicenseType">
            <summary>
            Gets the type of the license.
            </summary>
            <value>The type of the license.</value>
        </member>
        <member name="P:SteamKit2.SteamApps.LicenseListCallback.License.TerritoryCode">
            <summary>
            Gets the territory code of the license.
            </summary>
            <value>The territory code.</value>
        </member>
        <member name="T:SteamKit2.SteamApps.AppOwnershipTicketCallback">
            <summary>
            This callback is received in response to calling <see cref="M:SteamKit2.SteamApps.GetAppOwnershipTicket(System.UInt32)"/>.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.AppOwnershipTicketCallback.Result">
            <summary>
            Gets the result of requesting the ticket.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.AppOwnershipTicketCallback.AppID">
            <summary>
            Gets the AppID this ticket is for.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.AppOwnershipTicketCallback.Ticket">
            <summary>
            Gets the ticket data.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.AppInfoCallback">
            <summary>
            This callback is received in response to calling <see cref="M:SteamKit2.SteamApps.GetAppInfo(SteamKit2.SteamApps.AppDetails,System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.AppInfoCallback.Apps">
            <summary>
            Gets the list of apps this response contains.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.AppInfoCallback.AppsPending">
            <summary>
            Gets the number of apps pending in this response.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.AppInfoCallback.App">
            <summary>
            Represents a single app in the info response.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.AppInfoCallback.App.Status">
            <summary>
            Gets the status of the app.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.AppInfoCallback.App.AppID">
            <summary>
            Gets the AppID for this app.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.AppInfoCallback.App.ChangeNumber">
            <summary>
            Gets the last change number for this app.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.AppInfoCallback.App.Sections">
            <summary>
            Gets a section data for this app.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.AppInfoCallback.App.AppInfoStatus">
            <summary>
            The status of a requested app.
            </summary>
        </member>
        <member name="F:SteamKit2.SteamApps.AppInfoCallback.App.AppInfoStatus.OK">
            <summary>
            The information for this app was requested successfully.
            </summary>
        </member>
        <member name="F:SteamKit2.SteamApps.AppInfoCallback.App.AppInfoStatus.Unknown">
            <summary>
            This app is unknown.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.PackageInfoCallback">
            <summary>
            This callback is received in response to calling <see cref="M:SteamKit2.SteamApps.GetPackageInfo(System.UInt32,System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PackageInfoCallback.Packages">
            <summary>
            Gets the list of packages this response contains.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PackageInfoCallback.PackagesPending">
            <summary>
            Gets a count of packages pending in this response.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.PackageInfoCallback.Package">
            <summary>
            Represents a single package in this response.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PackageInfoCallback.Package.Status">
            <summary>
            Gets the status of this package.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PackageInfoCallback.Package.PackageID">
            <summary>
            Gets the PackageID for this package.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PackageInfoCallback.Package.ChangeNumber">
            <summary>
            Gets the last change number for this package.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PackageInfoCallback.Package.Hash">
            <summary>
            Gets a hash of the package data for caching purposes.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PackageInfoCallback.Package.Data">
            <summary>
            Gets the data for this package.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.PackageInfoCallback.Package.PackageStatus">
            <summary>
            The status of a package.
            </summary>
        </member>
        <member name="F:SteamKit2.SteamApps.PackageInfoCallback.Package.PackageStatus.OK">
            <summary>
            The information for this package was requested successfully.
            </summary>
        </member>
        <member name="F:SteamKit2.SteamApps.PackageInfoCallback.Package.PackageStatus.Unknown">
            <summary>
            This package is unknown.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.AppChangesCallback">
            <summary>
            This callback is received in response to calling <see cref="M:SteamKit2.SteamApps.GetAppChanges(System.UInt32,System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.AppChangesCallback.AppIDs">
            <summary>
            Gets the list of AppIDs that have changed since the last change number request.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.AppChangesCallback.CurrentChangeNumber">
            <summary>
            Gets the current change number.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.AppChangesCallback.ForceFullUpdate">
            <summary>
            Gets a value indicating whether the backend wishes for the client to perform a full update.
            </summary>
            <value>
            	<c>true</c> if the client should perform a full update; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SteamKit2.SteamApps.DepotKeyCallback">
            <summary>
            This callback is recieved in response to calling <see cref="M:SteamKit2.SteamApps.GetDepotDecryptionKey(System.UInt32,System.UInt32)"/>.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.DepotKeyCallback.Result">
            <summary>
            Gets the result of requesting this encryption key.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.DepotKeyCallback.DepotID">
            <summary>
            Gets the DepotID this encryption key is for.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.DepotKeyCallback.DepotKey">
            <summary>
            Gets the encryption key for this depot.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.GameConnectTokensCallback">
            <summary>
            This callback is fired when the client receives a list of game connect tokens.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.GameConnectTokensCallback.TokensToKeep">
            <summary>
            Gets a count of tokens to keep.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.GameConnectTokensCallback.Tokens">
            <summary>
            Gets the list of tokens.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.VACStatusCallback">
            <summary>
            This callback is fired when the client receives it's VAC banned status.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.VACStatusCallback.BannedApps">
            <summary>
            Gets a list of VAC banned apps the client is banned from.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.PICSTokensCallback">
            <summary>
            This callback is fired when the PICS returns access tokens for a list of appids and packageids
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSTokensCallback.PackageTokensDenied">
            <summary>
            Gets a list of denied package tokens
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSTokensCallback.AppTokensDenied">
            <summary>
            Gets a list of denied app tokens
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSTokensCallback.PackageTokens">
            <summary>
            Dictionary containing requested package tokens
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSTokensCallback.AppTokens">
            <summary>
            Dictionary containing requested package tokens
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.PICSChangesCallback">
            <summary>
            This callback is fired when the PICS returns the changes since the last change number
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSChangesCallback.LastChangeNumber">
            <summary>
            Supplied change number for the request
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSChangesCallback.CurrentChangeNumber">
            <summary>
            Gets the current change number
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSChangesCallback.RequiresFullUpdate">
            <summary>
            If this update requires a full update of the information
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSChangesCallback.PackageChanges">
            <summary>
            Dictionary containing requested package tokens
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSChangesCallback.AppChanges">
            <summary>
            Dictionary containing requested package tokens
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.PICSChangesCallback.PICSChangeData">
            <summary>
            Holds the change data for a single app or package
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSChangesCallback.PICSChangeData.ID">
            <summary>
            App or package ID this change data represents
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSChangesCallback.PICSChangeData.ChangeNumber">
            <summary>
            Current change number of this app
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSChangesCallback.PICSChangeData.NeedsToken">
            <summary>
            Signals if an access token is needed for this request
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.PICSProductInfoCallback">
            <summary>
            This callback is fired when the PICS returns the product information requested
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSProductInfoCallback.MetaDataOnly">
            <summary>
            Gets if this response contains only product metadata
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSProductInfoCallback.ResponsePending">
            <summary>
            Gets if the are more product information responses pending
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSProductInfoCallback.UnknownPackages">
            <summary>
            Gets a list of unknown package ids
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSProductInfoCallback.UnknownApps">
            <summary>
            Gets a list of unknown app ids
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSProductInfoCallback.Apps">
            <summary>
            Dictionary containing requested app info
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSProductInfoCallback.Packages">
            <summary>
            Dictionary containing requested package info
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.PICSProductInfoCallback.PICSProductInfo">
            <summary>
            Represents the information for a single app or package
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSProductInfoCallback.PICSProductInfo.ID">
            <summary>
            Gets the ID of the app or package
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSProductInfoCallback.PICSProductInfo.ChangeNumber">
            <summary>
            Gets the current change number for the app or package
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSProductInfoCallback.PICSProductInfo.MissingToken">
            <summary>
            Gets if an access token was required for the request
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSProductInfoCallback.PICSProductInfo.SHAHash">
            <summary>
            Gets the hash of the content
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSProductInfoCallback.PICSProductInfo.KeyValues">
            <summary>
            Gets the KeyValue info
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSProductInfoCallback.PICSProductInfo.OnlyPublic">
            <summary>
            For an app request, returns if only the public information was requested
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.AppDetails">
            <summary>
            Represents app request details when calling <see cref="M:SteamKit2.SteamApps.GetAppInfo(SteamKit2.SteamApps.AppDetails,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamApps.AppDetails.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.SteamApps.AppDetails"/> class.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamApps.AppDetails.AppID">
            <summary>
            Gets or sets the AppID for this request.
            </summary>
            <value>The AppID.</value>
        </member>
        <member name="P:SteamKit2.SteamApps.AppDetails.SectionFlags">
            <summary>
            Gets or sets the section flags for this request.
            </summary>
            <value>The section flags.</value>
        </member>
        <member name="P:SteamKit2.SteamApps.AppDetails.SectionCRC">
            <summary>
            Gets the Section CRC list for this request.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamApps.PICSRequest">
            <summary>
            Represents a PICS request used for <see cref="M:SteamKit2.SteamApps.PICSGetProductInfo(System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Boolean,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:SteamKit2.SteamApps.PICSRequest.#ctor">
            <summary>
            Instantiate an empty PICS product info request
            </summary>
        </member>
        <member name="M:SteamKit2.SteamApps.PICSRequest.#ctor(System.UInt32)">
            <summary>
             Instantiate a PICS product info request for a given app or package id
            </summary>
            <param name="id">App or package ID</param>
        </member>
        <member name="M:SteamKit2.SteamApps.PICSRequest.#ctor(System.UInt32,System.UInt64,System.Boolean)">
            <summary>
            Instantiate a PICS product info request for a given app or package id and an access token
            </summary>
            <param name="id">App or package ID</param>
            <param name="access_token">PICS access token</param>
            <param name="only_public">Get only public info</param>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSRequest.ID">
            <summary>
            Gets or sets the ID of the app or package being requested
            </summary>
            <value>The ID</value>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSRequest.AccessToken">
            <summary>
            Gets or sets the access token associated with the request
            </summary>
            <value>The access token</value>
        </member>
        <member name="P:SteamKit2.SteamApps.PICSRequest.Public">
            <summary>
            Requests only public app info
            </summary>
            <value>The flag specifying if only public data is requested</value>
        </member>
        <member name="T:SteamKit2.SteamFriends">
            <summary>
            This handler handles all interaction with other users on the Steam3 network.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamFriends.GetPersonaName">
            <summary>
            Gets the local user's persona name.
            </summary>
            <returns>The name.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.SetPersonaName(System.String)">
            <summary>
            Sets the local user's persona name and broadcasts it over the network.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:SteamKit2.SteamFriends.GetPersonaState">
            <summary>
            Gets the local user's persona state.
            </summary>
            <returns>The persona state.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.SetPersonaState(SteamKit2.EPersonaState)">
            <summary>
            Sets the local user's persona state and broadcasts it over the network.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:SteamKit2.SteamFriends.GetFriendCount">
            <summary>
            Gets the friend count of the local user.
            </summary>
            <returns>The number of friends.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.GetFriendByIndex(System.Int32)">
            <summary>
            Gets a friend by index.
            </summary>
            <param name="index">The index.</param>
            <returns>A valid steamid of a friend if the index is in range; otherwise a steamid representing 0.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.GetFriendPersonaName(SteamKit2.SteamID)">
            <summary>
            Gets the persona name of a friend.
            </summary>
            <param name="steamId">The steam id.</param>
            <returns>The name.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.GetFriendPersonaState(SteamKit2.SteamID)">
            <summary>
            Gets the persona state of a friend.
            </summary>
            <param name="steamId">The steam id.</param>
            <returns>The persona state.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.GetFriendRelationship(SteamKit2.SteamID)">
            <summary>
            Gets the relationship of a friend.
            </summary>
            <param name="steamId">The steam id.</param>
            <returns>The relationship of the friend to the local user.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.GetFriendGamePlayedName(SteamKit2.SteamID)">
            <summary>
            Gets the game name of a friend playing a game.
            </summary>
            <param name="steamId">The steam id.</param>
            <returns>The game name of a friend playing a game, or null if they haven't been cached yet.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.GetFriendGamePlayed(SteamKit2.SteamID)">
            <summary>
            Gets the GameID of a friend playing a game.
            </summary>
            <param name="steamId">The steam id.</param>
            <returns>The gameid of a friend playing a game, or 0 if they haven't been cached yet.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.GetFriendAvatar(SteamKit2.SteamID)">
            <summary>
            Gets a SHA-1 hash representing the friend's avatar.
            </summary>
            <param name="steamId">The SteamID of the friend to get the avatar of.</param>
            <returns>A byte array representing a SHA-1 hash of the friend's avatar.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.GetClanCount">
            <summary>
            Gets the count of clans the local user is a member of.
            </summary>
            <returns>The number of clans this user is a member of.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.GetClanByIndex(System.Int32)">
            <summary>
            Gets a clan SteamID by index.
            </summary>
            <param name="index">The index.</param>
            <returns>A valid steamid of a clan if the index is in range; otherwise a steamid representing 0.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.GetClanName(SteamKit2.SteamID)">
            <summary>
            Gets the name of a clan.
            </summary>
            <param name="steamId">The clan SteamID.</param>
            <returns>The name.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.GetClanRelationship(SteamKit2.SteamID)">
            <summary>
            Gets the relationship of a clan.
            </summary>
            <param name="steamId">The clan steamid.</param>
            <returns>The relationship of the clan to the local user.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.GetClanAvatar(SteamKit2.SteamID)">
            <summary>
            Gets a SHA-1 hash representing the clan's avatar.
            </summary>
            <param name="steamId">The SteamID of the clan to get the avatar of.</param>
            <returns>A byte array representing a SHA-1 hash of the clan's avatar, or null if the clan could not be found.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.SendChatMessage(SteamKit2.SteamID,SteamKit2.EChatEntryType,System.String)">
            <summary>
            Sends a chat message to a friend.
            </summary>
            <param name="target">The target to send to.</param>
            <param name="type">The type of message to send.</param>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:SteamKit2.SteamFriends.AddFriend(System.String)">
            <summary>
            Sends a friend request to a user.
            </summary>
            <param name="accountNameOrEmail">The account name or email of the user.</param>
        </member>
        <member name="M:SteamKit2.SteamFriends.AddFriend(SteamKit2.SteamID)">
            <summary>
            Sends a friend request to a user.
            </summary>
            <param name="steamId">The SteamID of the friend to add.</param>
        </member>
        <member name="M:SteamKit2.SteamFriends.RemoveFriend(SteamKit2.SteamID)">
            <summary>
            Removes a friend from your friends list.
            </summary>
            <param name="steamId">The SteamID of the friend to remove.</param>
        </member>
        <member name="M:SteamKit2.SteamFriends.JoinChat(SteamKit2.SteamID)">
            <summary>
            Attempts to join a chat room.
            </summary>
            <param name="steamId">The SteamID of the chat room.</param>
        </member>
        <member name="M:SteamKit2.SteamFriends.LeaveChat(SteamKit2.SteamID)">
            <summary>
            Attempts to leave a chat room.
            </summary>
            <param name="steamId">The SteamID of the chat room.</param>
        </member>
        <member name="M:SteamKit2.SteamFriends.SendChatRoomMessage(SteamKit2.SteamID,SteamKit2.EChatEntryType,System.String)">
            <summary>
            Sends a message to a chat room.
            </summary>
            <param name="steamIdChat">The SteamID of the chat room.</param>
            <param name="type">The message type.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:SteamKit2.SteamFriends.KickChatMember(SteamKit2.SteamID,SteamKit2.SteamID)">
            <summary>
            Kicks the specified chat member from the given chat room.
            </summary>
            <param name="steamIdChat">The SteamID of chat room to kick the member from.</param>
            <param name="steamIdMember">The SteamID of the member to kick from the chat.</param>
        </member>
        <member name="M:SteamKit2.SteamFriends.BanChatMember(SteamKit2.SteamID,SteamKit2.SteamID)">
            <summary>
            Bans the specified chat member from the given chat room.
            </summary>
            <param name="steamIdChat">The SteamID of chat room to ban the member from.</param>
            <param name="steamIdMember">The SteamID of the member to ban from the chat.</param>
        </member>
        <member name="M:SteamKit2.SteamFriends.UnbanChatMember(SteamKit2.SteamID,SteamKit2.SteamID)">
            <summary>
            Unbans the specified SteamID from the given chat room.
            </summary>
            <param name="steamIdChat">The SteamID of chat room to unban the member from.</param>
            <param name="steamIdMember">The SteamID of the member to unban from the chat.</param>
        </member>
        <member name="M:SteamKit2.SteamFriends.RequestFriendInfo(System.Collections.Generic.IEnumerable{SteamKit2.SteamID},SteamKit2.EClientPersonaStateFlag)">
            <summary>
            Requests persona state for a list of specified SteamID.
            Results are returned in <see cref="T:SteamKit2.SteamFriends.PersonaStateCallback"/>.
            </summary>
            <param name="steamIdList">A list of SteamIDs to request the info of.</param>
            <param name="requestedInfo">The requested info flags.</param>
        </member>
        <member name="M:SteamKit2.SteamFriends.RequestFriendInfo(SteamKit2.SteamID,SteamKit2.EClientPersonaStateFlag)">
            <summary>
            Requests persona state for a specified SteamID.
            Results are returned in <see cref="T:SteamKit2.SteamFriends.PersonaStateCallback"/>.
            </summary>
            <param name="steamId">A SteamID to request the info of.</param>
            <param name="requestedInfo">The requested info flags.</param>
        </member>
        <member name="M:SteamKit2.SteamFriends.IgnoreFriend(SteamKit2.SteamID,System.Boolean)">
            <summary>
            Ignores or unignores a friend on Steam.
            Results are returned in a <see cref="T:SteamKit2.SteamFriends.IgnoreFriendCallback"/>.
            </summary>
            <param name="steamId">The SteamID of the friend to ignore or unignore.</param>
            <param name="setIgnore">if set to <c>true</c>, the friend will be ignored; otherwise, they will be unignored.</param>
            <returns>The Job ID of the request. This can be used to find the appropriate <see cref="T:SteamKit2.SteamClient.JobCallback`1"/>.</returns>
        </member>
        <member name="M:SteamKit2.SteamFriends.HandleMsg(SteamKit2.IPacketMsg)">
            <summary>
            Handles a client message. This should not be called directly.
            </summary>
            <param name="packetMsg">The packet message that contains the data.</param>
        </member>
        <member name="T:SteamKit2.SteamFriends.PersonaStateCallback">
            <summary>
            This callback is fired in response to someone changing their friend details over the network.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.StatusFlags">
            <summary>
            Gets the status flags. This shows what has changed.
            </summary>
            <value>The status flags.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.FriendID">
            <summary>
            Gets the friend ID.
            </summary>
            <value>The friend ID.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.State">
            <summary>
            Gets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.GameAppID">
            <summary>
            Gets the game app ID.
            </summary>
            <value>The game app ID.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.GameID">
            <summary>
            Gets the game ID.
            </summary>
            <value>The game ID.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.GameName">
            <summary>
            Gets the name of the game.
            </summary>
            <value>The name of the game.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.GameServerIP">
            <summary>
            Gets the game server IP.
            </summary>
            <value>The game server IP.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.GameServerPort">
            <summary>
            Gets the game server port.
            </summary>
            <value>The game server port.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.QueryPort">
            <summary>
            Gets the query port.
            </summary>
            <value>The query port.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.SourceSteamID">
            <summary>
            Gets the source steam ID.
            </summary>
            <value>The source steam ID.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.GameDataBlob">
            <summary>
            Gets the game data blob.
            </summary>
            <value>The game data blob.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.AvatarHash">
            <summary>
            Gets the avatar hash.
            </summary>
            <value>The avatar hash.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.LastLogOff">
            <summary>
            Gets the last log off.
            </summary>
            <value>The last log off.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.LastLogOn">
            <summary>
            Gets the last log on.
            </summary>
            <value>The last log on.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.ClanRank">
            <summary>
            Gets the clan rank.
            </summary>
            <value>The clan rank.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.ClanTag">
            <summary>
            Gets the clan tag.
            </summary>
            <value>The clan tag.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.OnlineSessionInstances">
            <summary>
            Gets the online session instances.
            </summary>
            <value>The online session instances.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.PersonaStateCallback.PublishedSessionID">
            <summary>
            Gets the published session ID.
            </summary>
            <value>The published session ID.</value>
        </member>
        <member name="T:SteamKit2.SteamFriends.FriendsListCallback">
            <summary>
            This callback is fired when the client receives a list of friends.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.FriendsListCallback.Incremental">
            <summary>
            Gets a value indicating whether this <see cref="T:SteamKit2.SteamFriends.FriendsListCallback"/> is an incremental update.
            </summary>
            <value><c>true</c> if incremental; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.FriendsListCallback.FriendList">
            <summary>
            Gets the friend list.
            </summary>
            <value>The friend list.</value>
        </member>
        <member name="T:SteamKit2.SteamFriends.FriendsListCallback.Friend">
            <summary>
            Represents a single friend entry in a client's friendlist.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.FriendsListCallback.Friend.SteamID">
            <summary>
            Gets the SteamID of the friend.
            </summary>
            <value>The SteamID.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.FriendsListCallback.Friend.Relationship">
            <summary>
            Gets the relationship to this friend.
            </summary>
            <value>The relationship.</value>
        </member>
        <member name="T:SteamKit2.SteamFriends.FriendMsgCallback">
            <summary>
            This callback is fired in response to receiving a message from a friend.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.FriendMsgCallback.Sender">
            <summary>
            Gets or sets the sender.
            </summary>
            <value>The sender.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.FriendMsgCallback.EntryType">
            <summary>
            Gets the chat entry type.
            </summary>
            <value>The chat entry type.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.FriendMsgCallback.FromLimitedAccount">
            <summary>
            Gets a value indicating whether this message is from a limited account.
            </summary>
            <value><c>true</c> if this message is from a limited account; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.FriendMsgCallback.Message">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:SteamKit2.SteamFriends.FriendAddedCallback">
            <summary>
            This callback is fired in response to adding a user to your friends list.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.FriendAddedCallback.Result">
            <summary>
            Gets the result of the request.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.FriendAddedCallback.SteamID">
            <summary>
            Gets the SteamID of the friend that was added.
            </summary>
            <value>The SteamID.</value>
        </member>
        <member name="P:SteamKit2.SteamFriends.FriendAddedCallback.PersonaName">
            <summary>
            Gets the persona name of the friend.
            </summary>
            <value>The persona name.</value>
        </member>
        <member name="T:SteamKit2.SteamFriends.ChatEnterCallback">
            <summary>
            This callback is fired in response to attempting to join a chat.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatEnterCallback.ChatID">
            <summary>
            Gets SteamID of the chat room.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatEnterCallback.FriendID">
            <summary>
            Gets the friend ID.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatEnterCallback.ChatRoomType">
            <summary>
            Gets the type of the chat room.
            </summary>
            <value>
            The type of the chat room.
            </value>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatEnterCallback.OwnerID">
            <summary>
            Gets the SteamID of the chat room owner.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatEnterCallback.ClanID">
            <summary>
            Gets clan SteamID that owns this chat room.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatEnterCallback.ChatFlags">
            <summary>
            Gets the chat flags.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatEnterCallback.EnterResponse">
            <summary>
            Gets the chat enter response.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamFriends.ChatMsgCallback">
            <summary>
            This callback is fired when a chat room message arrives.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatMsgCallback.ChatterID">
            <summary>
            Gets the SteamID of the chatter.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatMsgCallback.ChatRoomID">
            <summary>
            Gets the SteamID of the chat room.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatMsgCallback.ChatMsgType">
            <summary>
            Gets chat entry type.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatMsgCallback.Message">
            <summary>
            Gets the message.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamFriends.ChatMemberInfoCallback">
            <summary>
            This callback is fired in response to chat member info being recieved.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatMemberInfoCallback.ChatRoomID">
            <summary>
            Gets SteamId of the chat room.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatMemberInfoCallback.Type">
            <summary>
            Gets the info type.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatMemberInfoCallback.StateChangeInfo">
            <summary>
            Gets the state change info for <see cref="F:SteamKit2.EChatInfoType.StateChange"/> member info updates.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamFriends.ChatMemberInfoCallback.StateChangeDetails">
            <summary>
            Represents state change information.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatMemberInfoCallback.StateChangeDetails.ChatterActedOn">
            <summary>
            Gets the SteamID of the chatter that was acted on.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatMemberInfoCallback.StateChangeDetails.StateChange">
            <summary>
            Gets the state change for the acted on SteamID.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatMemberInfoCallback.StateChangeDetails.ChatterActedBy">
            <summary>
            Gets the SteamID of the chatter that acted on <see cref="P:SteamKit2.SteamFriends.ChatMemberInfoCallback.StateChangeDetails.ChatterActedOn"/>.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamFriends.ChatActionResultCallback">
            <summary>
            This callback is fired when a chat action has completed.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatActionResultCallback.ChatRoomID">
            <summary>
            Gets the SteamID of the chat room the action was performed in.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatActionResultCallback.ChatterID">
            <summary>
            Gets the SteamID of the chat member the action was performed on.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatActionResultCallback.Action">
            <summary>
            Gets the chat action that was performed.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatActionResultCallback.Result">
            <summary>
            Gets the result of the chat action.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamFriends.ChatInviteCallback">
            <summary>
            This callback is fired when a chat invite is recieved.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatInviteCallback.InvitedID">
            <summary>
            Gets the SteamID of the user who was invited to the chat.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatInviteCallback.ChatRoomID">
            <summary>
            Gets the chat room SteamID.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatInviteCallback.PatronID">
            <summary>
            Gets the SteamID of the user who performed the invitation.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatInviteCallback.ChatRoomType">
            <summary>
            Gets the chat room type.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatInviteCallback.FriendChatID">
            <summary>
            Gets the SteamID of the chat friend.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatInviteCallback.ChatRoomName">
            <summary>
            Gets the name of the chat room.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.ChatInviteCallback.GameID">
            <summary>
            Gets the GameID associated with this chat room, if it's a game lobby.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamFriends.IgnoreFriendCallback">
            <summary>
            This callback is fired in response to an attempt at ignoring a friend.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamFriends.IgnoreFriendCallback.Result">
            <summary>
            Gets the result of ignoring a friend.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamUser">
            <summary>
            This handler handles all user log on/log off related actions and callbacks.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamUser.LogOn(SteamKit2.SteamUser.LogOnDetails)">
            <summary>
            Logs the client into the Steam3 network.
            The client should already have been connected at this point.
            Results are returned in a <see cref="T:SteamKit2.SteamUser.LoggedOnCallback"/>.
            </summary>
            <param name="details">The details to use for logging on.</param>
            <exception cref="T:System.ArgumentNullException">No logon details were provided.</exception>
            <exception cref="T:System.ArgumentException">Username or password are not set within <paramref name="details"/>.</exception>
        </member>
        <member name="M:SteamKit2.SteamUser.LogOnAnonymous">
            <summary>
            Logs the client into the Steam3 network as an anonymous user.
            The client should already have been connected at this point.
            Results are returned in a <see cref="T:SteamKit2.SteamUser.LoggedOnCallback"/>.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamUser.LogOff">
            <summary>
            Logs the user off of the Steam3 network.
            This method does not disconnect the client.
            Results are returned in a <see cref="T:SteamKit2.SteamUser.LoggedOffCallback"/>.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamUser.SendMachineAuthResponse(SteamKit2.SteamUser.MachineAuthDetails)">
            <summary>
            Sends a machine auth response.
            This should normally be used in response to a <see cref="T:SteamKit2.SteamUser.UpdateMachineAuthCallback"/>.
            </summary>
            <param name="details">The details pertaining to the response.</param>
        </member>
        <member name="M:SteamKit2.SteamUser.HandleMsg(SteamKit2.IPacketMsg)">
            <summary>
            Handles a client message. This should not be called directly.
            </summary>
            <param name="packetMsg">The packet message that contains the data.</param>
        </member>
        <member name="P:SteamKit2.SteamUser.SteamID">
            <summary>
            Gets the SteamID of this client. This value is assigned after a logon attempt has succeeded.
            </summary>
            <value>The SteamID.</value>
        </member>
        <member name="T:SteamKit2.SteamUser.LoggedOnCallback">
            <summary>
            This callback is returned in response to an attempt to log on to the Steam3 network through <see cref="T:SteamKit2.SteamUser"/>.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOnCallback.Result">
            <summary>
            Gets the result of the logon.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOnCallback.ExtendedResult">
            <summary>
            Gets the extended result of the logon.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOnCallback.OutOfGameSecsPerHeartbeat">
            <summary>
            Gets the out of game secs per heartbeat value.
            This is used internally by SteamKit to initialize heartbeating.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOnCallback.InGameSecsPerHeartbeat">
            <summary>
            Gets the in game secs per heartbeat value.
            This is used internally by SteamKit to initialize heartbeating.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOnCallback.PublicIP">
            <summary>
            Gets or sets the public IP of the client
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOnCallback.ServerTime">
            <summary>
            Gets the Steam3 server time.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOnCallback.AccountFlags">
            <summary>
            Gets the account flags assigned by the server.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOnCallback.ClientSteamID">
            <summary>
            Gets the client steam ID.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOnCallback.EmailDomain">
            <summary>
            Gets the email domain.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOnCallback.CellID">
            <summary>
            Gets the Steam2 CellID.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOnCallback.CellIDPingThreshold">
            <summary>
            Gets the Steam2 CellID ping threshold.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOnCallback.Steam2Ticket">
            <summary>
            Gets the Steam2 ticket.
            This is used for authenticated content downloads in Steam2.
            This field will only be set when <see cref="P:SteamKit2.SteamUser.LogOnDetails.RequestSteam2Ticket"/> has been set to <c>true</c>.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOnCallback.UsePICS">
            <summary>
            Gets a value indicating whether the client should use PICS.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOnCallback.WebAPIUserNonce">
            <summary>
            Gets the WebAPI authentication user nonce.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOnCallback.IPCountryCode">
            <summary>
            Gets the IP country code.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamUser.LoggedOffCallback">
            <summary>
            This callback is returned in response to a log off attempt, or when the client is told to log off by the server.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoggedOffCallback.Result">
            <summary>
            Gets the result of the log off.
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:SteamKit2.SteamUser.LoginKeyCallback">
            <summary>
            This callback is returned some time after logging onto the network.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LoginKeyCallback.LoginKey">
            <summary>
            Gets the login key.
            </summary>
            <value>The login key.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.LoginKeyCallback.UniqueID">
            <summary>
            Gets the unique ID.
            </summary>
            <value>The unique ID.</value>
        </member>
        <member name="T:SteamKit2.SteamUser.SessionTokenCallback">
            <summary>
            This callback is fired when the client recieves it's unique Steam3 session token. This token is used for authenticated content downloading in Steam2.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.SessionTokenCallback.SessionToken">
            <summary>
            Gets the Steam3 session token used for authenticating to various other services.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamUser.AccountInfoCallback">
            <summary>
            This callback is recieved when account information is recieved from the network.
            This generally happens after logon.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.AccountInfoCallback.PersonaName">
            <summary>
            Gets the last recorded persona name used by this account.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.AccountInfoCallback.Country">
            <summary>
            Gets the country this account is connected from.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.AccountInfoCallback.PasswordSalt">
            <summary>
            Gets the salt used for the password.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.AccountInfoCallback.PasswordSHADisgest">
            <summary>
            Gets the SHA-1 disgest of the password.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.AccountInfoCallback.CountAuthedComputers">
            <summary>
            Gets the count of SteamGuard authenticated computers.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.AccountInfoCallback.LockedWithIPT">
            <summary>
            Gets a value indicating whether this account is locked with IPT.
            </summary>
            <value>
              <c>true</c> if this account is locked with IPT; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.SteamUser.AccountInfoCallback.AccountFlags">
            <summary>
            Gets the account flags for this account.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.AccountInfoCallback.FacebookID">
            <summary>
            Gets the facebook ID of this account if it is linked with facebook.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.AccountInfoCallback.FacebookName">
            <summary>
            Gets the facebook name if this account is linked with facebook.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamUser.WalletInfoCallback">
            <summary>
            This callback is recieved when wallet info is recieved from the network.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.WalletInfoCallback.HasWallet">
            <summary>
            Gets a value indicating whether this instance has wallet data.
            </summary>
            <value>
            	<c>true</c> if this instance has wallet data; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.SteamUser.WalletInfoCallback.Currency">
            <summary>
            Gets the currency code for this wallet.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.WalletInfoCallback.Balance">
            <summary>
            Gets the balance of the wallet, in cents.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamUser.UpdateMachineAuthCallback">
            <summary>
            This callback is recieved when the backend wants the client to update it's local machine authentication data.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.UpdateMachineAuthCallback.Data">
            <summary>
            Gets the sentry file data that should be written.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.UpdateMachineAuthCallback.BytesToWrite">
            <summary>
            Gets the number of bytes to write.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.UpdateMachineAuthCallback.Offset">
            <summary>
            Gets the offset to write to.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.UpdateMachineAuthCallback.FileName">
            <summary>
            Gets the name of the sentry file to write.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.UpdateMachineAuthCallback.OneTimePassword">
            <summary>
            Gets the one-time-password details.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamUser.UpdateMachineAuthCallback.OTPDetails">
            <summary>
            Represents various one-time-password details.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamUser.UpdateMachineAuthCallback.OTPDetails.op_Implicit(SteamKit2.SteamUser.UpdateMachineAuthCallback.OTPDetails)~SteamKit2.SteamUser.MachineAuthDetails.OTPDetails">
            <summary>
            Implicitly converts <see cref="T:SteamKit2.SteamUser.UpdateMachineAuthCallback.OTPDetails"/> into <see cref="T:SteamKit2.SteamUser.MachineAuthDetails.OTPDetails"/>.
            </summary>
            <param name="otp">The details to convert.</param>
            <returns></returns>
        </member>
        <member name="P:SteamKit2.SteamUser.UpdateMachineAuthCallback.OTPDetails.Type">
            <summary>
            Gets the OTP type.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.UpdateMachineAuthCallback.OTPDetails.Identifier">
            <summary>
            Gets the OTP identifier.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.UpdateMachineAuthCallback.OTPDetails.SharedSecret">
            <summary>
            Gets the OTP shared secret.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.UpdateMachineAuthCallback.OTPDetails.TimeDrift">
            <summary>
            Gets the OTP time drift.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamUser.LogOnDetails">
            <summary>
            Represents the details required to log into Steam3 as a user.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamUser.LogOnDetails.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.SteamUser.LogOnDetails"/> class.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.LogOnDetails.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.LogOnDetails.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.LogOnDetails.AuthCode">
            <summary>
            Gets or sets the Steam Guard auth code used to login. This is the code sent to the user's email.
            </summary>
            <value>The auth code.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.LogOnDetails.SentryFileHash">
            <summary>
            Gets or sets the sentry file hash for this logon attempt, or null if no sentry file is available.
            </summary>
            <value>The sentry file hash.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.LogOnDetails.AccountInstance">
            <summary>
            Gets or sets the account instance. 1 for the PC instance or 2 for the Console (PS3) instance.
            </summary>
            <value>The account instance.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.LogOnDetails.RequestSteam2Ticket">
            <summary>
            Gets or sets a value indicating whether to request the Steam2 ticket.
            This is an optional request only needed for Steam2 content downloads.
            </summary>
            <value>
              <c>true</c> if the Steam2 ticket should be requested; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SteamKit2.SteamUser.MachineAuthDetails">
            <summary>
            Represents details required to complete a machine auth request.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamUser.MachineAuthDetails.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.SteamUser.MachineAuthDetails"/> class.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.MachineAuthDetails.JobID">
            <summary>
            Gets or sets the target Job ID for the request.
            This is provided in the <see cref="T:SteamKit2.SteamClient.JobCallback`1"/> for a <see cref="T:SteamKit2.SteamUser.UpdateMachineAuthCallback"/>.
            </summary>
            <value>The Job ID.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.MachineAuthDetails.Result">
            <summary>
            Gets or sets the result of updating the machine auth.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.MachineAuthDetails.BytesWritten">
            <summary>
            Gets or sets the number of bytes written for the sentry file.
            </summary>
            <value>The number of bytes written.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.MachineAuthDetails.Offset">
            <summary>
            Gets or sets the offset within the sentry file that was written.
            </summary>
            <value>The offset.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.MachineAuthDetails.FileName">
            <summary>
            Gets or sets the filename of the sentry file that was written.
            </summary>
            <value>The name of the sentry file.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.MachineAuthDetails.FileSize">
            <summary>
            Gets or sets the size of the sentry file.
            </summary>
            <value>/ The size of the sentry file.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.MachineAuthDetails.LastError">
            <summary>
            Gets or sets the last error that occurred while writing the sentry file, or 0 if no error occurred.
            </summary>
            <value>The last error.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.MachineAuthDetails.SentryFileHash">
            <summary>
            Gets or sets the SHA-1 hash of the sentry file.
            </summary>
            <value>The sentry file hash.</value>
        </member>
        <member name="P:SteamKit2.SteamUser.MachineAuthDetails.OneTimePassword">
            <summary>
            Gets or sets the one-time-password details.
            </summary>
            <value>The one time password details.</value>
        </member>
        <member name="T:SteamKit2.SteamUser.MachineAuthDetails.OTPDetails">
            <summary>
            The One-Time-Password details for this response.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.MachineAuthDetails.OTPDetails.Type">
            <summary>
            Gets or sets the one-time-password type.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.MachineAuthDetails.OTPDetails.Identifier">
            <summary>
            Gets or sets the one-time-password identifier.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamUser.MachineAuthDetails.OTPDetails.Value">
            <summary>
            Gets or sets the one-time-password value.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamClient">
            <summary>
            Represents a single client that connects to the Steam3 network.
            This class is also responsible for handling the registration of client message handlers and callbacks.
            </summary>
        </member>
        <member name="T:SteamKit2.Internal.CMClient">
            <summary>
            This base client handles the underlying connection to a CM server. This class should not be use directly, but through the <see cref="T:SteamKit2.SteamClient"/> class.
            </summary>
        </member>
        <member name="F:SteamKit2.Internal.CMClient.Servers">
            <summary>
            Bootstrap list of CM servers.
            </summary>
        </member>
        <member name="M:SteamKit2.Internal.CMClient.#ctor(System.Net.Sockets.ProtocolType)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.Internal.CMClient"/> class with a specific connection type.
            </summary>
            <param name="type">The connection type to use.</param>
            <exception cref="T:System.NotSupportedException">
            The provided <see cref="T:System.Net.Sockets.ProtocolType"/> is not supported.
            Only Tcp and Udp are available.
            </exception>
        </member>
        <member name="M:SteamKit2.Internal.CMClient.Connect(System.Boolean)">
            <summary>
            Connects this client to a Steam3 server.
            This begins the process of connecting and encrypting the data channel between the client and the server.
            Results are returned asynchronously in a <see cref="T:SteamKit2.SteamClient.ConnectedCallback"/>.
            If the server that SteamKit attempts to connect to is down, a <see cref="T:SteamKit2.SteamClient.DisconnectedCallback"/>
            will be posted instead.
            SteamKit will not attempt to reconnect to Steam, you must handle this callback and call Connect again
            preferrably after a short delay.
            </summary>
            <param name="bEncrypted">
            If set to <c>true</c> the underlying connection to Steam will be encrypted. This is the default mode of communication.
            Previous versions of SteamKit always used encryption.
            </param>
        </member>
        <member name="M:SteamKit2.Internal.CMClient.Disconnect">
            <summary>
            Disconnects this client.
            </summary>
        </member>
        <member name="M:SteamKit2.Internal.CMClient.Send(SteamKit2.IClientMsg)">
            <summary>
            Sends the specified client message to the server.
            This method automatically assigns the correct SessionID and SteamID of the message.
            </summary>
            <param name="msg">The client message to send.</param>
        </member>
        <member name="M:SteamKit2.Internal.CMClient.GetServersOfType(SteamKit2.EServerType)">
            <summary>
            Returns the list of servers matching the given type
            </summary>
            <param name="type">Server type requested</param>
            <returns>List of server endpoints</returns>
        </member>
        <member name="M:SteamKit2.Internal.CMClient.OnClientMsgReceived(SteamKit2.IPacketMsg)">
            <summary>
            Called when a client message is received from the network.
            </summary>
            <param name="packetMsg">The packet message.</param>
        </member>
        <member name="M:SteamKit2.Internal.CMClient.OnClientDisconnected">
            <summary>
            Called when the client is physically disconnected from Steam3.
            </summary>
        </member>
        <member name="M:SteamKit2.Internal.CMClient.OnClientConnected">
            <summary>
            Called when the client is connected to Steam3 and is ready to send messages.
            </summary>
        </member>
        <member name="P:SteamKit2.Internal.CMClient.LocalIP">
            <summary>
            Returns the the local IP of this client.
            </summary>
            <returns>The local IP.</returns>
        </member>
        <member name="P:SteamKit2.Internal.CMClient.ConnectedUniverse">
            <summary>
            Gets the connected universe of this client.
            This value will be <see cref="F:SteamKit2.EUniverse.Invalid"/> if the client is logged off of Steam.
            </summary>
            <value>The universe.</value>
        </member>
        <member name="P:SteamKit2.Internal.CMClient.SessionID">
            <summary>
            Gets the session ID of this client. This value is assigned after a logon attempt has succeeded.
            This value will be <c>null</c> if the client is logged off of Steam.
            </summary>
            <value>The session ID.</value>
        </member>
        <member name="P:SteamKit2.Internal.CMClient.SteamID">
            <summary>
            Gets the SteamID of this client. This value is assigned after a logon attempt has succeeded.
            This value will be <c>null</c> if the client is logged off of Steam.
            </summary>
            <value>The SteamID.</value>
        </member>
        <member name="M:SteamKit2.SteamClient.#ctor(System.Net.Sockets.ProtocolType)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.SteamClient"/> class with a specific connection type.
            </summary>
            <param name="type">The connection type to use.</param>
        </member>
        <member name="M:SteamKit2.SteamClient.AddHandler(SteamKit2.ClientMsgHandler)">
            <summary>
            Adds a new handler to the internal list of message handlers.
            </summary>
            <param name="handler">The handler to add.</param>
            <exception cref="T:System.InvalidOperationException">A handler of that type is already registered.</exception>
        </member>
        <member name="M:SteamKit2.SteamClient.RemoveHandler(System.Type)">
            <summary>
            Removes a registered handler by name.
            </summary>
            <param name="handler">The handler name to remove.</param>
        </member>
        <member name="M:SteamKit2.SteamClient.RemoveHandler(SteamKit2.ClientMsgHandler)">
            <summary>
            Removes a registered handler.
            </summary>
            <param name="handler">The handler to remove.</param>
        </member>
        <member name="M:SteamKit2.SteamClient.GetHandler``1">
            <summary>
            Returns a registered handler.
            </summary>
            <typeparam name="T">The type of the handler to cast to. Must derive from ClientMsgHandler.</typeparam>
            <returns>
            A registered handler on success, or null if the handler could not be found.
            </returns>
        </member>
        <member name="M:SteamKit2.SteamClient.GetCallback">
            <summary>
            Gets the next callback object in the queue.
            This function does not dequeue the callback, you must call FreeLastCallback after processing it.
            </summary>
            <returns>The next callback in the queue, or null if no callback is waiting.</returns>
        </member>
        <member name="M:SteamKit2.SteamClient.GetCallback(System.Boolean)">
            <summary>
            Gets the next callback object in the queue, and optionally frees it.
            </summary>
            <param name="freeLast">if set to <c>true</c> this function also frees the last callback if one existed.</param>
            <returns>The next callback in the queue, or null if no callback is waiting.</returns>
        </member>
        <member name="M:SteamKit2.SteamClient.WaitForCallback">
            <summary>
            Blocks the calling thread until a callback object is posted to the queue.
            This function does not dequeue the callback, you must call FreeLastCallback after processing it.
            </summary>
            <returns>The callback object from the queue.</returns>
        </member>
        <member name="M:SteamKit2.SteamClient.WaitForCallback(System.TimeSpan)">
            <summary>
            Blocks the calling thread until a callback object is posted to the queue, or null after the timeout has elapsed.
            This function does not dequeue the callback, you must call FreeLastCallback after processing it.
            </summary>
            <param name="timeout">The length of time to block.</param>
            <returns>A callback object from the queue if a callback has been posted, or null if the timeout has elapsed.</returns>
        </member>
        <member name="M:SteamKit2.SteamClient.WaitForCallback(System.Boolean)">
            <summary>
            Blocks the calling thread until a callback object is posted to the queue, and optionally frees it.
            </summary>
            <param name="freeLast">if set to <c>true</c> this function also frees the last callback.</param>
            <returns>The callback object from the queue.</returns>
        </member>
        <member name="M:SteamKit2.SteamClient.WaitForCallback(System.Boolean,System.TimeSpan)">
            <summary>
            Blocks the calling thread until a callback object is posted to the queue, and optionally frees it.
            </summary>
            <param name="freeLast">if set to <c>true</c> this function also frees the last callback.</param>
            <param name="timeout">The length of time to block.</param>
            <returns>A callback object from the queue if a callback has been posted, or null if the timeout has elapsed.</returns>
        </member>
        <member name="M:SteamKit2.SteamClient.FreeLastCallback">
            <summary>
            Frees the last callback in the queue.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamClient.PostCallback(SteamKit2.CallbackMsg)">
            <summary>
            Posts a callback to the queue. This is normally used directly by client message handlers.
            </summary>
            <param name="msg">The message.</param>
        </member>
        <member name="M:SteamKit2.SteamClient.GetNextJobID">
            <summary>
            Returns the next available JobID for job based messages.
            This function is thread-safe.
            </summary>
            <returns>The next available JobID.</returns>
        </member>
        <member name="M:SteamKit2.SteamClient.OnClientMsgReceived(SteamKit2.IPacketMsg)">
            <summary>
            Called when a client message is received from the network.
            </summary>
            <param name="packetMsg">The packet message.</param>
        </member>
        <member name="M:SteamKit2.SteamClient.OnClientDisconnected">
            <summary>
            Called when the client is physically disconnected from Steam3.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamClient.OnClientConnected">
            <summary>
            Called when the client is connected to Steam3 and is ready to send messages.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamClient.BaseJobCallback">
            <summary>
            This callback serves as the base class for all job based callbacks.
            This allows you to retrieve results based on the Job ID without knowing the inner callback type.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamClient.BaseJobCallback.JobID">
            <summary>
            Gets the Job ID of this callback. For client based jobs, this will match the Job ID of a function call.
            For server based jobs, this is provided to respond to the correct job.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamClient.BaseJobCallback.CallbackType">
            <summary>
            Gets the type of the callback.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamClient.JobCallback`1">
            <summary>
            This callback is received when a job related operation on the backend has completed, or a client operation should begin.
            </summary>
            <typeparam name="T">The inner callback this job represents.</typeparam>
        </member>
        <member name="P:SteamKit2.SteamClient.JobCallback`1.CallbackType">
            <summary>
            Gets the type of the callback.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamClient.JobCallback`1.Callback">
            <summary>
            Gets the inner callback message for this job.
            </summary>
        </member>
        <member name="T:SteamKit2.SteamClient.ConnectedCallback">
            <summary>
            This callback is received after attempting to connect to the Steam network.
            </summary>
        </member>
        <member name="P:SteamKit2.SteamClient.ConnectedCallback.Result">
            <summary>
            Gets the result of the connection attempt.
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:SteamKit2.SteamClient.DisconnectedCallback">
            <summary>
            This callback is received when the steamclient is physically disconnected from the Steam network.
            </summary>
        </member>
        <member name="T:SteamKit2.GameID">
            <summary>
            This 64bit structure represents an app, mod, shortcut, or p2p file on the Steam network.
            </summary>
        </member>
        <member name="M:SteamKit2.GameID.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.GameID"/> class.
            </summary>
        </member>
        <member name="M:SteamKit2.GameID.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.GameID"/> class.
            </summary>
            <param name="id">The 64bit integer to assign this GameID from.</param>
        </member>
        <member name="M:SteamKit2.GameID.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.GameID"/> class.
            </summary>
            <param name="nAppID">The 32bit app id to assign this GameID from.</param>
        </member>
        <member name="M:SteamKit2.GameID.Set(System.UInt64)">
            <summary>
            Sets the various components of this GameID from a 64bit integer form.
            </summary>
            <param name="gameId">The 64bit integer to assign this GameID from.</param>
        </member>
        <member name="M:SteamKit2.GameID.ToUInt64">
            <summary>
            Converts this GameID into it's 64bit integer form.
            </summary>
            <returns>A 64bit integer representing this GameID.</returns>
        </member>
        <member name="M:SteamKit2.GameID.op_Implicit(SteamKit2.GameID)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:SteamKit2.GameID"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="gid">The GameID to convert..</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SteamKit2.GameID.op_Implicit(SteamKit2.GameID)~System.UInt64">
            <summary>
            Performs an implicit conversion from <see cref="T:SteamKit2.GameID"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="gid">The GameId to convert.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SteamKit2.GameID.op_Implicit(System.UInt64)~SteamKit2.GameID">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:SteamKit2.GameID"/>.
            </summary>
            <param name="id">The 64bit integer representing a GameID to convert.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SteamKit2.GameID.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SteamKit2.GameID.Equals(SteamKit2.GameID)">
            <summary>
            Determines whether the specified <see cref="T:SteamKit2.GameID"/> is equal to this instance.
            </summary>
            <param name="gid">The <see cref="T:SteamKit2.GameID"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:SteamKit2.GameID"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SteamKit2.GameID.op_Equality(SteamKit2.GameID,SteamKit2.GameID)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">The left side GameID.</param>
            <param name="b">The right side GameID.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SteamKit2.GameID.op_Inequality(SteamKit2.GameID,SteamKit2.GameID)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">The left side GameID.</param>
            <param name="b">The right side GameID.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SteamKit2.GameID.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:SteamKit2.GameID.AppID">
            <summary>
            Gets or sets the app id.
            </summary>
            <value>
            The app IDid
            </value>
        </member>
        <member name="P:SteamKit2.GameID.AppType">
            <summary>
            Gets or sets the type of the app.
            </summary>
            <value>
            The type of the app.
            </value>
        </member>
        <member name="P:SteamKit2.GameID.ModID">
            <summary>
            Gets or sets the mod id.
            </summary>
            <value>
            The mod ID.
            </value>
        </member>
        <member name="P:SteamKit2.GameID.IsMod">
            <summary>
            Gets a value indicating whether this instance is a mod.
            </summary>
            <value>
              <c>true</c> if this instance is a mod; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.GameID.IsShortcut">
            <summary>
            Gets a value indicating whether this instance is a shortcut.
            </summary>
            <value>
            	<c>true</c> if this instance is a shortcut; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.GameID.IsP2PFile">
            <summary>
            Gets a value indicating whether this instance is a peer-to-peer file.
            </summary>
            <value>
            	<c>true</c> if this instance is a p2p file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.GameID.IsSteamApp">
            <summary>
            Gets a value indicating whether this instance is a steam app.
            </summary>
            <value>
            	<c>true</c> if this instance is a steam app; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SteamKit2.GameID.GameType">
            <summary>
            Represents various types of games.
            </summary>
        </member>
        <member name="F:SteamKit2.GameID.GameType.App">
            <summary>
            A Steam application.
            </summary>
        </member>
        <member name="F:SteamKit2.GameID.GameType.GameMod">
            <summary>
            A game modification.
            </summary>
        </member>
        <member name="F:SteamKit2.GameID.GameType.Shortcut">
            <summary>
            A shortcut to a program.
            </summary>
        </member>
        <member name="F:SteamKit2.GameID.GameType.P2P">
            <summary>
            A peer-to-peer file.
            </summary>
        </member>
        <member name="T:SteamKit2.KeyValue">
            <summary>
            Represents a recursive string key to arbitrary value container.
            </summary>
        </member>
        <member name="M:SteamKit2.KeyValue.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.KeyValue"/> class.
            </summary>
            <param name="name">The optional name of the root key.</param>
            <param name="value">The optional value assigned to the root key.</param>
        </member>
        <member name="F:SteamKit2.KeyValue.Invalid">
            <summary>
            Represents an invalid <see cref="T:SteamKit2.KeyValue"/> given when a searched for child does not exist.
            </summary>
        </member>
        <member name="M:SteamKit2.KeyValue.AsString">
            <summary>
            Returns the value of this instance as a string.
            </summary>
            <returns>The value of this instance as a string.</returns>
        </member>
        <member name="M:SteamKit2.KeyValue.AsInteger(System.Int32)">
            <summary>
            Attempts to convert and return the value of this instance as an integer.
            If the conversion is invalid, the default value is returned.
            </summary>
            <param name="defaultValue">The default value to return if the conversion is invalid.</param>
            <returns>The value of this instance as an integer.</returns>
        </member>
        <member name="M:SteamKit2.KeyValue.AsLong(System.Int64)">
            <summary>
            Attempts to convert and return the value of this instance as a long.
            If the conversion is invalid, the default value is returned.
            </summary>
            <param name="defaultValue">The default value to return if the conversion is invalid.</param>
            <returns>The value of this instance as an long.</returns>
        </member>
        <member name="M:SteamKit2.KeyValue.AsFloat(System.Single)">
            <summary>
            Attempts to convert and return the value of this instance as a float.
            If the conversion is invalid, the default value is returned.
            </summary>
            <param name="defaultValue">The default value to return if the conversion is invalid.</param>
            <returns>The value of this instance as an float.</returns>
        </member>
        <member name="M:SteamKit2.KeyValue.AsBoolean(System.Boolean)">
            <summary>
            Attempts to convert and return the value of this instance as a boolean.
            If the conversion is invalid, the default value is returned.
            </summary>
            <param name="defaultValue">The default value to return if the conversion is invalid.</param>
            <returns>The value of this instance as an boolean.</returns>
        </member>
        <member name="M:SteamKit2.KeyValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SteamKit2.KeyValue.LoadAsText(System.String)">
            <summary>
            Attempts to load the given filename as a text <see cref="T:SteamKit2.KeyValue"/>.
            </summary>
            <param name="path">The path to the file to load.</param>
            <returns>a <see cref="T:SteamKit2.KeyValue"/> instance if the load was successful, or <c>null</c> on failure.</returns>
            <remarks>
            This method will swallow any exceptions that occur when reading, use <see cref="M:SteamKit2.KeyValue.ReadAsText(System.IO.Stream)"/> if you wish to handle exceptions.
            </remarks>
        </member>
        <member name="M:SteamKit2.KeyValue.LoadAsBinary(System.String)">
            <summary>
            Attempts to load the given filename as a binary <see cref="T:SteamKit2.KeyValue"/>.
            </summary>
            <param name="path">The path to the file to load.</param>
            <returns>a <see cref="T:SteamKit2.KeyValue"/> instance if the load was successful, or <c>null</c> on failure.</returns>
            <remarks>
            This method will swallow any exceptions that occur when reading, use <see cref="M:SteamKit2.KeyValue.ReadAsBinary(System.IO.Stream)"/> if you wish to handle exceptions.
            </remarks>
        </member>
        <member name="M:SteamKit2.KeyValue.LoadFromString(System.String)">
            <summary>
            Attempts to create an instance of <see cref="T:SteamKit2.KeyValue"/> from the given input text.
            </summary>
            <param name="input">The input text to load.</param>
            <returns>a <see cref="T:SteamKit2.KeyValue"/> instance if the load was successful, or <c>null</c> on failure.</returns>
            <remarks>
            This method will swallow any exceptions that occur when reading, use <see cref="M:SteamKit2.KeyValue.ReadAsText(System.IO.Stream)"/> if you wish to handle exceptions.
            </remarks>
        </member>
        <member name="M:SteamKit2.KeyValue.ReadAsText(System.IO.Stream)">
            <summary>
            Populate this instance from the given <see cref="T:System.IO.Stream"/> as a text <see cref="T:SteamKit2.KeyValue"/>.
            </summary>
            <param name="input">The input <see cref="T:System.IO.Stream"/> to read from.</param>
            <returns><c>true</c> if the read was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SteamKit2.KeyValue.ReadFileAsText(System.String)">
            <summary>
            Opens and reads the given filename as text.
            </summary>
            <seealso cref="M:SteamKit2.KeyValue.ReadAsText(System.IO.Stream)"/>
            <param name="filename">The file to open and read.</param>
            <returns><c>true</c> if the read was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SteamKit2.KeyValue.SaveToFile(System.String,System.Boolean)">
            <summary>
            Saves this instance to file.
            </summary>
            <param name="path">The file path to save to.</param>
            <param name="asBinary">If set to <c>true</c>, saves this instance as binary.</param>
        </member>
        <member name="M:SteamKit2.KeyValue.ReadAsBinary(System.IO.Stream)">
            <summary>
            Populate this instance from the given <see cref="T:System.IO.Stream"/> as a binary <see cref="T:SteamKit2.KeyValue"/>.
            </summary>
            <param name="input">The input <see cref="T:System.IO.Stream"/> to read from.</param>
            <returns><c>true</c> if the read was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:SteamKit2.KeyValue.Name">
            <summary>
            Gets or sets the name of this instance.
            </summary>
        </member>
        <member name="P:SteamKit2.KeyValue.Value">
            <summary>
            Gets or sets the value of this instance.
            </summary>
        </member>
        <member name="P:SteamKit2.KeyValue.Children">
            <summary>
            Gets the children of this instance.
            </summary>
        </member>
        <member name="P:SteamKit2.KeyValue.Item(System.String)">
            <summary>
            Gets the child <see cref="T:SteamKit2.KeyValue"/> with the specified key.
            If no child with this key exists, <see cref="F:SteamKit2.KeyValue.Invalid"/> is returned.
            </summary>
        </member>
        <member name="T:SteamKit2.Steam3Manifest">
            <summary>
            Represents the binary Steam3 manifest format.
            </summary>
        </member>
        <member name="T:SteamKit2.Steam2Manifest">
            <summary>
            Represents the manifest describing every file within a Steam2 depot.
            </summary>
        </member>
        <member name="P:SteamKit2.Steam2Manifest.DepotID">
            <summary>
            Gets the DepotID this manifest is for.
            </summary>
        </member>
        <member name="P:SteamKit2.Steam2Manifest.DepotVersion">
            <summary>
            Gets the depot version this manifest is for.
            </summary>
        </member>
        <member name="P:SteamKit2.Steam2Manifest.NodeCount">
            <summary>
            Gets the count of nodes within this manifest.
            </summary>
        </member>
        <member name="P:SteamKit2.Steam2Manifest.FileCount">
            <summary>
            Gets the count of files within this manifest.
            </summary>
        </member>
        <member name="P:SteamKit2.Steam2Manifest.BlockSize">
            <summary>
            Gets the block size for this depot, used when downloading files.
            </summary>
        </member>
        <member name="P:SteamKit2.Steam2Manifest.DepotChecksum">
            <summary>
            Gets the depot checksum.
            </summary>
        </member>
        <member name="P:SteamKit2.Steam2Manifest.Nodes">
            <summary>
            Gets the nodes within this manifest.
            </summary>
        </member>
        <member name="T:SteamKit2.Steam2Manifest.Node">
            <summary>
            Represents a single file or folder within a manifest.
            </summary>
        </member>
        <member name="P:SteamKit2.Steam2Manifest.Node.SizeOrCount">
            <summary>
            Gets the size (in bytes, if this node is a file) or count (of inner nodes, if this node is a directory).
            </summary>
        </member>
        <member name="P:SteamKit2.Steam2Manifest.Node.FileID">
            <summary>
            Gets the FileID of this node.
            </summary>
        </member>
        <member name="P:SteamKit2.Steam2Manifest.Node.Attributes">
            <summary>
            Gets the attributes of this node.
            </summary>
        </member>
        <member name="P:SteamKit2.Steam2Manifest.Node.ParentIndex">
            <summary>
            Gets the index of the parent node.
            </summary>
        </member>
        <member name="P:SteamKit2.Steam2Manifest.Node.Name">
            <summary>
            Gets the name of the node.
            </summary>
        </member>
        <member name="P:SteamKit2.Steam2Manifest.Node.FullName">
            <summary>
            Gets the full name of the node, built from parent nodes.
            </summary>
        </member>
        <member name="T:SteamKit2.Steam2Manifest.Node.Attribs">
            <summary>
            The various attributes of a manifest node.
            </summary>
        </member>
        <member name="F:SteamKit2.Steam2Manifest.Node.Attribs.UserConfigurationFile">
            <summary>
            This node is a user configuration file.
            </summary>
        </member>
        <member name="F:SteamKit2.Steam2Manifest.Node.Attribs.LaunchFile">
            <summary>
            This node is a launch file.
            </summary>
        </member>
        <member name="F:SteamKit2.Steam2Manifest.Node.Attribs.LockedFile">
            <summary>
            This node is a locked file.
            </summary>
        </member>
        <member name="F:SteamKit2.Steam2Manifest.Node.Attribs.NoCacheFile">
            <summary>
            This node is a no-cache file.
            </summary>
        </member>
        <member name="F:SteamKit2.Steam2Manifest.Node.Attribs.VersionedFile">
            <summary>
            This node is a versioned file.
            </summary>
        </member>
        <member name="F:SteamKit2.Steam2Manifest.Node.Attribs.PurgeFile">
            <summary>
            This node is a purge file.
            </summary>
        </member>
        <member name="F:SteamKit2.Steam2Manifest.Node.Attribs.EncryptedFile">
            <summary>
            This node is an encrypted file.
            </summary>
        </member>
        <member name="F:SteamKit2.Steam2Manifest.Node.Attribs.ReadOnly">
            <summary>
            This node is a read-only file.
            </summary>
        </member>
        <member name="F:SteamKit2.Steam2Manifest.Node.Attribs.HiddenFile">
            <summary>
            This node is a hidden file.
            </summary>
        </member>
        <member name="F:SteamKit2.Steam2Manifest.Node.Attribs.ExecutableFile">
            <summary>
            This node is an executable file.
            </summary>
        </member>
        <member name="F:SteamKit2.Steam2Manifest.Node.Attribs.File">
            <summary>
            This node is a file, and not a folder.
            </summary>
        </member>
        <member name="T:SteamKit2.IDebugListener">
            <summary>
            Interface all debug log listeners must implement in order to register themselves.
            </summary>
        </member>
        <member name="M:SteamKit2.IDebugListener.WriteLine(System.String,System.String)">
            <summary>
            Called when the DebugLog wishes to inform listeners of debug spew.
            </summary>
            <param name="category">The category of the message.</param>
            <param name="msg">The message to log.</param>
        </member>
        <member name="T:SteamKit2.DebugLog">
            <summary>
            Represents the root debug logging functionality. 
            </summary>
        </member>
        <member name="M:SteamKit2.DebugLog.#cctor">
            <summary>
            Initializes the <see cref="T:SteamKit2.DebugLog"/> class.
            </summary>
        </member>
        <member name="M:SteamKit2.DebugLog.AddListener(SteamKit2.IDebugListener)">
            <summary>
            Adds a listener.
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="M:SteamKit2.DebugLog.AddListener(System.Action{System.String,System.String})">
            <summary>
            Adds an action listener.
            </summary>
            <param name="listenerAction">The listener action.</param>
        </member>
        <member name="M:SteamKit2.DebugLog.RemoveListener(SteamKit2.IDebugListener)">
            <summary>
            Removes a listener.
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="M:SteamKit2.DebugLog.RemoveListener(System.Action{System.String,System.String})">
            <summary>
            Removes a listener.
            </summary>
            <param name="listenerAction">The previously registered listener action.</param>
        </member>
        <member name="M:SteamKit2.DebugLog.WriteLine(System.String,System.String,System.Object[])">
            <summary>
            Writes a line to the debug log, informing all listeners.
            </summary>
            <param name="category">The category of the message.</param>
            <param name="msg">A composite format string.</param>
            <param name="args">An System.Object array containing zero or more objects to format.</param>
        </member>
        <member name="P:SteamKit2.DebugLog.Enabled">
            <summary>
            Gets or sets a value indicating whether debug logging is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SteamKit2.ConfigServerClient">
            <summary>
            This client is capable of connecting to a config server.
            </summary>
        </member>
        <member name="M:SteamKit2.ConfigServerClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.ConfigServerClient"/> class.
            </summary>
        </member>
        <member name="M:SteamKit2.ConfigServerClient.GetNetworkKey">
            <summary>
            Requests the network key from the config server.
            </summary>
            <returns>The network key.</returns>
        </member>
        <member name="M:SteamKit2.ConfigServerClient.GetContentDescriptionRecord(System.Byte[])">
            <summary>
            Gets the current content description record (CDR) provided by the config server.
            Optionally accepts an old CDR hash in order to determine if a new CDR should be downloaded or not.
            The old CDR hash is a SHA-1 hash of the entire CDR payload.
            </summary>
            <param name="oldCDRHash">An optional CDR hash.</param>
            <returns>A byte blob representing the CDR on success; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:SteamKit2.ConfigServerClient.GetClientConfigRecord">
            <summary>
            Requests the client config record from the server.
            </summary>
            <returns>A binary blob that represents the config record on success; otherwise <c>null</c>.</returns>
        </member>
        <member name="T:SteamKit2.MsgUtil">
            <summary>
            Contains various utility functions for handling EMsgs.
            </summary>
        </member>
        <member name="M:SteamKit2.MsgUtil.GetMsg(System.UInt32)">
            <summary>
            Strips off the protobuf message flag and returns an EMsg.
            </summary>
            <param name="msg">The message number.</param>
            <returns>The underlying EMsg.</returns>
        </member>
        <member name="M:SteamKit2.MsgUtil.GetGCMsg(System.UInt32)">
            <summary>
            Strips off the protobuf message flag and returns an EMsg.
            </summary>
            <param name="msg">The message number.</param>
            <returns>The underlying EMsg.</returns>
        </member>
        <member name="M:SteamKit2.MsgUtil.GetMsg(SteamKit2.EMsg)">
            <summary>
            Strips off the protobuf message flag and returns an EMsg.
            </summary>
            <param name="msg">The message number.</param>
            <returns>The underlying EMsg.</returns>
        </member>
        <member name="M:SteamKit2.MsgUtil.IsProtoBuf(System.UInt32)">
            <summary>
            Determines whether message is protobuf flagged.
            </summary>
            <param name="msg">The message.</param>
            <returns>
              <c>true</c> if this message is protobuf flagged; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SteamKit2.MsgUtil.IsProtoBuf(SteamKit2.EMsg)">
            <summary>
            Determines whether message is protobuf flagged.
            </summary>
            <param name="msg">The message.</param>
            <returns>
              <c>true</c> if this message is protobuf flagged; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SteamKit2.MsgUtil.MakeMsg(SteamKit2.EMsg,System.Boolean)">
            <summary>
            Crafts an EMsg, flagging it if required.
            </summary>
            <param name="msg">The EMsg to flag.</param>
            <param name="protobuf">if set to <c>true</c>, the message is protobuf flagged.</param>
            <returns>A crafted EMsg, flagged if requested.</returns>
        </member>
        <member name="M:SteamKit2.MsgUtil.MakeGCMsg(System.UInt32,System.Boolean)">
            <summary>
            Crafts an EMsg, flagging it if required.
            </summary>
            <param name="msg">The EMsg to flag.</param>
            <param name="protobuf">if set to <c>true</c>, the message is protobuf flagged.</param>
            <returns>A crafted EMsg, flagged if requested.</returns>
        </member>
        <member name="T:SteamKit2.GeneralDSClient">
            <summary>
            Represents a client that is capable of connecting to the Steam2 General Directory Server.
            </summary>
        </member>
        <member name="F:SteamKit2.GeneralDSClient.GDServers">
            <summary>
            This is the boostrap list of General Directory Servers.
            </summary>
        </member>
        <member name="M:SteamKit2.Connection.OnNetMsgReceived(SteamKit2.NetMsgEventArgs)">
            <summary>
            Raises the <see cref="E:NetMsgReceived"/> event.
            </summary>
            <param name="e">The <see cref="T:SteamKit2.NetMsgEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SteamKit2.Connection.Connect(System.Net.IPEndPoint)">
            <summary>
            Connects to the specified end point.
            </summary>
            <param name="endPoint">The end point.</param>
        </member>
        <member name="M:SteamKit2.Connection.Disconnect">
            <summary>
            Disconnects this instance.
            </summary>
        </member>
        <member name="M:SteamKit2.Connection.Send(SteamKit2.IClientMsg)">
            <summary>
            Sends the specified client net message.
            </summary>
            <param name="clientMsg">The client net message.</param>
        </member>
        <member name="M:SteamKit2.Connection.GetLocalIP">
            <summary>
            Gets the local IP.
            </summary>
            <returns>The local IP.</returns>
        </member>
        <member name="P:SteamKit2.Connection.NetFilter">
            <summary>
            Gets or sets the net filter for this connection.
            </summary>
            <value>The net filter.</value>
        </member>
        <member name="E:SteamKit2.Connection.NetMsgReceived">
            <summary>
            Occurs when a net message is recieved over the network.
            </summary>
        </member>
        <member name="E:SteamKit2.Connection.Connected">
            <summary>
            Occurs when the physical connection is established.
            </summary>
        </member>
        <member name="E:SteamKit2.Connection.Disconnected">
            <summary>
            Occurs when the physical connection is broken.
            </summary>
        </member>
        <member name="M:SteamKit2.TcpConnection.Connect(System.Net.IPEndPoint)">
            <summary>
            Connects to the specified end point.
            </summary>
            <param name="endPoint">The end point.</param>
        </member>
        <member name="M:SteamKit2.TcpConnection.Disconnect">
            <summary>
            Disconnects this instance.
            </summary>
        </member>
        <member name="M:SteamKit2.TcpConnection.Send(SteamKit2.IClientMsg)">
            <summary>
            Sends the specified client net message.
            </summary>
            <param name="clientMsg">The client net message.</param>
        </member>
        <member name="M:SteamKit2.TcpConnection.NetLoop">
            <summary>
            Nets the loop.
            </summary>
        </member>
        <member name="M:SteamKit2.TcpConnection.GetLocalIP">
            <summary>
            Gets the local IP.
            </summary>
            <returns>The local IP.</returns>
        </member>
        <member name="F:SteamKit2.UdpConnection.RESEND_DELAY">
            <summary>
            Seconds to wait before sending packets.
            </summary>
        </member>
        <member name="F:SteamKit2.UdpConnection.TIMEOUT_DELAY">
            <summary>
            Seconds to wait before considering the connection dead.
            </summary>
        </member>
        <member name="F:SteamKit2.UdpConnection.RESEND_COUNT">
            <summary>
            Maximum number of packets to resend when RESEND_DELAY is exceeded.
            </summary>
        </member>
        <member name="F:SteamKit2.UdpConnection.AHEAD_COUNT">
            <summary>
            Maximum number of packets that we can be waiting on at a time.
            </summary>
        </member>
        <member name="F:SteamKit2.UdpConnection.state">
            <summary>
            Contains information about the state of the connection, used to filter out packets that are
            unexpected or not valid given the state of the connection.
            </summary>
        </member>
        <member name="F:SteamKit2.UdpConnection.outSeq">
            <summary>
            The next outgoing sequence number to be used.
            </summary>
        </member>
        <member name="F:SteamKit2.UdpConnection.outSeqSent">
            <summary>
            The highest sequence number of an outbound packet that has been sent.
            </summary>
        </member>
        <member name="F:SteamKit2.UdpConnection.outSeqAcked">
            <summary>
            The sequence number of the highest packet acknowledged by the server.
            </summary>
        </member>
        <member name="F:SteamKit2.UdpConnection.inSeq">
            <summary>
            The sequence number we plan on acknowledging receiving with the next Ack. All packets below or equal
            to inSeq *must* have been received, but not necessarily handled.
            </summary>
        </member>
        <member name="F:SteamKit2.UdpConnection.inSeqAcked">
            <summary>
            The highest sequence number we've acknowledged receiving.
            </summary>
        </member>
        <member name="F:SteamKit2.UdpConnection.inSeqHandled">
            <summary>
            The highest sequence number we've processed.
            </summary>
        </member>
        <member name="M:SteamKit2.UdpConnection.Connect(System.Net.IPEndPoint)">
            <summary>
            Connects to the specified CM server.
            </summary>
            <param name="endPoint">The CM server.</param>
        </member>
        <member name="M:SteamKit2.UdpConnection.Disconnect">
            <summary>
            Disconnects this instance, blocking until the queue of messages is empty or the connection
            is otherwise terminated.
            </summary>
        </member>
        <member name="M:SteamKit2.UdpConnection.Send(SteamKit2.IClientMsg)">
            <summary>
            Serializes and sends the provided message to the server in as many packets as is necessary.
            </summary>
            <param name="clientMsg">The ClientMsg</param>
        </member>
        <member name="M:SteamKit2.UdpConnection.SendData(System.IO.MemoryStream)">
            <summary>
            Sends the data sequenced as a single message, splitting it into multiple parts if necessary.
            </summary>
            <param name="ms">The data to send.</param>
        </member>
        <member name="M:SteamKit2.UdpConnection.SendSequenced(SteamKit2.UdpPacket)">
            <summary>
            Sends the packet as a sequenced, reliable packet.
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:SteamKit2.UdpConnection.SendSequenced(SteamKit2.UdpPacket[])">
            <summary>
            Sends the packets as one sequenced, reliable net message.
            </summary>
            <param name="packets">The packets that make up the single net message</param>
        </member>
        <member name="M:SteamKit2.UdpConnection.SendPacket(SteamKit2.UdpPacket)">
            <summary>
            Sends a packet immediately.
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:SteamKit2.UdpConnection.SendAck">
            <summary>
            Sends a datagram Ack, used when an Ack needs to be sent but there is no data response to piggy-back on.
            </summary>
        </member>
        <member name="M:SteamKit2.UdpConnection.SendPendingMessages">
            <summary>
            Sends or resends sequenced messages, if necessary. Also responsible for throttling
            the rate at which they are sent.
            </summary>
        </member>
        <member name="M:SteamKit2.UdpConnection.ReadyMessageParts">
            <summary>
            Returns the number of message parts in the next message.
            </summary>
            <returns>Non-zero number of message parts if a message is ready to be handled, 0 otherwise</returns>
        </member>
        <member name="M:SteamKit2.UdpConnection.DispatchMessage">
            <summary>
            Dispatches up to one message to the rest of SteamKit
            </summary>
            <returns>True if a message was dispatched, false otherwise</returns>
        </member>
        <member name="M:SteamKit2.UdpConnection.NetLoop">
            <summary>
            Processes incoming packets, maintains connection consistency, and oversees outgoing packets.
            </summary>
        </member>
        <member name="M:SteamKit2.UdpConnection.ReceivePacket(SteamKit2.UdpPacket)">
            <summary>
            Receives the packet, performs all sanity checks and then passes it along as necessary.
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:SteamKit2.UdpConnection.ReceiveChallenge(SteamKit2.UdpPacket)">
            <summary>
            Receives the challenge and responds with a Connect request
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:SteamKit2.UdpConnection.ReceiveAccept(SteamKit2.UdpPacket)">
            <summary>
            Receives the notification of an accepted connection and sets the connection id that will be used for the
            connection's duration.
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:SteamKit2.UdpConnection.ReceiveData(SteamKit2.UdpPacket)">
            <summary>
            Receives typical data packets before dispatching them for consumption by the rest of SteamKit
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="T:SteamKit2.DataStream">
            <summary>
            Helper data manip class that allows reading binary data from a byte array.
            </summary>
        </member>
        <member name="M:SteamKit2.DataStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.DataStream"/> class.
            </summary>
        </member>
        <member name="M:SteamKit2.DataStream.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.DataStream"/> class.
            </summary>
            <param name="data">The data to wrap.</param>
        </member>
        <member name="M:SteamKit2.DataStream.Read(System.Type)">
            <summary>
            Reads the specified object type, and seeks ahead the size of the object.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>An instance of the object.</returns>
        </member>
        <member name="M:SteamKit2.DataStream.Read``1">
            <summary>
            Reads this instance, and seeks forward the length of the object.
            </summary>
            <typeparam name="T">The object type to read.</typeparam>
            <returns>An instance of the object.</returns>
        </member>
        <member name="M:SteamKit2.DataStream.ReadSByte">
            <summary>
            Reads a signed byte from the stream, and seeks ahead 1 byte.
            </summary>
            <returns>the </returns>
        </member>
        <member name="M:SteamKit2.DataStream.ReadByte">
            <summary>
            Reads a unsigned byte from the stream, and seeks ahead 1 byte.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SteamKit2.DataStream.ReadUByte">
            <summary>
            Reads an unsigned byte from the stream, and seeks ahead 1 byte.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SteamKit2.DataStream.PeekByte">
            <summary>
            Reads an unsigned byte from the stream, but does not seek.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SteamKit2.DataStream.ReadBytes(System.Int32)">
            <summary>
            Reads a number of bytes from the stream.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <returns></returns>
        </member>
        <member name="M:SteamKit2.DataStream.ReadBytes(System.Int32,System.Boolean)">
            <summary>
            Reads a number of bytes from the stream.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <param name="rev">Reverse the output.</param>
            <returns></returns>
        </member>
        <member name="M:SteamKit2.DataStream.ReadBool">
            <summary>
            Reads a boolean value from the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SteamKit2.DataStream.ReadChar">
            <summary>
            Reads a character from the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SteamKit2.DataStream.ReadInt16">
            <summary>
            Reads a 16-bit signed integer from the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SteamKit2.DataStream.ReadInt32">
            <summary>
            Reads a 32-bit signed integer from the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SteamKit2.DataStream.ReadInt64">
            <summary>
            Reads a 64-bit signed integer from the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SteamKit2.DataStream.ReadUInt16">
            <summary>
            Reads a 16-bit unsigned integer from the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SteamKit2.DataStream.ReadUInt32">
            <summary>
            Reads a 32-bit unsigned integer from the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SteamKit2.DataStream.ReadUInt64">
            <summary>
            Reads a 64-bit unsigned integer from the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SteamKit2.DataStream.ReadSingle">
            <summary>
            Reads a 32-bit floating point number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SteamKit2.DataStream.ReadFloat">
            <summary>
            Reads a 32-bit floating point number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SteamKit2.DataStream.ReadDouble">
            <summary>
            Reads a 64-bit floating point number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SteamKit2.DataStream.SizeRemaining">
            <summary>
            Sizes the remaining size.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SteamKit2.DataStream.ReadNullTermString">
            <summary>
            Reads a null terminated string from the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SteamKit2.DataStream.ReadNullTermString(System.Text.Encoding)">
            <summary>
            Reads a null terminated string from the stream with a specified encoding.
            </summary>
            <param name="encoding">The encoding to use.</param>
            <returns></returns>
        </member>
        <member name="M:SteamKit2.DataStream.ReadString(System.Int32)">
            <summary>
            Reads a string of a certain length from the stream.
            </summary>
            <param name="length">The length of the string.</param>
            <returns></returns>
        </member>
        <member name="M:SteamKit2.DataStream.ReadString(System.Int32,System.Text.Encoding)">
            <summary>
            Reads a string of a certain length from the steam with a specified encoding.
            </summary>
            <param name="length">The length of the string.</param>
            <param name="encoding">The encoding to use.</param>
            <returns></returns>
        </member>
        <member name="M:SteamKit2.DataStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:SteamKit2.DataStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:SteamKit2.DataStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:SteamKit2.DataStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:SteamKit2.DataStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="P:SteamKit2.DataStream.Data">
            <summary>
            Gets or sets the data represented by this instance.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:SteamKit2.DataStream.SwapEndianness">
            <summary>
            Gets or sets a value indicating whether to swap endianness when reading basic types.
            </summary>
            <value>
              <c>true</c> if to swap endianness when reading basic types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.DataStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <value></value>
            <returns>true if the stream supports reading; otherwise, false.</returns>
        </member>
        <member name="P:SteamKit2.DataStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <value></value>
            <returns>true if the stream supports seeking; otherwise, false.</returns>
        </member>
        <member name="P:SteamKit2.DataStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <value></value>
            <returns>true if the stream supports writing; otherwise, false.</returns>
        </member>
        <member name="P:SteamKit2.DataStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <value></value>
            <returns>A long value representing the length of the stream in bytes.</returns>
            <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="P:SteamKit2.DataStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            <value></value>
            <returns>The current position within the stream.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="T:SteamKit2.ESteam2ServerType">
            <summary>
            This is a list of known Steam2 server types.
            </summary>
        </member>
        <member name="F:SteamKit2.ESteam2ServerType.ProxyASClientAuthentication">
            <summary>
            This is the auth server that all clients should connect to.
            Implemented as a reverse proxy for load balancing.
            </summary>
        </member>
        <member name="F:SteamKit2.ESteam2ServerType.ContentServer">
            <summary>
            Represents a server that serves game content to clients.
            </summary>
        </member>
        <member name="F:SteamKit2.ESteam2ServerType.GeneralDirectoryServer">
            <summary>
            The general directory server which returns a list of other servers.
            </summary>
        </member>
        <member name="F:SteamKit2.ESteam2ServerType.ConfigServer">
            <summary>
            Represents a server that serves config data (such as the CDR) to clients.
            </summary>
        </member>
        <member name="F:SteamKit2.ESteam2ServerType.CSDS">
            <summary>
            Content Server?/Config Server? directory server
            </summary>
        </member>
        <member name="F:SteamKit2.ESteam2ServerType.VCDSValidateNewValveCDKey">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:SteamKit2.ESteam2ServerType.HLMasterServer">
            <summary>
            Half-Life master server.
            </summary>
        </member>
        <member name="F:SteamKit2.ESteam2ServerType.FriendsServer">
            <summary>
            Friends server. Most likely obsolete.
            </summary>
        </member>
        <member name="F:SteamKit2.ESteam2ServerType.AllMasterASClientAuthentication">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:SteamKit2.ESteam2ServerType.CSER">
            <summary>
            Reporting server for source games.
            </summary>
        </member>
        <member name="F:SteamKit2.ESteam2ServerType.HL2MasterServer">
            <summary>
            Half-Life 2 master server.
            </summary>
        </member>
        <member name="F:SteamKit2.ESteam2ServerType.MasterASClientAuthentication">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:SteamKit2.ESteam2ServerType.SlaveASClientAuthentication">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:SteamKit2.ESteam2ServerType.RDKFMasterServer">
            <summary>
            Rag doll kung fu master server.
            </summary>
        </member>
        <member name="T:SteamKit2.TcpSocket">
            <summary>
            Represents a Tcp socket.
            </summary>
        </member>
        <member name="M:SteamKit2.TcpSocket.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.TcpSocket"/> class.
            </summary>
        </member>
        <member name="M:SteamKit2.TcpSocket.Connect(System.Net.IPEndPoint)">
            <summary>
            Disconnects (if needed) and connects the specified end point.
            </summary>
            <param name="endPoint">The end point.</param>
        </member>
        <member name="M:SteamKit2.TcpSocket.Disconnect">
            <summary>
            Disconnects this socket.
            </summary>
        </member>
        <member name="M:SteamKit2.TcpSocket.Send(System.Byte[])">
            <summary>
            Sends the specified data on the socket.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:SteamKit2.TcpSocket.Send(SteamKit2.TcpPacket)">
            <summary>
            Sends the specified packet on the socket.
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:SteamKit2.TcpSocket.ReceivePacket">
            <summary>
            Attempts to receive a tcp packet from the socket.
            </summary>
            <returns>The packet.</returns>
        </member>
        <member name="M:SteamKit2.TcpSocket.GetLocalIP">
            <summary>
            Gets the local IP.
            </summary>
            <returns>The local IP.</returns>
        </member>
        <member name="P:SteamKit2.TcpSocket.Reader">
            <summary>
            Gets the network binary reader.
            </summary>
            <value>The binary reader.</value>
        </member>
        <member name="P:SteamKit2.TcpSocket.Writer">
            <summary>
            Gets the network binary writer.
            </summary>
            <value>The binary writer.</value>
        </member>
        <member name="P:SteamKit2.TcpSocket.IsConnected">
            <summary>
            Gets whether or not the client is connected.
            </summary>
            <value>True if connected, otherwise false.</value>
        </member>
        <member name="P:SteamKit2.TcpSocket.ConnectionTimeout">
            <summary>
            Gets the length of time a connection will attempt to establish before timing out. The default timeout is 30 seconds.
            </summary>
            <value>The connection timeout.</value>
        </member>
        <member name="T:SteamKit2.NetMsgEventArgs">
            <summary>
            Represents data that has been received over the network.
            </summary>
        </member>
        <member name="T:SteamKit2.TcpPacket">
            <summary>
            Represents a data packet sent over tcp. Contains a length and payload.
            </summary>
        </member>
        <member name="M:SteamKit2.TcpPacket.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.TcpPacket"/> class.
            </summary>
        </member>
        <member name="M:SteamKit2.TcpPacket.GetPayload">
            <summary>
            Gets the payload of this packet.
            </summary>
            <returns>The payload.</returns>
        </member>
        <member name="M:SteamKit2.TcpPacket.SetPayload(System.Byte[])">
            <summary>
            Sets the payload of this packet.
            </summary>
            <param name="payload">The payload.</param>
        </member>
        <member name="M:SteamKit2.TcpPacket.GetData">
            <summary>
            Gets the full packet data with a big-endian length prepended onto the payload.
            </summary>
            <returns>The full packet data.</returns>
        </member>
        <member name="T:SteamKit2.CryptoHelper">
            <summary>
            Provides Crypto functions used in Steam protocols
            </summary>
        </member>
        <member name="M:SteamKit2.CryptoHelper.SHAHash(System.Byte[])">
            <summary>
            Performs an SHA1 hash of an input byte array
            </summary>
        </member>
        <member name="M:SteamKit2.CryptoHelper.AESEncrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Encrypts using AES/CBC/PKCS7 an input byte array with a given key and IV
            </summary>
        </member>
        <member name="M:SteamKit2.CryptoHelper.AESDecrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Decrypts an input byte array using AES/CBC/PKCS7 with a given key and IV
            </summary>
        </member>
        <member name="M:SteamKit2.CryptoHelper.SymmetricEncrypt(System.Byte[],System.Byte[])">
            <summary>
            Performs an encryption using AES/CBC/PKCS7 with an input byte array and key, with a random IV prepended using AES/ECB/None
            </summary>
        </member>
        <member name="M:SteamKit2.CryptoHelper.SymmetricDecrypt(System.Byte[],System.Byte[])">
            <summary>
            Decrypts using AES/CBC/PKCS7 with an input byte array and key, using the random IV prepended using AES/ECB/None
            </summary>
        </member>
        <member name="M:SteamKit2.CryptoHelper.CRCHash(System.Byte[])">
            <summary>
            Performs CRC32 on an input byte array using the CrcStandard.Crc32Bit parameters
            </summary>
        </member>
        <member name="M:SteamKit2.CryptoHelper.AdlerHash(System.Byte[])">
            <summary>
            Performs an Adler32 on the given input
            </summary>
        </member>
        <member name="M:SteamKit2.CryptoHelper.GenerateRandomBlock(System.Int32)">
            <summary>
            Generate an array of random bytes given the input length
            </summary>
        </member>
        <member name="T:SteamKit2.SteamID">
            <summary>
            This 64bit structure is used for identifying various objects on the Steam network.
            </summary>
        </member>
        <member name="F:SteamKit2.SteamID.AllInstances">
            <summary>
            The account instance value when representing all instanced <see cref="T:SteamKit2.SteamID">SteamIDs</see>.
            </summary>
        </member>
        <member name="F:SteamKit2.SteamID.DesktopInstance">
            <summary>
            The account instance value for a desktop <see cref="T:SteamKit2.SteamID"/>.
            </summary>
        </member>
        <member name="F:SteamKit2.SteamID.ConsoleInstance">
            <summary>
            The account instance value for a console <see cref="T:SteamKit2.SteamID"/>.
            </summary>
        </member>
        <member name="F:SteamKit2.SteamID.WebInstance">
            <summary>
            The account instance for mobile or web based <see cref="T:SteamKit2.SteamID">SteamIDs</see>.
            </summary>
        </member>
        <member name="F:SteamKit2.SteamID.AccountIDMask">
            <summary>
            Masking vlaue used for the account id.
            </summary>
        </member>
        <member name="F:SteamKit2.SteamID.AccountInstanceMask">
            <summary>
            Masking value used for packing chat instance flags into a <see cref="T:SteamKit2.SteamID"/>.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamID.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.SteamID"/> class.
            </summary>
        </member>
        <member name="M:SteamKit2.SteamID.#ctor(System.UInt32,SteamKit2.EUniverse,SteamKit2.EAccountType)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.SteamID"/> class.
            </summary>
            <param name="unAccountID">The account ID.</param>
            <param name="eUniverse">The universe.</param>
            <param name="eAccountType">The account type.</param>
        </member>
        <member name="M:SteamKit2.SteamID.#ctor(System.UInt32,System.UInt32,SteamKit2.EUniverse,SteamKit2.EAccountType)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.SteamID"/> class.
            </summary>
            <param name="unAccountID">The account ID.</param>
            <param name="unInstance">The instance.</param>
            <param name="eUniverse">The universe.</param>
            <param name="eAccountType">The account type.</param>
        </member>
        <member name="M:SteamKit2.SteamID.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.SteamID"/> class.
            </summary>
            <param name="id">The 64bit integer to assign this SteamID from.</param>
        </member>
        <member name="M:SteamKit2.SteamID.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.SteamID"/> class from a rendered form.
            This constructor assumes the rendered SteamID is in the public universe.
            </summary>
            <param name="steamId">A "STEAM_" rendered form of the SteamID.</param>
        </member>
        <member name="M:SteamKit2.SteamID.#ctor(System.String,SteamKit2.EUniverse)">
            <summary>
            Initializes a new instance of the <see cref="T:SteamKit2.SteamID"/> class from a rendered form and universe.
            </summary>
            <param name="steamId">A "STEAM_" rendered form of the SteamID.</param>
            <param name="eUniverse">The universe the SteamID belongs to.</param>
        </member>
        <member name="M:SteamKit2.SteamID.Set(System.UInt32,SteamKit2.EUniverse,SteamKit2.EAccountType)">
            <summary>
            Sets the various components of this SteamID instance.
            </summary>
            <param name="unAccountID">The account ID.</param>
            <param name="eUniverse">The universe.</param>
            <param name="eAccountType">The account type.</param>
        </member>
        <member name="M:SteamKit2.SteamID.InstancedSet(System.UInt32,System.UInt32,SteamKit2.EUniverse,SteamKit2.EAccountType)">
            <summary>
            Sets the various components of this SteamID instance.
            </summary>
            <param name="unAccountID">The account ID.</param>
            <param name="unInstance">The instance.</param>
            <param name="eUniverse">The universe.</param>
            <param name="eAccountType">The account type.</param>
        </member>
        <member name="M:SteamKit2.SteamID.SetFromString(System.String,SteamKit2.EUniverse)">
            <summary>
            Sets the various components of this SteamID from a rendered form and universe.
            </summary>
            <param name="steamId">A "STEAM_" rendered form of the SteamID.</param>
            <param name="eUniverse">The universe the SteamID belongs to.</param>
            <returns>True if this instance was successfully assigned, or false if the given string was in an invalid format.</returns>
        </member>
        <member name="M:SteamKit2.SteamID.SetFromUInt64(System.UInt64)">
            <summary>
            Sets the various components of this SteamID from a 64bit integer form.
            </summary>
            <param name="ulSteamID">The 64bit integer to assign this SteamID from.</param>
        </member>
        <member name="M:SteamKit2.SteamID.ConvertToUInt64">
            <summary>
            Converts this SteamID into it's 64bit integer form.
            </summary>
            <returns>A 64bit integer representing this SteamID.</returns>
        </member>
        <member name="M:SteamKit2.SteamID.GetStaticAccountKey">
            <summary>
            Returns a static account key used for grouping accounts with differing instances.
            </summary>
            <returns>A 64bit static account key.</returns>
        </member>
        <member name="M:SteamKit2.SteamID.Render">
            <summary>
            Renders this instance into it's "STEAM_" represenation.
            </summary>
            <returns>A string "STEAM_" representation of this SteamID.</returns>
        </member>
        <member name="M:SteamKit2.SteamID.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SteamKit2.SteamID.op_Implicit(SteamKit2.SteamID)~System.UInt64">
            <summary>
            Performs an implicit conversion from <see cref="T:SteamKit2.SteamID"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="sid">The SteamID.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SteamKit2.SteamID.op_Implicit(System.UInt64)~SteamKit2.SteamID">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:SteamKit2.SteamID"/>.
            </summary>
            <param name="id">A 64bit integer representing the SteamID.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:SteamKit2.SteamID.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SteamKit2.SteamID.Equals(SteamKit2.SteamID)">
            <summary>
            Determines whether the specified <see cref="T:SteamKit2.SteamID"/> is equal to this instance.
            </summary>
            <param name="sid">The <see cref="T:SteamKit2.SteamID"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:SteamKit2.SteamID"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SteamKit2.SteamID.op_Equality(SteamKit2.SteamID,SteamKit2.SteamID)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">The left side SteamID.</param>
            <param name="b">The right side SteamID.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SteamKit2.SteamID.op_Inequality(SteamKit2.SteamID,SteamKit2.SteamID)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">The left side SteamID.</param>
            <param name="b">The right side SteamID..</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:SteamKit2.SteamID.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:SteamKit2.SteamID.IsBlankAnonAccount">
            <summary>
            Gets a value indicating whether this instance is a blank anonymous account
            </summary>
            <value>
            	<c>true</c> if this instance is a blank anon account; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.SteamID.IsGameServerAccount">
            <summary>
            Gets a value indicating whether this instance is a game server account.
            </summary>
            <value>
            	<c>true</c> if this instance is a game server account; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.SteamID.IsPersistentGameServerAccount">
            <summary>
            Gets a value indicating whether this instance is a persistent game server account.
            </summary>
            <value>
            	<c>true</c> if this instance is a persistent game server account; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.SteamID.IsAnonGameServerAccount">
            <summary>
            Gets a value indicating whether this instance is an anonymous game server account.
            </summary>
            <value>
            	<c>true</c> if this instance is an anon game server account; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.SteamID.IsContentServerAccount">
            <summary>
            Gets a value indicating whether this instance is a content server account.
            </summary>
            <value>
            	<c>true</c> if this instance is a content server account; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.SteamID.IsClanAccount">
            <summary>
            Gets a value indicating whether this instance is a clan account.
            </summary>
            <value>
            	<c>true</c> if this instance is a clan account; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.SteamID.IsChatAccount">
            <summary>
            Gets a value indicating whether this instance is a chat account.
            </summary>
            <value>
            	<c>true</c> if this instance is a chat account; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.SteamID.IsLobby">
            <summary>
            Gets a value indicating whether this instance is a lobby.
            </summary>
            <value>
              <c>true</c> if this instance is a lobby; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.SteamID.IsIndividualAccount">
            <summary>
            Gets a value indicating whether this instance is an individual account.
            </summary>
            <value>
            	<c>true</c> if this instance is an individual account; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.SteamID.IsAnonAccount">
            <summary>
            Gets a value indicating whether this instance is an anonymous account.
            </summary>
            <value>
            	<c>true</c> if this instance is an anon account; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.SteamID.IsAnonUserAccount">
            <summary>
            Gets a value indicating whether this instance is an anonymous user account.
            </summary>
            <value>
            	<c>true</c> if this instance is an anon user account; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.SteamID.IsConsoleUserAccount">
            <summary>
            Gets a value indicating whether this instance is a console user account.
            </summary>
            <value>
            	<c>true</c> if this instance is a console user account; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.SteamID.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SteamKit2.SteamID.AccountID">
            <summary>
            Gets or sets the account id.
            </summary>
            <value>
            The account id.
            </value>
        </member>
        <member name="P:SteamKit2.SteamID.AccountInstance">
            <summary>
            Gets or sets the account instance.
            </summary>
            <value>
            The account instance.
            </value>
        </member>
        <member name="P:SteamKit2.SteamID.AccountType">
            <summary>
            Gets or sets the account type.
            </summary>
            <value>
            The account type.
            </value>
        </member>
        <member name="P:SteamKit2.SteamID.AccountUniverse">
            <summary>
            Gets or sets the account universe.
            </summary>
            <value>
            The account universe.
            </value>
        </member>
        <member name="T:SteamKit2.SteamID.ChatInstanceFlags">
            <summary>
            Represents various flags a chat <see cref="T:SteamKit2.SteamID"/> may have, packed into its instance.
            </summary>
        </member>
        <member name="F:SteamKit2.SteamID.ChatInstanceFlags.Clan">
            <summary>
            This flag is set for clan based chat <see cref="T:SteamKit2.SteamID">SteamIDs</see>.
            </summary>
        </member>
        <member name="F:SteamKit2.SteamID.ChatInstanceFlags.Lobby">
            <summary>
            This flag is set for lobby based chat <see cref="T:SteamKit2.SteamID">SteamIDs</see>.
            </summary>
        </member>
        <member name="F:SteamKit2.SteamID.ChatInstanceFlags.MMSLobby">
            <summary>
            This flag is set for matchmaking lobby based chat <see cref="T:SteamKit2.SteamID">SteamIDs</see>.
            </summary>
        </member>
    </members>
</doc>
